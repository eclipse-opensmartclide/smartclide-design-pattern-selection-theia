(self["webpackChunkbrowser_app"] = self["webpackChunkbrowser_app"] || []).push([["vendors-node_modules_theia_core_lib_browser_encoding-registry_js-node_modules_theia_core_lib_-a1370c"],{

/***/ "../node_modules/@theia/application-package/lib/application-props.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@theia/application-package/lib/application-props.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ApplicationProps = exports.NpmRegistryProps = exports.GeneratorConfig = exports.BackendApplicationConfig = exports.FrontendApplicationConfig = exports.ElectronFrontendApplicationConfig = exports.merge = void 0;
/** `deepmerge/dist/cjs` */
exports.merge = __webpack_require__(/*! deepmerge/dist/cjs */ "../node_modules/deepmerge/dist/cjs.js");
var ElectronFrontendApplicationConfig;
(function (ElectronFrontendApplicationConfig) {
    ElectronFrontendApplicationConfig.DEFAULT = {
        disallowReloadKeybinding: false,
        windowOptions: {}
    };
})(ElectronFrontendApplicationConfig = exports.ElectronFrontendApplicationConfig || (exports.ElectronFrontendApplicationConfig = {}));
var FrontendApplicationConfig;
(function (FrontendApplicationConfig) {
    FrontendApplicationConfig.DEFAULT = {
        applicationName: 'Eclipse Theia',
        defaultTheme: 'dark',
        defaultIconTheme: 'none',
        electron: ElectronFrontendApplicationConfig.DEFAULT
    };
})(FrontendApplicationConfig = exports.FrontendApplicationConfig || (exports.FrontendApplicationConfig = {}));
var BackendApplicationConfig;
(function (BackendApplicationConfig) {
    BackendApplicationConfig.DEFAULT = {
        singleInstance: false,
    };
})(BackendApplicationConfig = exports.BackendApplicationConfig || (exports.BackendApplicationConfig = {}));
var GeneratorConfig;
(function (GeneratorConfig) {
    GeneratorConfig.DEFAULT = {
        preloadTemplate: ''
    };
})(GeneratorConfig = exports.GeneratorConfig || (exports.GeneratorConfig = {}));
var NpmRegistryProps;
(function (NpmRegistryProps) {
    NpmRegistryProps.DEFAULT = {
        next: false,
        registry: 'https://registry.npmjs.org/'
    };
})(NpmRegistryProps = exports.NpmRegistryProps || (exports.NpmRegistryProps = {}));
var ApplicationProps;
(function (ApplicationProps) {
    var ApplicationTarget;
    (function (ApplicationTarget) {
        ApplicationTarget["browser"] = "browser";
        ApplicationTarget["electron"] = "electron";
    })(ApplicationTarget = ApplicationProps.ApplicationTarget || (ApplicationProps.ApplicationTarget = {}));
    ;
    ApplicationProps.DEFAULT = __assign(__assign({}, NpmRegistryProps.DEFAULT), { target: 'browser', backend: {
            config: BackendApplicationConfig.DEFAULT
        }, frontend: {
            config: FrontendApplicationConfig.DEFAULT
        }, generator: {
            config: GeneratorConfig.DEFAULT
        } });
})(ApplicationProps = exports.ApplicationProps || (exports.ApplicationProps = {}));


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/core-preferences.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/core-preferences.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Google and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindCorePreferences = exports.createCorePreferences = exports.CorePreferences = exports.corePreferenceSchema = void 0;
var preferences_1 = __webpack_require__(/*! ./preferences */ "../node_modules/@theia/core/lib/browser/preferences/index.js");
var supported_encodings_1 = __webpack_require__(/*! ./supported-encodings */ "../node_modules/@theia/core/lib/browser/supported-encodings.js");
var frontend_application_config_provider_1 = __webpack_require__(/*! ./frontend-application-config-provider */ "../node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
exports.corePreferenceSchema = {
    'type': 'object',
    properties: {
        'workbench.list.openMode': {
            type: 'string',
            enum: [
                'singleClick',
                'doubleClick'
            ],
            default: 'singleClick',
            description: 'Controls how to open items in trees using the mouse.'
        },
        'workbench.editor.highlightModifiedTabs': {
            'type': 'boolean',
            'description': 'Controls whether a top border is drawn on modified (dirty) editor tabs or not.',
            'default': false
        },
        'workbench.editor.closeOnFileDelete': {
            'type': 'boolean',
            // eslint-disable-next-line max-len
            'description': 'Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.',
            'default': true
        },
        'application.confirmExit': {
            type: 'string',
            enum: [
                'never',
                'ifRequired',
                'always',
            ],
            default: 'ifRequired',
            description: 'When to confirm before closing the application window.',
        },
        'workbench.commandPalette.history': {
            type: 'number',
            default: 50,
            minimum: 0,
            description: 'Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.'
        },
        'workbench.colorTheme': {
            type: 'string',
            default: frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultTheme,
            description: 'Specifies the color theme used in the workbench.'
        },
        'workbench.iconTheme': {
            type: ['string', 'null'],
            default: frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultIconTheme,
            description: "Specifies the icon theme used in the workbench or 'null' to not show any file icons."
        },
        'workbench.silentNotifications': {
            type: 'boolean',
            default: false,
            description: 'Controls whether to suppress notification popups.'
        },
        'files.encoding': {
            'type': 'string',
            'enum': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS),
            'default': 'utf8',
            'description': 'The default character set encoding to use when reading and writing files. This setting can also be configured per language.',
            'scope': 'language-overridable',
            'enumDescriptions': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS).map(function (key) { return supported_encodings_1.SUPPORTED_ENCODINGS[key].labelLong; }),
            'included': Object.keys(supported_encodings_1.SUPPORTED_ENCODINGS).length > 1
        },
        'workbench.tree.renderIndentGuides': {
            type: 'string',
            enum: ['onHover', 'none', 'always'],
            default: 'onHover',
            description: 'Controls whether the tree should render indent guides.'
        },
        'keyboard.dispatch': {
            type: 'string',
            enum: [
                'code',
                'keyCode',
            ],
            default: 'code',
            description: 'Whether to interpret keypresses by the `code` of the physical key, or by the `keyCode` provided by the OS.'
        },
    }
};
exports.CorePreferences = Symbol('CorePreferences');
function createCorePreferences(preferences) {
    return preferences_1.createPreferenceProxy(preferences, exports.corePreferenceSchema);
}
exports.createCorePreferences = createCorePreferences;
function bindCorePreferences(bind) {
    bind(exports.CorePreferences).toDynamicValue(function (ctx) {
        var preferences = ctx.container.get(preferences_1.PreferenceService);
        return createCorePreferences(preferences);
    }).inSingletonScope();
    bind(preferences_1.PreferenceContribution).toConstantValue({ schema: exports.corePreferenceSchema });
}
exports.bindCorePreferences = bindCorePreferences;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/encoding-registry.js":
/*!********************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/encoding-registry.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingRegistry = void 0;
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/browser/textFileService.ts#L491
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var disposable_1 = __webpack_require__(/*! ../common/disposable */ "../node_modules/@theia/core/lib/common/disposable.js");
var core_preferences_1 = __webpack_require__(/*! ./core-preferences */ "../node_modules/@theia/core/lib/browser/core-preferences.js");
var encoding_service_1 = __webpack_require__(/*! ../common/encoding-service */ "../node_modules/@theia/core/lib/common/encoding-service.js");
var encodings_1 = __webpack_require__(/*! ../common/encodings */ "../node_modules/@theia/core/lib/common/encodings.js");
var EncodingRegistry = /** @class */ (function () {
    function EncodingRegistry() {
        this.encodingOverrides = [];
    }
    EncodingRegistry.prototype.registerOverride = function (override) {
        var _this = this;
        this.encodingOverrides.push(override);
        return disposable_1.Disposable.create(function () {
            var index = _this.encodingOverrides.indexOf(override);
            if (index !== -1) {
                _this.encodingOverrides.splice(index, 1);
            }
        });
    };
    EncodingRegistry.prototype.getEncodingForResource = function (resource, preferredEncoding) {
        var fileEncoding;
        var override = this.getEncodingOverride(resource);
        if (override) {
            fileEncoding = override; // encoding override always wins
        }
        else if (preferredEncoding) {
            fileEncoding = preferredEncoding; // preferred encoding comes second
        }
        else {
            fileEncoding = this.preferences.get('files.encoding', undefined, resource.toString());
        }
        if (!fileEncoding || !this.encodingService.exists(fileEncoding)) {
            return encodings_1.UTF8; // the default is UTF 8
        }
        return this.encodingService.toIconvEncoding(fileEncoding);
    };
    EncodingRegistry.prototype.getEncodingOverride = function (resource) {
        var e_1, _a;
        if (this.encodingOverrides && this.encodingOverrides.length) {
            try {
                for (var _b = __values(this.encodingOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var override = _c.value;
                    if (override.parent && resource.isEqualOrParent(override.parent)) {
                        return override.encoding;
                    }
                    if (override.extension && resource.path.ext === "." + override.extension) {
                        return override.encoding;
                    }
                    if (override.scheme && override.scheme === resource.scheme) {
                        return override.encoding;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return undefined;
    };
    __decorate([
        inversify_1.inject(core_preferences_1.CorePreferences),
        __metadata("design:type", Object)
    ], EncodingRegistry.prototype, "preferences", void 0);
    __decorate([
        inversify_1.inject(encoding_service_1.EncodingService),
        __metadata("design:type", encoding_service_1.EncodingService)
    ], EncodingRegistry.prototype, "encodingService", void 0);
    EncodingRegistry = __decorate([
        inversify_1.injectable()
    ], EncodingRegistry);
    return EncodingRegistry;
}());
exports.EncodingRegistry = EncodingRegistry;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/frontend-application-config-provider.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/frontend-application-config-provider.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FrontendApplicationConfigProvider = void 0;
var application_props_1 = __webpack_require__(/*! @theia/application-package/lib/application-props */ "../node_modules/@theia/application-package/lib/application-props.js");
var FrontendApplicationConfigProvider = /** @class */ (function () {
    function FrontendApplicationConfigProvider() {
    }
    FrontendApplicationConfigProvider.get = function () {
        var config = FrontendApplicationConfigProvider.doGet();
        if (config === undefined) {
            throw new Error('The configuration is not set. Did you call FrontendApplicationConfigProvider#set?');
        }
        return config;
    };
    FrontendApplicationConfigProvider.set = function (config) {
        if (FrontendApplicationConfigProvider.doGet() !== undefined) {
            throw new Error('The configuration is already set.');
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var globalObject = window;
        var key = FrontendApplicationConfigProvider.KEY;
        globalObject[key] = application_props_1.merge(application_props_1.FrontendApplicationConfig.DEFAULT, config);
    };
    FrontendApplicationConfigProvider.doGet = function () {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var globalObject = window;
        var key = FrontendApplicationConfigProvider.KEY;
        return globalObject[key];
    };
    FrontendApplicationConfigProvider.KEY = Symbol('FrontendApplicationConfigProvider');
    return FrontendApplicationConfigProvider;
}());
exports.FrontendApplicationConfigProvider = FrontendApplicationConfigProvider;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/label-provider.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/label-provider.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LabelProvider = exports.DefaultUriLabelProviderContribution = exports.URIIconReference = exports.LabelProviderContribution = exports.FILE_ICON = exports.FOLDER_ICON = void 0;
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var fileIcons = __webpack_require__(/*! file-icons-js */ "../node_modules/file-icons-js/index.js");
var uri_1 = __webpack_require__(/*! ../common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
var contribution_provider_1 = __webpack_require__(/*! ../common/contribution-provider */ "../node_modules/@theia/core/lib/common/contribution-provider.js");
var types_1 = __webpack_require__(/*! ../common/types */ "../node_modules/@theia/core/lib/common/types.js");
var common_1 = __webpack_require__(/*! ../common */ "../node_modules/@theia/core/lib/common/index.js");
var env_variables_protocol_1 = __webpack_require__(/*! ../common/env-variables/env-variables-protocol */ "../node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js");
/**
 * @internal don't export it, use `LabelProvider.folderIcon` instead.
 */
var DEFAULT_FOLDER_ICON = 'fa fa-folder';
/**
 * @internal don't export it, use `LabelProvider.fileIcon` instead.
 */
var DEFAULT_FILE_ICON = 'fa fa-file';
/**
 * Internal folder icon class for the default (File Icons) theme.
 *
 * @deprecated Use `LabelProvider.folderIcon` to get a folder icon class for the current icon theme.
 */
exports.FOLDER_ICON = DEFAULT_FOLDER_ICON;
/**
 * Internal file icon class for the default (File Icons) theme.
 *
 * @deprecated Use `LabelProvider.fileIcon` to get a file icon class for the current icon theme.
 */
exports.FILE_ICON = DEFAULT_FILE_ICON;
exports.LabelProviderContribution = Symbol('LabelProviderContribution');
var URIIconReference;
(function (URIIconReference) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function is(element) {
        return !!element && typeof element === 'object' && 'kind' in element && element['kind'] === 'uriIconReference';
    }
    URIIconReference.is = is;
    function create(id, uri) {
        return { kind: 'uriIconReference', id: id, uri: uri };
    }
    URIIconReference.create = create;
})(URIIconReference = exports.URIIconReference || (exports.URIIconReference = {}));
var DefaultUriLabelProviderContribution = /** @class */ (function () {
    function DefaultUriLabelProviderContribution() {
        this.formatters = [];
        this.onDidChangeEmitter = new common_1.Emitter();
        // copied and modified from https://github.com/microsoft/vscode/blob/1.44.2/src/vs/workbench/services/label/common/labelService.ts
        /*---------------------------------------------------------------------------------------------
        *  Copyright (c) Microsoft Corporation. All rights reserved.
        *  Licensed under the MIT License. See License.txt in the project root for license information.
        *--------------------------------------------------------------------------------------------*/
        this.labelMatchingRegexp = /\${(scheme|authority|path|query)}/g;
    }
    DefaultUriLabelProviderContribution.prototype.init = function () {
        var _this = this;
        this.envVariablesServer.getHomeDirUri().then(function (result) {
            _this.homePath = result;
            _this.fireOnDidChange();
        });
    };
    DefaultUriLabelProviderContribution.prototype.canHandle = function (element) {
        if (element instanceof uri_1.default || URIIconReference.is(element)) {
            return 1;
        }
        return 0;
    };
    DefaultUriLabelProviderContribution.prototype.getIcon = function (element) {
        if (URIIconReference.is(element) && element.id === 'folder') {
            return this.defaultFolderIcon;
        }
        var uri = URIIconReference.is(element) ? element.uri : element;
        if (uri) {
            var iconClass = uri && this.getFileIcon(uri);
            return iconClass || this.defaultFileIcon;
        }
        return '';
    };
    Object.defineProperty(DefaultUriLabelProviderContribution.prototype, "defaultFolderIcon", {
        get: function () {
            return DEFAULT_FOLDER_ICON;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DefaultUriLabelProviderContribution.prototype, "defaultFileIcon", {
        get: function () {
            return DEFAULT_FILE_ICON;
        },
        enumerable: false,
        configurable: true
    });
    DefaultUriLabelProviderContribution.prototype.getFileIcon = function (uri) {
        var fileIcon = fileIcons.getClassWithColor(uri.displayName);
        if (!fileIcon) {
            return undefined;
        }
        return fileIcon + ' theia-file-icons-js';
    };
    DefaultUriLabelProviderContribution.prototype.getName = function (element) {
        var uri = this.getUri(element);
        return uri && uri.displayName;
    };
    DefaultUriLabelProviderContribution.prototype.getLongName = function (element) {
        var uri = this.getUri(element);
        if (uri) {
            var formatting = this.findFormatting(uri);
            if (formatting) {
                return this.formatUri(uri, formatting);
            }
        }
        return uri && uri.path.toString();
    };
    DefaultUriLabelProviderContribution.prototype.getUri = function (element) {
        return URIIconReference.is(element) ? element.uri : element;
    };
    DefaultUriLabelProviderContribution.prototype.registerFormatter = function (formatter) {
        var _this = this;
        this.formatters.push(formatter);
        this.fireOnDidChange();
        return common_1.Disposable.create(function () {
            _this.formatters = _this.formatters.filter(function (f) { return f !== formatter; });
            _this.fireOnDidChange();
        });
    };
    Object.defineProperty(DefaultUriLabelProviderContribution.prototype, "onDidChange", {
        get: function () {
            return this.onDidChangeEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    DefaultUriLabelProviderContribution.prototype.fireOnDidChange = function () {
        var _this = this;
        this.onDidChangeEmitter.fire({
            affects: function (element) { return _this.canHandle(element) > 0; }
        });
    };
    DefaultUriLabelProviderContribution.prototype.formatUri = function (resource, formatting) {
        var label = formatting.label.replace(this.labelMatchingRegexp, function (match, token) {
            switch (token) {
                case 'scheme': return resource.scheme;
                case 'authority': return resource.authority;
                case 'path': return resource.path.toString();
                case 'query': return resource.query;
                default: return '';
            }
        });
        // convert \c:\something => C:\something
        if (formatting.normalizeDriveLetter && this.hasDriveLetter(label)) {
            label = label.charAt(1).toUpperCase() + label.substr(2);
        }
        if (formatting.tildify) {
            label = common_1.Path.tildify(label, this.homePath ? this.homePath : '');
        }
        if (formatting.authorityPrefix && resource.authority) {
            label = formatting.authorityPrefix + label;
        }
        return label.replace(/\//g, formatting.separator);
    };
    DefaultUriLabelProviderContribution.prototype.hasDriveLetter = function (path) {
        return !!(path && path[2] === ':');
    };
    DefaultUriLabelProviderContribution.prototype.findFormatting = function (resource) {
        var bestResult;
        this.formatters.forEach(function (formatter) {
            if (formatter.scheme === resource.scheme) {
                if (!bestResult && !formatter.authority) {
                    bestResult = formatter;
                    return;
                }
                if (!formatter.authority) {
                    return;
                }
                if ((formatter.authority.toLowerCase() === resource.authority.toLowerCase()) &&
                    (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length ||
                        ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {
                    bestResult = formatter;
                }
            }
        });
        return bestResult ? bestResult.formatting : undefined;
    };
    __decorate([
        inversify_1.inject(env_variables_protocol_1.EnvVariablesServer),
        __metadata("design:type", Object)
    ], DefaultUriLabelProviderContribution.prototype, "envVariablesServer", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DefaultUriLabelProviderContribution.prototype, "init", null);
    DefaultUriLabelProviderContribution = __decorate([
        inversify_1.injectable()
    ], DefaultUriLabelProviderContribution);
    return DefaultUriLabelProviderContribution;
}());
exports.DefaultUriLabelProviderContribution = DefaultUriLabelProviderContribution;
/**
 * The {@link LabelProvider} determines how elements/nodes are displayed in the workbench. For any element, it can determine a short label, a long label
 * and an icon. The {@link LabelProvider} is to be used in lists, trees and tables, but also view specific locations like headers.
 * The common {@link LabelProvider} can be extended/adapted via {@link LabelProviderContribution}s. For every element, the {@links LabelProvider} will determine the
 * {@link LabelProviderContribution} with the hightest priority and delegate to it. Theia registers default {@link LabelProviderContribution} for common types, e.g.
 * the {@link DefaultUriLabelProviderContribution} for elements that have a URI.
 * Using the {@link LabelProvider} across the workbench ensures a common look and feel for elements across multiple views. To adapt the way how specific
 * elements/nodes are rendered, use a {@link LabelProviderContribution} rather than adapting or sub classing the {@link LabelProvider}. This way, your adaptation
 * is applied to all views in Theia that use the {@link LabelProvider}
 */
var LabelProvider = /** @class */ (function () {
    function LabelProvider() {
        this.onDidChangeEmitter = new common_1.Emitter();
    }
    /**
     * Start listening to contributions.
     *
     * Don't call this method directly!
     * It's called by the frontend application during initialization.
     */
    LabelProvider.prototype.initialize = function () {
        var e_1, _a;
        var _this = this;
        var contributions = this.contributionProvider.getContributions();
        try {
            for (var contributions_1 = __values(contributions), contributions_1_1 = contributions_1.next(); !contributions_1_1.done; contributions_1_1 = contributions_1.next()) {
                var eventContribution = contributions_1_1.value;
                if (eventContribution.onDidChange) {
                    eventContribution.onDidChange(function (event) {
                        _this.onDidChangeEmitter.fire({
                            // TODO check eventContribution.canHandle as well
                            affects: function (element) { return _this.affects(element, event); }
                        });
                    });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (contributions_1_1 && !contributions_1_1.done && (_a = contributions_1.return)) _a.call(contributions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LabelProvider.prototype.affects = function (element, event) {
        var e_2, _a;
        if (event.affects(element)) {
            return true;
        }
        try {
            for (var _b = __values(this.findContribution(element)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var contribution = _c.value;
                if (contribution.affects && contribution.affects(element, event)) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    Object.defineProperty(LabelProvider.prototype, "onDidChange", {
        get: function () {
            return this.onDidChangeEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelProvider.prototype, "fileIcon", {
        /**
         * Return a default file icon for the current icon theme.
         */
        get: function () {
            return this.getIcon(URIIconReference.create('file'));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelProvider.prototype, "folderIcon", {
        /**
         * Return a default folder icon for the current icon theme.
         */
        get: function () {
            return this.getIcon(URIIconReference.create('folder'));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the icon class from the list of available {@link LabelProviderContribution} for the given element.
     * @return the icon class
     */
    LabelProvider.prototype.getIcon = function (element) {
        var e_3, _a;
        var contributions = this.findContribution(element);
        try {
            for (var contributions_2 = __values(contributions), contributions_2_1 = contributions_2.next(); !contributions_2_1.done; contributions_2_1 = contributions_2.next()) {
                var contribution = contributions_2_1.value;
                var value = contribution.getIcon && contribution.getIcon(element);
                if (value === undefined) {
                    continue;
                }
                return value;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (contributions_2_1 && !contributions_2_1.done && (_a = contributions_2.return)) _a.call(contributions_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return '';
    };
    /**
     * Get a short name from the list of available {@link LabelProviderContribution} for the given element.
     * @return the short name
     */
    LabelProvider.prototype.getName = function (element) {
        var e_4, _a;
        var contributions = this.findContribution(element);
        try {
            for (var contributions_3 = __values(contributions), contributions_3_1 = contributions_3.next(); !contributions_3_1.done; contributions_3_1 = contributions_3.next()) {
                var contribution = contributions_3_1.value;
                var value = contribution.getName && contribution.getName(element);
                if (value === undefined) {
                    continue;
                }
                return value;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (contributions_3_1 && !contributions_3_1.done && (_a = contributions_3.return)) _a.call(contributions_3);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return '<unknown>';
    };
    /**
     * Get a long name from the list of available {@link LabelProviderContribution} for the given element.
     * @return the long name
     */
    LabelProvider.prototype.getLongName = function (element) {
        var e_5, _a;
        var contributions = this.findContribution(element);
        try {
            for (var contributions_4 = __values(contributions), contributions_4_1 = contributions_4.next(); !contributions_4_1.done; contributions_4_1 = contributions_4.next()) {
                var contribution = contributions_4_1.value;
                var value = contribution.getLongName && contribution.getLongName(element);
                if (value === undefined) {
                    continue;
                }
                return value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (contributions_4_1 && !contributions_4_1.done && (_a = contributions_4.return)) _a.call(contributions_4);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return '';
    };
    LabelProvider.prototype.findContribution = function (element) {
        var prioritized = types_1.Prioritizeable.prioritizeAllSync(this.contributionProvider.getContributions(), function (contrib) {
            return contrib.canHandle(element);
        });
        return prioritized.map(function (c) { return c.value; });
    };
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider),
        inversify_1.named(exports.LabelProviderContribution),
        __metadata("design:type", Object)
    ], LabelProvider.prototype, "contributionProvider", void 0);
    LabelProvider = __decorate([
        inversify_1.injectable()
    ], LabelProvider);
    return LabelProvider;
}());
exports.LabelProvider = LabelProvider;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/index.js":
/*!********************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./preference-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-service.js"), exports);
__exportStar(__webpack_require__(/*! ./preference-proxy */ "../node_modules/@theia/core/lib/browser/preferences/preference-proxy.js"), exports);
__exportStar(__webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/core/lib/browser/preferences/preference-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/core/lib/browser/preferences/preference-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/core/lib/browser/preferences/preference-scope.js"), exports);
__exportStar(__webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-configurations.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-configurations.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceConfigurations = exports.bindPreferenceConfigurations = exports.PreferenceConfiguration = void 0;
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var contribution_provider_1 = __webpack_require__(/*! ../../common/contribution-provider */ "../node_modules/@theia/core/lib/common/contribution-provider.js");
exports.PreferenceConfiguration = Symbol('PreferenceConfiguration');
function bindPreferenceConfigurations(bind) {
    contribution_provider_1.bindContributionProvider(bind, exports.PreferenceConfiguration);
    bind(PreferenceConfigurations).toSelf().inSingletonScope();
}
exports.bindPreferenceConfigurations = bindPreferenceConfigurations;
var PreferenceConfigurations = /** @class */ (function () {
    function PreferenceConfigurations() {
    }
    /* prefer Theia over VS Code by default */
    PreferenceConfigurations.prototype.getPaths = function () {
        return ['.theia', '.vscode'];
    };
    PreferenceConfigurations.prototype.getConfigName = function () {
        return 'settings';
    };
    PreferenceConfigurations.prototype.getSectionNames = function () {
        if (!this.sectionNames) {
            this.sectionNames = this.provider.getContributions().map(function (p) { return p.name; });
        }
        return this.sectionNames;
    };
    PreferenceConfigurations.prototype.isSectionName = function (name) {
        return this.getSectionNames().indexOf(name) !== -1;
    };
    PreferenceConfigurations.prototype.isAnyConfig = function (name) {
        return __spread(this.getSectionNames(), [this.getConfigName()]).includes(name);
    };
    PreferenceConfigurations.prototype.isSectionUri = function (configUri) {
        return !!configUri && this.isSectionName(this.getName(configUri));
    };
    PreferenceConfigurations.prototype.isConfigUri = function (configUri) {
        return !!configUri && this.getName(configUri) === this.getConfigName();
    };
    PreferenceConfigurations.prototype.getName = function (configUri) {
        return configUri.path.name;
    };
    PreferenceConfigurations.prototype.getPath = function (configUri) {
        return configUri.parent.path.base;
    };
    PreferenceConfigurations.prototype.createUri = function (folder, configPath, configName) {
        if (configPath === void 0) { configPath = this.getPaths()[0]; }
        if (configName === void 0) { configName = this.getConfigName(); }
        return folder.resolve(configPath).resolve(configName + '.json');
    };
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider),
        inversify_1.named(exports.PreferenceConfiguration),
        __metadata("design:type", Object)
    ], PreferenceConfigurations.prototype, "provider", void 0);
    PreferenceConfigurations = __decorate([
        inversify_1.injectable()
    ], PreferenceConfigurations);
    return PreferenceConfigurations;
}());
exports.PreferenceConfigurations = PreferenceConfigurations;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-contribution.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-contribution.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceSchemaProvider = exports.FrontendApplicationPreferenceConfig = exports.bindPreferenceSchemaProvider = exports.PreferenceContribution = exports.PreferenceDataProperty = exports.PreferenceSchemaProperties = exports.PreferenceSchema = void 0;
var Ajv = __webpack_require__(/*! ajv */ "../node_modules/ajv/lib/ajv.js");
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/core/lib/common/index.js");
var preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
var preference_provider_1 = __webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/core/lib/browser/preferences/preference-provider.js");
var preference_schema_1 = __webpack_require__(/*! ../../common/preferences/preference-schema */ "../node_modules/@theia/core/lib/common/preferences/preference-schema.js");
Object.defineProperty(exports, "PreferenceSchema", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceSchema; } }));
Object.defineProperty(exports, "PreferenceSchemaProperties", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceSchemaProperties; } }));
Object.defineProperty(exports, "PreferenceDataProperty", ({ enumerable: true, get: function () { return preference_schema_1.PreferenceDataProperty; } }));
var frontend_application_config_provider_1 = __webpack_require__(/*! ../frontend-application-config-provider */ "../node_modules/@theia/core/lib/browser/frontend-application-config-provider.js");
var preference_configurations_1 = __webpack_require__(/*! ./preference-configurations */ "../node_modules/@theia/core/lib/browser/preferences/preference-configurations.js");
var preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
/**
 * @deprecated since 1.13.0 import from @theia/core/lib/browser/preferences/preference-language-override-service.
 */
var preference_language_override_service_2 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
Object.defineProperty(exports, "OVERRIDE_PROPERTY_PATTERN", ({ enumerable: true, get: function () { return preference_language_override_service_2.OVERRIDE_PROPERTY_PATTERN; } }));
/* eslint-disable guard-for-in, @typescript-eslint/no-explicit-any */
exports.PreferenceContribution = Symbol('PreferenceContribution');
function bindPreferenceSchemaProvider(bind) {
    preference_configurations_1.bindPreferenceConfigurations(bind);
    bind(PreferenceSchemaProvider).toSelf().inSingletonScope();
    bind(preference_language_override_service_1.PreferenceLanguageOverrideService).toSelf().inSingletonScope();
    common_1.bindContributionProvider(bind, exports.PreferenceContribution);
}
exports.bindPreferenceSchemaProvider = bindPreferenceSchemaProvider;
var FrontendApplicationPreferenceConfig;
(function (FrontendApplicationPreferenceConfig) {
    function is(config) {
        return 'preferences' in config && typeof config['preferences'] === 'object';
    }
    FrontendApplicationPreferenceConfig.is = is;
})(FrontendApplicationPreferenceConfig = exports.FrontendApplicationPreferenceConfig || (exports.FrontendApplicationPreferenceConfig = {}));
/**
 * The {@link PreferenceSchemaProvider} collects all {@link PreferenceContribution}s and combines
 * the preference schema provided by these contributions into one collective schema. The preferences which
 * are provided by this {@link PreferenceProvider} are derived from this combined schema.
 */
var PreferenceSchemaProvider = /** @class */ (function (_super) {
    __extends(PreferenceSchemaProvider, _super);
    function PreferenceSchemaProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.preferences = {};
        _this.combinedSchema = { properties: {}, patternProperties: {} };
        _this.workspaceSchema = { properties: {}, patternProperties: {} };
        _this.folderSchema = { properties: {}, patternProperties: {} };
        _this.onDidPreferenceSchemaChangedEmitter = new common_1.Emitter();
        _this.onDidPreferenceSchemaChanged = _this.onDidPreferenceSchemaChangedEmitter.event;
        _this.overridePatternProperties = {
            type: 'object',
            description: 'Configure editor settings to be overridden for a language.',
            errorMessage: 'Unknown Identifier. Use language identifiers',
            properties: {},
            additionalProperties: false
        };
        return _this;
    }
    PreferenceSchemaProvider.prototype.fireDidPreferenceSchemaChanged = function () {
        this.onDidPreferenceSchemaChangedEmitter.fire(undefined);
    };
    PreferenceSchemaProvider.prototype.init = function () {
        var _this = this;
        this.readConfiguredPreferences();
        this.preferenceContributions.getContributions().forEach(function (contrib) {
            _this.doSetSchema(contrib.schema);
        });
        this.combinedSchema.additionalProperties = false;
        this._ready.resolve();
    };
    /**
     * Register a new overrideIdentifier. Existing identifiers are not replaced.
     *
     * Allows overriding existing values while keeping both values in store.
     * For example to store different editor settings, e.g. "[markdown].editor.autoIndent",
     * "[json].editor.autoIndent" and "editor.autoIndent"
     * @param overrideIdentifier the new overrideIdentifier
     */
    PreferenceSchemaProvider.prototype.registerOverrideIdentifier = function (overrideIdentifier) {
        if (this.preferenceOverrideService.addOverrideIdentifier(overrideIdentifier)) {
            this.updateOverridePatternPropertiesKey();
        }
    };
    PreferenceSchemaProvider.prototype.updateOverridePatternPropertiesKey = function () {
        var oldKey = this.overridePatternPropertiesKey;
        var newKey = this.preferenceOverrideService.computeOverridePatternPropertiesKey();
        if (oldKey === newKey) {
            return;
        }
        if (oldKey) {
            delete this.combinedSchema.patternProperties[oldKey];
        }
        this.overridePatternPropertiesKey = newKey;
        if (newKey) {
            this.combinedSchema.patternProperties[newKey] = this.overridePatternProperties;
        }
        this.fireDidPreferenceSchemaChanged();
    };
    PreferenceSchemaProvider.prototype.doUnsetSchema = function (changes) {
        var e_1, _a;
        var inverseChanges = [];
        try {
            for (var changes_1 = __values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                var change = changes_1_1.value;
                var preferenceName = change.preferenceName;
                var overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
                if (overridden) {
                    delete this.overridePatternProperties.properties["[" + overridden.overrideIdentifier + "]"];
                    this.removePropFromSchemas("[" + overridden.overrideIdentifier + "]");
                }
                else {
                    this.removePropFromSchemas(preferenceName);
                }
                var newValue = change.oldValue;
                var oldValue = change.newValue;
                var scope = change.scope, domain = change.domain;
                var inverseChange = { preferenceName: preferenceName, oldValue: oldValue, scope: scope, domain: domain };
                if (typeof newValue === undefined) {
                    delete this.preferences[preferenceName];
                }
                else {
                    inverseChange.newValue = newValue;
                    this.preferences[preferenceName] = newValue;
                }
                inverseChanges.push(inverseChange);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return inverseChanges;
    };
    PreferenceSchemaProvider.prototype.doSetSchema = function (schema) {
        var e_2, _a;
        var ajv = new Ajv();
        var valid = ajv.validateSchema(schema);
        if (!valid) {
            var errors = !!ajv.errors ? ajv.errorsText(ajv.errors) : 'unknown validation error';
            console.warn('A contributed preference schema has validation issues : ' + errors);
        }
        var scope = preference_scope_1.PreferenceScope.Default;
        var domain = this.getDomain();
        var changes = [];
        var defaultScope = preference_schema_1.PreferenceSchema.getDefaultScope(schema);
        var overridable = schema.overridable || false;
        try {
            for (var _b = __values(Object.keys(schema.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var preferenceName = _c.value;
                if (this.combinedSchema.properties[preferenceName]) {
                    console.error('Preference name collision detected in the schema for property: ' + preferenceName);
                }
                else {
                    var schemaProps = preference_schema_1.PreferenceDataProperty.fromPreferenceSchemaProperty(schema.properties[preferenceName], defaultScope);
                    if (typeof schemaProps.overridable !== 'boolean' && overridable) {
                        schemaProps.overridable = true;
                    }
                    if (schemaProps.overridable) {
                        this.overridePatternProperties.properties[preferenceName] = schemaProps;
                    }
                    this.updateSchemaProps(preferenceName, schemaProps);
                    var schemaDefault = this.getDefaultValue(schemaProps);
                    var configuredDefault = this.getConfiguredDefault(preferenceName);
                    if (this.preferenceOverrideService.testOverrideValue(preferenceName, schemaDefault)) {
                        schemaProps.defaultValue = preference_schema_1.PreferenceSchemaProperties.is(configuredDefault)
                            ? preference_provider_1.PreferenceProvider.merge(schemaDefault, configuredDefault)
                            : schemaDefault;
                        for (var overriddenPreferenceName in schemaProps.defaultValue) {
                            var overrideValue = schemaDefault[overriddenPreferenceName];
                            var overridePreferenceName = preferenceName + "." + overriddenPreferenceName;
                            changes.push(this.doSetPreferenceValue(overridePreferenceName, overrideValue, { scope: scope, domain: domain }));
                        }
                    }
                    else {
                        schemaProps.defaultValue = configuredDefault === undefined ? schemaDefault : configuredDefault;
                        changes.push(this.doSetPreferenceValue(preferenceName, schemaProps.defaultValue, { scope: scope, domain: domain }));
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return changes;
    };
    PreferenceSchemaProvider.prototype.doSetPreferenceValue = function (preferenceName, newValue, _a) {
        var scope = _a.scope, domain = _a.domain;
        var oldValue = this.preferences[preferenceName];
        this.preferences[preferenceName] = newValue;
        return { preferenceName: preferenceName, oldValue: oldValue, newValue: newValue, scope: scope, domain: domain };
    };
    PreferenceSchemaProvider.prototype.getDefaultValue = function (property) {
        if (property.defaultValue !== undefined) {
            return property.defaultValue;
        }
        if (property.default !== undefined) {
            return property.default;
        }
        var type = Array.isArray(property.type) ? property.type[0] : property.type;
        switch (type) {
            case 'boolean':
                return false;
            case 'integer':
            case 'number':
                return 0;
            case 'string':
                return '';
            case 'array':
                return [];
            case 'object':
                return {};
        }
        // eslint-disable-next-line no-null/no-null
        return null;
    };
    PreferenceSchemaProvider.prototype.getConfiguredDefault = function (preferenceName) {
        var config = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get();
        if (preferenceName && FrontendApplicationPreferenceConfig.is(config) && preferenceName in config.preferences) {
            return config.preferences[preferenceName];
        }
    };
    PreferenceSchemaProvider.prototype.getCombinedSchema = function () {
        return this.combinedSchema;
    };
    PreferenceSchemaProvider.prototype.getSchema = function (scope) {
        switch (scope) {
            case preference_scope_1.PreferenceScope.Default:
            case preference_scope_1.PreferenceScope.User:
                return this.combinedSchema;
            case preference_scope_1.PreferenceScope.Workspace:
                return this.workspaceSchema;
            case preference_scope_1.PreferenceScope.Folder:
                return this.folderSchema;
        }
    };
    PreferenceSchemaProvider.prototype.setSchema = function (schema) {
        var _this = this;
        var changes = this.doSetSchema(schema);
        if (!changes.length) {
            return common_1.Disposable.NULL;
        }
        this.fireDidPreferenceSchemaChanged();
        this.emitPreferencesChangedEvent(changes);
        return common_1.Disposable.create(function () {
            var inverseChanges = _this.doUnsetSchema(changes);
            if (!inverseChanges.length) {
                return;
            }
            _this.fireDidPreferenceSchemaChanged();
            _this.emitPreferencesChangedEvent(inverseChanges);
        });
    };
    PreferenceSchemaProvider.prototype.getPreferences = function () {
        return this.preferences;
    };
    PreferenceSchemaProvider.prototype.setPreference = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, false];
            });
        });
    };
    PreferenceSchemaProvider.prototype.isValidInScope = function (preferenceName, scope) {
        var property;
        var overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
        if (overridden) {
            // try from overridden schema
            property = this.overridePatternProperties["[" + overridden.overrideIdentifier + "]"];
            property = property && property[overridden.preferenceName];
            if (!property) {
                // try from overridden identifier
                property = this.overridePatternProperties[overridden.preferenceName];
            }
            if (!property) {
                // try from overridden value
                property = this.combinedSchema.properties[overridden.preferenceName];
            }
        }
        else {
            property = this.combinedSchema.properties[preferenceName];
        }
        return property && property.scope >= scope;
    };
    PreferenceSchemaProvider.prototype.getPreferenceNames = function () {
        var _a, _b, _i, preferenceName, _c, _d, overridePreferenceName, e_3_1;
        var e_3, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = [];
                    for (_b in this.combinedSchema.properties)
                        _a.push(_b);
                    _i = 0;
                    _f.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 11];
                    preferenceName = _a[_i];
                    return [4 /*yield*/, preferenceName];
                case 2:
                    _f.sent();
                    _f.label = 3;
                case 3:
                    _f.trys.push([3, 8, 9, 10]);
                    _c = (e_3 = void 0, __values(this.getOverridePreferenceNames(preferenceName))), _d = _c.next();
                    _f.label = 4;
                case 4:
                    if (!!_d.done) return [3 /*break*/, 7];
                    overridePreferenceName = _d.value;
                    return [4 /*yield*/, overridePreferenceName];
                case 5:
                    _f.sent();
                    _f.label = 6;
                case 6:
                    _d = _c.next();
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_3_1 = _f.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 10:
                    _i++;
                    return [3 /*break*/, 1];
                case 11: return [2 /*return*/];
            }
        });
    };
    PreferenceSchemaProvider.prototype.getOverridePreferenceNames = function (preferenceName) {
        var preference = this.combinedSchema.properties[preferenceName];
        if (preference && preference.overridable) {
            return this.preferenceOverrideService.getOverridePreferenceNames(preferenceName);
        }
        return [][Symbol.iterator]();
    };
    PreferenceSchemaProvider.prototype.updateSchemaProps = function (key, property) {
        this.combinedSchema.properties[key] = property;
        switch (property.scope) {
            case preference_scope_1.PreferenceScope.Folder:
                this.folderSchema.properties[key] = property;
            // Fall through. isValidInScope implies that User ⊃ Workspace ⊃ Folder,
            // so anything we add to folder should be added to workspace, but not vice versa.
            case preference_scope_1.PreferenceScope.Workspace:
                this.workspaceSchema.properties[key] = property;
                break;
        }
    };
    PreferenceSchemaProvider.prototype.removePropFromSchemas = function (key) {
        // If we remove a key from combined, it should also be removed from all narrower scopes.
        delete this.combinedSchema.properties[key];
        delete this.workspaceSchema.properties[key];
        delete this.folderSchema.properties[key];
    };
    PreferenceSchemaProvider.prototype.readConfiguredPreferences = function () {
        var _this = this;
        var config = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get();
        if (FrontendApplicationPreferenceConfig.is(config)) {
            try {
                var configuredDefaults = config.preferences;
                var parsedDefaults = this.getParsedContent(configuredDefaults);
                Object.assign(this.preferences, parsedDefaults);
                var scope_1 = preference_scope_1.PreferenceScope.Default;
                var domain_1 = this.getDomain();
                var changes = Object.keys(this.preferences)
                    .map(function (key) { return ({ preferenceName: key, oldValue: undefined, newValue: _this.preferences[key], scope: scope_1, domain: domain_1 }); });
                this.emitPreferencesChangedEvent(changes);
            }
            catch (e) {
                console.error('Failed to load preferences from frontend configuration.', e);
            }
        }
    };
    /**
     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.overridePreferenceName`
     */
    PreferenceSchemaProvider.prototype.overridePreferenceName = function (override) {
        return this.preferenceOverrideService.overridePreferenceName(override);
    };
    /**
     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.testOverrideValue`
     */
    PreferenceSchemaProvider.prototype.testOverrideValue = function (name, value) {
        return this.preferenceOverrideService.testOverrideValue(name, value);
    };
    /**
     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.overridenPreferenceName`
     */
    PreferenceSchemaProvider.prototype.overriddenPreferenceName = function (name) {
        return this.preferenceOverrideService.overriddenPreferenceName(name);
    };
    __decorate([
        inversify_1.inject(common_1.ContributionProvider),
        inversify_1.named(exports.PreferenceContribution),
        __metadata("design:type", Object)
    ], PreferenceSchemaProvider.prototype, "preferenceContributions", void 0);
    __decorate([
        inversify_1.inject(preference_configurations_1.PreferenceConfigurations),
        __metadata("design:type", preference_configurations_1.PreferenceConfigurations)
    ], PreferenceSchemaProvider.prototype, "configurations", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PreferenceSchemaProvider.prototype, "init", null);
    PreferenceSchemaProvider = __decorate([
        inversify_1.injectable()
    ], PreferenceSchemaProvider);
    return PreferenceSchemaProvider;
}(preference_provider_1.PreferenceProvider));
exports.PreferenceSchemaProvider = PreferenceSchemaProvider;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceLanguageOverrideService = exports.getOverridePattern = exports.OVERRIDE_PROPERTY_PATTERN = exports.OverridePreferenceName = void 0;
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/core/lib/common/index.js");
var preference_schema_1 = __webpack_require__(/*! ../../common/preferences/preference-schema */ "../node_modules/@theia/core/lib/common/preferences/preference-schema.js");
var OverridePreferenceName;
(function (OverridePreferenceName) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function is(arg) {
        return !!arg && typeof arg === 'object' && 'preferenceName' in arg && 'overrideIdentifier' in arg;
    }
    OverridePreferenceName.is = is;
})(OverridePreferenceName = exports.OverridePreferenceName || (exports.OverridePreferenceName = {}));
var OVERRIDE_PROPERTY = '\\[(.*)\\]$';
exports.OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);
exports.getOverridePattern = function (identifier) { return "\\[(" + identifier + ")\\]$"; };
var PreferenceLanguageOverrideService = /** @class */ (function () {
    function PreferenceLanguageOverrideService() {
        this.overrideIdentifiers = new Set();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    PreferenceLanguageOverrideService.prototype.testOverrideValue = function (name, value) {
        return preference_schema_1.PreferenceSchemaProperties.is(value) && exports.OVERRIDE_PROPERTY_PATTERN.test(name);
    };
    PreferenceLanguageOverrideService.prototype.overridePreferenceName = function (_a) {
        var preferenceName = _a.preferenceName, overrideIdentifier = _a.overrideIdentifier;
        return "[" + overrideIdentifier + "]." + preferenceName;
    };
    PreferenceLanguageOverrideService.prototype.overriddenPreferenceName = function (name) {
        var index = name.indexOf('.');
        if (index === -1) {
            return undefined;
        }
        var matches = name.substr(0, index).match(exports.OVERRIDE_PROPERTY_PATTERN);
        var overrideIdentifier = matches && matches[1];
        if (!overrideIdentifier || !this.overrideIdentifiers.has(overrideIdentifier)) {
            return undefined;
        }
        var preferenceName = name.substr(index + 1);
        return { preferenceName: preferenceName, overrideIdentifier: overrideIdentifier };
    };
    PreferenceLanguageOverrideService.prototype.computeOverridePatternPropertiesKey = function () {
        var e_1, _a;
        var param = '';
        try {
            for (var _b = __values(this.overrideIdentifiers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var overrideIdentifier = _c.value;
                if (param.length) {
                    param += '|';
                }
                param += new RegExp(common_1.escapeRegExpCharacters(overrideIdentifier)).source;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return param.length ? exports.getOverridePattern(param) : undefined;
    };
    PreferenceLanguageOverrideService.prototype.getOverridePreferenceNames = function (preferenceName) {
        var _a, _b, overrideIdentifier, e_2_1;
        var e_2, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = __values(this.overrideIdentifiers), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    overrideIdentifier = _b.value;
                    return [4 /*yield*/, this.overridePreferenceName({ preferenceName: preferenceName, overrideIdentifier: overrideIdentifier })];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_2_1 = _d.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    /**
     * @param overrideIdentifier
     * @returns true if the addition caused a change, i.e. if the identifier was not already present in the set of identifiers, false otherwise.
     */
    PreferenceLanguageOverrideService.prototype.addOverrideIdentifier = function (overrideIdentifier) {
        var alreadyPresent = this.overrideIdentifiers.has(overrideIdentifier);
        if (!alreadyPresent) {
            this.overrideIdentifiers.add(overrideIdentifier);
        }
        return !alreadyPresent;
    };
    /**
     * @param overrideIdentifier
     * @returns true if the deletion caused a change, i.e. if the identifier was present in the set, false otherwise.
     */
    PreferenceLanguageOverrideService.prototype.removeOverrideIdentifier = function (overrideIdentifier) {
        return this.overrideIdentifiers.delete(overrideIdentifier);
    };
    PreferenceLanguageOverrideService = __decorate([
        inversify_1.injectable()
    ], PreferenceLanguageOverrideService);
    return PreferenceLanguageOverrideService;
}());
exports.PreferenceLanguageOverrideService = PreferenceLanguageOverrideService;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-provider.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-provider.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceProvider = exports.PreferenceProviderDataChange = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var debounce = __webpack_require__(/*! p-debounce */ "../node_modules/p-debounce/index.js");
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var coreutils_1 = __webpack_require__(/*! @phosphor/coreutils */ "../node_modules/@phosphor/coreutils/lib/index.js");
var uri_1 = __webpack_require__(/*! ../../common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
var common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/core/lib/common/index.js");
var promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/core/lib/common/promise-util.js");
var preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
var PreferenceProviderDataChange;
(function (PreferenceProviderDataChange) {
    function affects(change, resourceUri) {
        var resourcePath = resourceUri && new uri_1.default(resourceUri).path;
        var domain = change.domain;
        return !resourcePath || !domain || domain.some(function (uri) { return new uri_1.default(uri).path.relativity(resourcePath) >= 0; });
    }
    PreferenceProviderDataChange.affects = affects;
})(PreferenceProviderDataChange = exports.PreferenceProviderDataChange || (exports.PreferenceProviderDataChange = {}));
/**
 * The {@link PreferenceProvider} is used to store and retrieve preference values. A {@link PreferenceProvider} does not operate in a global scope but is
 * configured for one or more {@link PreferenceScope}s. The (default implementation for the) {@link PreferenceService} aggregates all {@link PreferenceProvider}s and
 * serves as a common facade for manipulating preference values.
 */
var PreferenceProvider = /** @class */ (function () {
    function PreferenceProvider() {
        var _this = this;
        this.onDidPreferencesChangedEmitter = new common_1.Emitter();
        this.onDidPreferencesChanged = this.onDidPreferencesChangedEmitter.event;
        this.toDispose = new common_1.DisposableCollection();
        this._ready = new promise_util_1.Deferred();
        this._pendingChanges = Promise.resolve(false);
        this.fireDidPreferencesChanged = debounce(function () {
            var changes = _this.deferredChanges;
            _this.deferredChanges = undefined;
            if (changes && Object.keys(changes).length) {
                _this.onDidPreferencesChangedEmitter.fire(changes);
                return true;
            }
            return false;
        }, 0);
        this.toDispose.push(this.onDidPreferencesChangedEmitter);
    }
    PreferenceProvider.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    Object.defineProperty(PreferenceProvider.prototype, "pendingChanges", {
        get: function () {
            return this._pendingChanges;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Informs the listeners that one or more preferences of this provider are changed.
     * The listeners are able to find what was changed from the emitted event.
     */
    PreferenceProvider.prototype.emitPreferencesChangedEvent = function (changes) {
        var e_1, _a, e_2, _b;
        if (Array.isArray(changes)) {
            try {
                for (var changes_1 = __values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                    var change = changes_1_1.value;
                    this.mergePreferenceProviderDataChange(change);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            try {
                for (var _c = __values(Object.keys(changes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var preferenceName = _d.value;
                    this.mergePreferenceProviderDataChange(changes[preferenceName]);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return this._pendingChanges = this.fireDidPreferencesChanged();
    };
    PreferenceProvider.prototype.mergePreferenceProviderDataChange = function (change) {
        if (!this.deferredChanges) {
            this.deferredChanges = {};
        }
        var current = this.deferredChanges[change.preferenceName];
        var newValue = change.newValue, scope = change.scope, domain = change.domain;
        if (!current) {
            // new
            this.deferredChanges[change.preferenceName] = change;
        }
        else if (current.oldValue === newValue) {
            // delete
            delete this.deferredChanges[change.preferenceName];
        }
        else {
            // update
            Object.assign(current, { newValue: newValue, scope: scope, domain: domain });
        }
    };
    /**
     * Retrieve the stored value for the given preference and resource URI.
     *
     * @param preferenceName the preference identifier.
     * @param resourceUri the uri of the resource for which the preference is stored. This is used to retrieve
     * a potentially different value for the same preference for different resources, for example `files.encoding`.
     *
     * @returns the value stored for the given preference and resourceUri if it exists, otherwise `undefined`.
     */
    PreferenceProvider.prototype.get = function (preferenceName, resourceUri) {
        return this.resolve(preferenceName, resourceUri).value;
    };
    /**
     * Resolve the value for the given preference and resource URI.
     *
     * @param preferenceName the preference identifier.
     * @param resourceUri the URI of the resource for which this provider should resolve the preference. This is used to retrieve
     * a potentially different value for the same preference for different resources, for example `files.encoding`.
     *
     * @returns an object containing the value stored for the given preference and resourceUri if it exists,
     * otherwise `undefined`.
     */
    PreferenceProvider.prototype.resolve = function (preferenceName, resourceUri) {
        var value = this.getPreferences(resourceUri)[preferenceName];
        if (value !== undefined) {
            return {
                value: value,
                configUri: this.getConfigUri(resourceUri)
            };
        }
        return {};
    };
    Object.defineProperty(PreferenceProvider.prototype, "ready", {
        /**
         * Resolved when the preference provider is ready to provide preferences
         * It should be resolved by subclasses.
         */
        get: function () {
            return this._ready.promise;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieve the domain for this provider.
     *
     * @returns the domain or `undefined` if this provider is suitable for all domains.
     */
    PreferenceProvider.prototype.getDomain = function () {
        return undefined;
    };
    /**
     * Retrieve the configuration URI for the given resource URI.
     * @param resourceUri the uri of the resource or `undefined`.
     * @param sectionName the section to return the URI for, e.g. `tasks` or `launch`. Defaults to settings.
     *
     * @returns the corresponding resource URI or `undefined` if there is no valid URI.
     */
    PreferenceProvider.prototype.getConfigUri = function (resourceUri, sectionName) {
        return undefined;
    };
    PreferenceProvider.merge = function (source, target) {
        var e_3, _a;
        if (source === undefined || !coreutils_1.JSONExt.isObject(source)) {
            return coreutils_1.JSONExt.deepCopy(target);
        }
        if (coreutils_1.JSONExt.isPrimitive(target)) {
            return {};
        }
        try {
            for (var _b = __values(Object.keys(target)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var value = target[key];
                if (key in source) {
                    if (coreutils_1.JSONExt.isObject(source[key]) && coreutils_1.JSONExt.isObject(value)) {
                        this.merge(source[key], value);
                        continue;
                    }
                }
                source[key] = coreutils_1.JSONExt.deepCopy(value);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return source;
    };
    /**
     * Handles deep equality with the possibility of `undefined`
     */
    PreferenceProvider.deepEqual = function (a, b) {
        if (a === b) {
            return true;
        }
        if (a === undefined || b === undefined) {
            return false;
        }
        return coreutils_1.JSONExt.deepEqual(a, b);
    };
    PreferenceProvider.prototype.getParsedContent = function (jsonData) {
        var preferences = {};
        if (typeof jsonData !== 'object') {
            return preferences;
        }
        // eslint-disable-next-line guard-for-in
        for (var preferenceName in jsonData) {
            var preferenceValue = jsonData[preferenceName];
            if (this.preferenceOverrideService.testOverrideValue(preferenceName, preferenceValue)) {
                // eslint-disable-next-line guard-for-in
                for (var overriddenPreferenceName in preferenceValue) {
                    var overriddenValue = preferenceValue[overriddenPreferenceName];
                    preferences[preferenceName + "." + overriddenPreferenceName] = overriddenValue;
                }
            }
            else {
                preferences[preferenceName] = preferenceValue;
            }
        }
        return preferences;
    };
    __decorate([
        inversify_1.inject(preference_language_override_service_1.PreferenceLanguageOverrideService),
        __metadata("design:type", preference_language_override_service_1.PreferenceLanguageOverrideService)
    ], PreferenceProvider.prototype, "preferenceOverrideService", void 0);
    PreferenceProvider = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], PreferenceProvider);
    return PreferenceProvider;
}());
exports.PreferenceProvider = PreferenceProvider;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-proxy.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-proxy.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPreferenceProxy = void 0;
var preference_contribution_1 = __webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
var preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
var preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
/**
 * Creates a preference proxy for typesafe preference handling.
 *
 * @param preferences the underlying preference service to use for preference handling.
 * @param promisedSchema the JSON Schema which describes which preferences are available including types and descriptions. Can be a promise.
 * @param options configuration options.
 *
 * @returns the created preference proxy.
 *
 * ### Usage
 *
 *  1. Create JSON Schema specifying your preferences
 *  2. Create Configuration type based on the JSON Schema
 *  3. Bind the return value of `createPreferenceProxy` to make your preferences available wherever needed.
 *
 * See {@link CorePreferences} for an example.
 *
 * Note that if `schema` is a Promise, most actions will be no-ops until the promise is resolved.
 */
function createPreferenceProxy(preferences, promisedSchema, options) {
    var opts = options || {};
    var prefix = opts.prefix || '';
    var style = opts.style || 'flat';
    var isDeep = style === 'deep' || style === 'both';
    var isFlat = style === 'both' || style === 'flat';
    var schema;
    if (preference_contribution_1.PreferenceSchema.is(promisedSchema)) {
        schema = promisedSchema;
    }
    else {
        promisedSchema.then(function (s) { return schema = s; });
    }
    var onPreferenceChanged = function (listener, thisArgs, disposables) { return preferences.onPreferencesChanged(function (changes) {
        var e_1, _a;
        if (schema) {
            var _loop_1 = function (key) {
                var e = changes[key];
                var overridden = preferences.overriddenPreferenceName(e.preferenceName);
                var preferenceName = overridden ? overridden.preferenceName : e.preferenceName;
                if (preferenceName.startsWith(prefix) && (!overridden || !opts.overrideIdentifier || overridden.overrideIdentifier === opts.overrideIdentifier)) {
                    if (schema.properties[preferenceName]) {
                        var newValue = e.newValue, oldValue = e.oldValue;
                        listener({
                            newValue: newValue, oldValue: oldValue, preferenceName: preferenceName,
                            affects: function (resourceUri, overrideIdentifier) {
                                if (overrideIdentifier !== undefined) {
                                    if (overridden && overridden.overrideIdentifier !== overrideIdentifier) {
                                        return false;
                                    }
                                }
                                return e.affects(resourceUri);
                            }
                        });
                    }
                }
            };
            try {
                for (var _b = __values(Object.keys(changes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }, thisArgs, disposables); };
    var unsupportedOperation = function (_, __) {
        throw new Error('Unsupported operation');
    };
    var getValue = function (arg, defaultValue, resourceUri) {
        var preferenceName = preference_language_override_service_1.OverridePreferenceName.is(arg) ?
            preferences.overridePreferenceName(arg) :
            arg;
        return preferences.get(preferenceName, defaultValue, resourceUri || opts.resourceUri);
    };
    var ownKeys = function () {
        var e_2, _a;
        var properties = [];
        if (schema) {
            try {
                for (var _b = __values(Object.keys(schema.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    if (p.startsWith(prefix)) {
                        var idx = p.indexOf('.', prefix.length);
                        if (idx !== -1 && isDeep) {
                            var pre = p.substr(prefix.length, idx - prefix.length);
                            if (properties.indexOf(pre) === -1) {
                                properties.push(pre);
                            }
                        }
                        var prop = p.substr(prefix.length);
                        if (isFlat || prop.indexOf('.') === -1) {
                            properties.push(prop);
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return properties;
    };
    var set = function (_, property, value) {
        var e_3, _a, e_4, _b;
        if (typeof property !== 'string') {
            throw new Error("unexpected property: " + String(property));
        }
        if (style === 'deep' && property.indexOf('.') !== -1) {
            return false;
        }
        if (schema) {
            var fullProperty = prefix ? prefix + property : property;
            if (schema.properties[fullProperty]) {
                preferences.set(fullProperty, value, preference_scope_1.PreferenceScope.Default);
                return true;
            }
            var newPrefix = fullProperty + '.';
            try {
                for (var _c = __values(Object.keys(schema.properties)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var p = _d.value;
                    if (p.startsWith(newPrefix)) {
                        var subProxy = createPreferenceProxy(preferences, schema, {
                            prefix: newPrefix,
                            resourceUri: opts.resourceUri,
                            overrideIdentifier: opts.overrideIdentifier,
                            style: style
                        });
                        try {
                            for (var _e = (e_4 = void 0, __values(Object.keys(value))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var k = _f.value;
                                subProxy[k] = value[k];
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return false;
    };
    var get = function (_, property) {
        var e_5, _a;
        if (typeof property !== 'string') {
            throw new Error("unexpected property: " + String(property));
        }
        var fullProperty = prefix ? prefix + property : property;
        if (schema) {
            if (isFlat || property.indexOf('.') === -1) {
                if (schema.properties[fullProperty]) {
                    var value = void 0;
                    if (opts.overrideIdentifier) {
                        value = preferences.get(preferences.overridePreferenceName({
                            overrideIdentifier: opts.overrideIdentifier,
                            preferenceName: fullProperty
                        }), undefined, opts.resourceUri);
                    }
                    if (value === undefined) {
                        value = preferences.get(fullProperty, undefined, opts.resourceUri);
                    }
                    return value;
                }
            }
        }
        if (property === 'onPreferenceChanged') {
            return onPreferenceChanged;
        }
        if (property === 'dispose') {
            return function () { };
        }
        if (property === 'ready') {
            return preferences.ready;
        }
        if (property === 'get') {
            return getValue;
        }
        if (property === 'toJSON') {
            return toJSON();
        }
        if (schema && isDeep) {
            var newPrefix = fullProperty + '.';
            try {
                for (var _b = __values(Object.keys(schema.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var p = _c.value;
                    if (p.startsWith(newPrefix)) {
                        return createPreferenceProxy(preferences, schema, { prefix: newPrefix, resourceUri: opts.resourceUri, overrideIdentifier: opts.overrideIdentifier, style: style });
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            var value = void 0;
            var parentSegment = fullProperty;
            var segments = [];
            do {
                var index = parentSegment.lastIndexOf('.');
                segments.push(parentSegment.substring(index + 1));
                parentSegment = parentSegment.substring(0, index);
                if (parentSegment in schema.properties) {
                    value = get(_, parentSegment);
                }
            } while (parentSegment && value === undefined);
            var segment = void 0;
            while (typeof value === 'object' && (segment = segments.pop())) {
                value = value[segment];
            }
            return segments.length ? undefined : value;
        }
        return undefined;
    };
    var toJSON = function () {
        var e_6, _a;
        var result = {};
        try {
            for (var _b = __values(ownKeys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                result[k] = get(undefined, k);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return result;
    };
    return new Proxy({}, {
        get: get,
        ownKeys: ownKeys,
        getOwnPropertyDescriptor: function (_, property) {
            if (ownKeys().indexOf(property) !== -1) {
                return {
                    enumerable: true,
                    configurable: true
                };
            }
            return {};
        },
        set: set,
        deleteProperty: unsupportedOperation,
        defineProperty: unsupportedOperation
    });
}
exports.createPreferenceProxy = createPreferenceProxy;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-scope.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-scope.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceScope = void 0;
var preference_scope_1 = __webpack_require__(/*! ../../common/preferences/preference-scope */ "../node_modules/@theia/core/lib/common/preferences/preference-scope.js");
Object.defineProperty(exports, "PreferenceScope", ({ enumerable: true, get: function () { return preference_scope_1.PreferenceScope; } }));


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/preferences/preference-service.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/preferences/preference-service.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceServiceImpl = exports.PreferenceProviderProvider = exports.PreferenceService = exports.PreferenceChangeImpl = exports.PreferenceScope = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/core/lib/common/index.js");
var promise_util_1 = __webpack_require__(/*! ../../common/promise-util */ "../node_modules/@theia/core/lib/common/promise-util.js");
var preference_provider_1 = __webpack_require__(/*! ./preference-provider */ "../node_modules/@theia/core/lib/browser/preferences/preference-provider.js");
var preference_contribution_1 = __webpack_require__(/*! ./preference-contribution */ "../node_modules/@theia/core/lib/browser/preferences/preference-contribution.js");
var uri_1 = __webpack_require__(/*! ../../common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
var preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/core/lib/browser/preferences/preference-scope.js");
Object.defineProperty(exports, "PreferenceScope", ({ enumerable: true, get: function () { return preference_scope_1.PreferenceScope; } }));
var preference_configurations_1 = __webpack_require__(/*! ./preference-configurations */ "../node_modules/@theia/core/lib/browser/preferences/preference-configurations.js");
var json_1 = __webpack_require__(/*! @phosphor/coreutils/lib/json */ "../node_modules/@phosphor/coreutils/lib/json.js");
var preference_language_override_service_1 = __webpack_require__(/*! ./preference-language-override-service */ "../node_modules/@theia/core/lib/browser/preferences/preference-language-override-service.js");
var PreferenceChangeImpl = /** @class */ (function () {
    function PreferenceChangeImpl(change) {
        this.change = change;
    }
    Object.defineProperty(PreferenceChangeImpl.prototype, "preferenceName", {
        get: function () {
            return this.change.preferenceName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceChangeImpl.prototype, "newValue", {
        get: function () {
            return this.change.newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceChangeImpl.prototype, "oldValue", {
        get: function () {
            return this.change.oldValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceChangeImpl.prototype, "scope", {
        get: function () {
            return this.change.scope;
        },
        enumerable: false,
        configurable: true
    });
    // TODO add tests
    PreferenceChangeImpl.prototype.affects = function (resourceUri) {
        var resourcePath = resourceUri && new uri_1.default(resourceUri).path;
        var domain = this.change.domain;
        return !resourcePath || !domain || domain.some(function (uri) { return new uri_1.default(uri).path.relativity(resourcePath) >= 0; });
    };
    return PreferenceChangeImpl;
}());
exports.PreferenceChangeImpl = PreferenceChangeImpl;
exports.PreferenceService = Symbol('PreferenceService');
/**
 * We cannot load providers directly in the case if they depend on `PreferenceService` somehow.
 * It allows to load them lazily after DI is configured.
 */
exports.PreferenceProviderProvider = Symbol('PreferenceProviderProvider');
var PreferenceServiceImpl = /** @class */ (function () {
    function PreferenceServiceImpl() {
        this.onPreferenceChangedEmitter = new common_1.Emitter();
        this.onPreferenceChanged = this.onPreferenceChangedEmitter.event;
        this.onPreferencesChangedEmitter = new common_1.Emitter();
        this.onPreferencesChanged = this.onPreferencesChangedEmitter.event;
        this.toDispose = new common_1.DisposableCollection(this.onPreferenceChangedEmitter, this.onPreferencesChangedEmitter);
        this.preferenceProviders = new Map();
        this._ready = new promise_util_1.Deferred();
    }
    PreferenceServiceImpl.prototype.initializeProviders = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, scope, provider, e_1_1, e_2;
            var e_1, _c;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 9, , 10]);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(preference_scope_1.PreferenceScope.getScopes()), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        scope = _b.value;
                        provider = this.providerProvider(scope);
                        this.preferenceProviders.set(scope, provider);
                        this.toDispose.push(provider.onDidPreferencesChanged(function (changes) {
                            return _this.reconcilePreferences(changes);
                        }));
                        return [4 /*yield*/, provider.ready];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        this._ready.resolve();
                        return [3 /*break*/, 10];
                    case 9:
                        e_2 = _d.sent();
                        this._ready.reject(e_2);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    PreferenceServiceImpl.prototype.init = function () {
        var _this = this;
        this.toDispose.push(common_1.Disposable.create(function () { return _this._ready.reject(new Error('preference service is disposed')); }));
        this.initializeProviders();
    };
    PreferenceServiceImpl.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    Object.defineProperty(PreferenceServiceImpl.prototype, "ready", {
        get: function () {
            return this._ready.promise;
        },
        enumerable: false,
        configurable: true
    });
    PreferenceServiceImpl.prototype.reconcilePreferences = function (changes) {
        var e_3, _a, e_4, _b;
        var _this = this;
        var changesToEmit = {};
        var acceptChange = function (change) {
            return _this.getAffectedPreferenceNames(change, function (preferenceName) {
                return changesToEmit[preferenceName] = new PreferenceChangeImpl(__assign(__assign({}, change), { preferenceName: preferenceName }));
            });
        };
        try {
            for (var _c = __values(Object.keys(changes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var preferenceName = _d.value;
                var change = changes[preferenceName];
                if (change.newValue === undefined) {
                    var overridden = this.overriddenPreferenceName(change.preferenceName);
                    if (overridden) {
                        change = __assign(__assign({}, change), { newValue: this.doGet(overridden.preferenceName) });
                    }
                }
                if (this.schema.isValidInScope(preferenceName, preference_scope_1.PreferenceScope.Folder)) {
                    acceptChange(change);
                    continue;
                }
                try {
                    for (var _e = (e_4 = void 0, __values(preference_scope_1.PreferenceScope.getReversedScopes())), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var scope = _f.value;
                        if (this.schema.isValidInScope(preferenceName, scope)) {
                            var provider = this.getProvider(scope);
                            if (provider) {
                                var value = provider.get(preferenceName);
                                if (scope > change.scope && value !== undefined) {
                                    // preference defined in a more specific scope
                                    break;
                                }
                                else if (scope === change.scope && change.newValue !== undefined) {
                                    // preference is changed into something other than `undefined`
                                    acceptChange(change);
                                }
                                else if (scope < change.scope && change.newValue === undefined && value !== undefined) {
                                    // preference is changed to `undefined`, use the value from a more general scope
                                    change = __assign(__assign({}, change), { newValue: value, scope: scope });
                                    acceptChange(change);
                                }
                            }
                        }
                        else if (change.newValue === undefined && change.scope === preference_scope_1.PreferenceScope.Default) {
                            // preference is removed
                            acceptChange(change);
                            break;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // emit the changes
        var changedPreferenceNames = Object.keys(changesToEmit);
        if (changedPreferenceNames.length > 0) {
            this.onPreferencesChangedEmitter.fire(changesToEmit);
        }
        changedPreferenceNames.forEach(function (preferenceName) { return _this.onPreferenceChangedEmitter.fire(changesToEmit[preferenceName]); });
    };
    PreferenceServiceImpl.prototype.getAffectedPreferenceNames = function (change, accept) {
        var e_5, _a;
        accept(change.preferenceName);
        try {
            for (var _b = __values(this.schema.getOverridePreferenceNames(change.preferenceName)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var overridePreferenceName = _c.value;
                if (!this.doHas(overridePreferenceName)) {
                    accept(overridePreferenceName);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    PreferenceServiceImpl.prototype.getProvider = function (scope) {
        return this.preferenceProviders.get(scope);
    };
    PreferenceServiceImpl.prototype.has = function (preferenceName, resourceUri) {
        return this.get(preferenceName, undefined, resourceUri) !== undefined;
    };
    PreferenceServiceImpl.prototype.get = function (preferenceName, defaultValue, resourceUri) {
        return this.resolve(preferenceName, defaultValue, resourceUri).value;
    };
    PreferenceServiceImpl.prototype.resolve = function (preferenceName, defaultValue, resourceUri) {
        var _a = this.doResolve(preferenceName, defaultValue, resourceUri), value = _a.value, configUri = _a.configUri;
        if (value === undefined) {
            var overridden = this.overriddenPreferenceName(preferenceName);
            if (overridden) {
                return this.doResolve(overridden.preferenceName, defaultValue, resourceUri);
            }
        }
        return { value: value, configUri: configUri };
    };
    PreferenceServiceImpl.prototype.set = function (preferenceName, value, scope, resourceUri) {
        return __awaiter(this, void 0, void 0, function () {
            var resolvedScope, provider, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resolvedScope = scope !== null && scope !== void 0 ? scope : (!resourceUri ? preference_scope_1.PreferenceScope.Workspace : preference_scope_1.PreferenceScope.Folder);
                        if (resolvedScope === preference_scope_1.PreferenceScope.Folder && !resourceUri) {
                            throw new Error('Unable to write to Folder Settings because no resource is provided.');
                        }
                        provider = this.getProvider(resolvedScope);
                        _a = provider;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, provider.setPreference(preferenceName, value, resourceUri)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        if (_a) {
                            return [2 /*return*/];
                        }
                        throw new Error("Unable to write to " + preference_scope_1.PreferenceScope[resolvedScope] + " Settings.");
                }
            });
        });
    };
    PreferenceServiceImpl.prototype.getBoolean = function (preferenceName, defaultValue, resourceUri) {
        var value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        return value !== null && value !== undefined ? !!value : defaultValue;
    };
    PreferenceServiceImpl.prototype.getString = function (preferenceName, defaultValue, resourceUri) {
        var value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        if (value === null || value === undefined) {
            return defaultValue;
        }
        return value.toString();
    };
    PreferenceServiceImpl.prototype.getNumber = function (preferenceName, defaultValue, resourceUri) {
        var value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);
        // eslint-disable-next-line no-null/no-null
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === 'number') {
            return value;
        }
        return Number(value);
    };
    PreferenceServiceImpl.prototype.inspect = function (preferenceName, resourceUri) {
        var _a, _b;
        var defaultValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Default, resourceUri);
        var globalValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.User, resourceUri);
        var workspaceValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Workspace, resourceUri);
        var workspaceFolderValue = this.inspectInScope(preferenceName, preference_scope_1.PreferenceScope.Folder, resourceUri);
        var valueApplied = (_b = (_a = workspaceFolderValue !== null && workspaceFolderValue !== void 0 ? workspaceFolderValue : workspaceValue) !== null && _a !== void 0 ? _a : globalValue) !== null && _b !== void 0 ? _b : defaultValue;
        return { preferenceName: preferenceName, defaultValue: defaultValue, globalValue: globalValue, workspaceValue: workspaceValue, workspaceFolderValue: workspaceFolderValue, value: valueApplied };
    };
    PreferenceServiceImpl.prototype.inspectInScope = function (preferenceName, scope, resourceUri) {
        var value = this.doInspectInScope(preferenceName, scope, resourceUri);
        if (value === undefined) {
            var overridden = this.overriddenPreferenceName(preferenceName);
            if (overridden) {
                return this.doInspectInScope(overridden.preferenceName, scope, resourceUri);
            }
        }
        return value;
    };
    PreferenceServiceImpl.prototype.getScopedValueFromInspection = function (inspection, scope) {
        switch (scope) {
            case preference_scope_1.PreferenceScope.Default:
                return inspection.defaultValue;
            case preference_scope_1.PreferenceScope.User:
                return inspection.globalValue;
            case preference_scope_1.PreferenceScope.Workspace:
                return inspection.workspaceValue;
            case preference_scope_1.PreferenceScope.Folder:
                return inspection.workspaceFolderValue;
        }
        common_1.unreachable(scope, 'Not all PreferenceScope enum variants handled.');
    };
    PreferenceServiceImpl.prototype.updateValue = function (preferenceName, value, resourceUri) {
        return __awaiter(this, void 0, void 0, function () {
            var inspection, scopesToChange, isDeletion, effectiveValue_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inspection = this.inspect(preferenceName, resourceUri);
                        if (!inspection) return [3 /*break*/, 2];
                        scopesToChange = this.getScopesToChange(inspection, value);
                        isDeletion = value === undefined
                            || (scopesToChange.length === 1 && scopesToChange[0] === preference_scope_1.PreferenceScope.User && json_1.JSONExt.deepEqual(value, inspection.defaultValue));
                        effectiveValue_1 = isDeletion ? undefined : value;
                        return [4 /*yield*/, Promise.all(scopesToChange.map(function (scope) { return _this.set(preferenceName, effectiveValue_1, scope, resourceUri); }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PreferenceServiceImpl.prototype.getScopesToChange = function (inspection, intendedValue) {
        var _this = this;
        var _a;
        if (json_1.JSONExt.deepEqual(inspection.value, intendedValue)) {
            return [];
        }
        // Scopes in ascending order of scope breadth.
        var allScopes = preference_scope_1.PreferenceScope.getReversedScopes();
        // Get rid of Default scope. We can't set anything there.
        allScopes.pop();
        var isScopeDefined = function (scope) { return _this.getScopedValueFromInspection(inspection, scope) !== undefined; };
        if (intendedValue === undefined) {
            return allScopes.filter(isScopeDefined);
        }
        return [(_a = allScopes.find(isScopeDefined)) !== null && _a !== void 0 ? _a : preference_scope_1.PreferenceScope.User];
    };
    PreferenceServiceImpl.prototype.overridePreferenceName = function (options) {
        return this.preferenceOverrideService.overridePreferenceName(options);
    };
    PreferenceServiceImpl.prototype.overriddenPreferenceName = function (preferenceName) {
        return this.preferenceOverrideService.overriddenPreferenceName(preferenceName);
    };
    PreferenceServiceImpl.prototype.doHas = function (preferenceName, resourceUri) {
        return this.doGet(preferenceName, undefined, resourceUri) !== undefined;
    };
    PreferenceServiceImpl.prototype.doInspectInScope = function (preferenceName, scope, resourceUri) {
        var provider = this.getProvider(scope);
        return provider && provider.get(preferenceName, resourceUri);
    };
    PreferenceServiceImpl.prototype.doGet = function (preferenceName, defaultValue, resourceUri) {
        return this.doResolve(preferenceName, defaultValue, resourceUri).value;
    };
    PreferenceServiceImpl.prototype.doResolve = function (preferenceName, defaultValue, resourceUri) {
        var e_6, _a;
        var result = {};
        try {
            for (var _b = __values(preference_scope_1.PreferenceScope.getScopes()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var scope = _c.value;
                if (this.schema.isValidInScope(preferenceName, scope)) {
                    var provider = this.getProvider(scope);
                    if (provider) {
                        var _d = provider.resolve(preferenceName, resourceUri), configUri = _d.configUri, value = _d.value;
                        if (value !== undefined) {
                            result.configUri = configUri;
                            result.value = preference_provider_1.PreferenceProvider.merge(result.value, value);
                        }
                    }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return {
            configUri: result.configUri,
            value: result.value !== undefined ? common_1.deepFreeze(result.value) : defaultValue
        };
    };
    PreferenceServiceImpl.prototype.getConfigUri = function (scope, resourceUri, sectionName) {
        if (sectionName === void 0) { sectionName = this.configurations.getConfigName(); }
        var provider = this.getProvider(scope);
        if (!provider || !this.configurations.isAnyConfig(sectionName)) {
            return undefined;
        }
        var configUri = provider.getConfigUri(resourceUri, sectionName);
        if (configUri) {
            return configUri;
        }
        return provider.getContainingConfigUri && provider.getContainingConfigUri(resourceUri, sectionName);
    };
    __decorate([
        inversify_1.inject(preference_contribution_1.PreferenceSchemaProvider),
        __metadata("design:type", preference_contribution_1.PreferenceSchemaProvider)
    ], PreferenceServiceImpl.prototype, "schema", void 0);
    __decorate([
        inversify_1.inject(exports.PreferenceProviderProvider),
        __metadata("design:type", Function)
    ], PreferenceServiceImpl.prototype, "providerProvider", void 0);
    __decorate([
        inversify_1.inject(preference_configurations_1.PreferenceConfigurations),
        __metadata("design:type", preference_configurations_1.PreferenceConfigurations)
    ], PreferenceServiceImpl.prototype, "configurations", void 0);
    __decorate([
        inversify_1.inject(preference_language_override_service_1.PreferenceLanguageOverrideService),
        __metadata("design:type", preference_language_override_service_1.PreferenceLanguageOverrideService)
    ], PreferenceServiceImpl.prototype, "preferenceOverrideService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PreferenceServiceImpl.prototype, "init", null);
    PreferenceServiceImpl = __decorate([
        inversify_1.injectable()
    ], PreferenceServiceImpl);
    return PreferenceServiceImpl;
}());
exports.PreferenceServiceImpl = PreferenceServiceImpl;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/supported-encodings.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/supported-encodings.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 Xuye Cai and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SUPPORTED_ENCODINGS = void 0;
// copied from vscode: https://github.com/microsoft/vscode/blob/master/src/vs/workbench/services/textfile/common/textfiles.ts
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
exports.SUPPORTED_ENCODINGS = {
    utf8: {
        labelLong: 'UTF-8',
        labelShort: 'UTF-8',
        order: 1,
        alias: 'utf8bom'
    },
    utf8bom: {
        labelLong: 'UTF-8 with BOM',
        labelShort: 'UTF-8 with BOM',
        encodeOnly: true,
        order: 2,
        alias: 'utf8'
    },
    utf16le: {
        labelLong: 'UTF-16 LE',
        labelShort: 'UTF-16 LE',
        order: 3
    },
    utf16be: {
        labelLong: 'UTF-16 BE',
        labelShort: 'UTF-16 BE',
        order: 4
    },
    windows1252: {
        labelLong: 'Western (Windows 1252)',
        labelShort: 'Windows 1252',
        order: 5
    },
    iso88591: {
        labelLong: 'Western (ISO 8859-1)',
        labelShort: 'ISO 8859-1',
        order: 6
    },
    iso88593: {
        labelLong: 'Western (ISO 8859-3)',
        labelShort: 'ISO 8859-3',
        order: 7
    },
    iso885915: {
        labelLong: 'Western (ISO 8859-15)',
        labelShort: 'ISO 8859-15',
        order: 8
    },
    macroman: {
        labelLong: 'Western (Mac Roman)',
        labelShort: 'Mac Roman',
        order: 9
    },
    cp437: {
        labelLong: 'DOS (CP 437)',
        labelShort: 'CP437',
        order: 10
    },
    windows1256: {
        labelLong: 'Arabic (Windows 1256)',
        labelShort: 'Windows 1256',
        order: 11
    },
    iso88596: {
        labelLong: 'Arabic (ISO 8859-6)',
        labelShort: 'ISO 8859-6',
        order: 12
    },
    windows1257: {
        labelLong: 'Baltic (Windows 1257)',
        labelShort: 'Windows 1257',
        order: 13
    },
    iso88594: {
        labelLong: 'Baltic (ISO 8859-4)',
        labelShort: 'ISO 8859-4',
        order: 14
    },
    iso885914: {
        labelLong: 'Celtic (ISO 8859-14)',
        labelShort: 'ISO 8859-14',
        order: 15
    },
    windows1250: {
        labelLong: 'Central European (Windows 1250)',
        labelShort: 'Windows 1250',
        order: 16
    },
    iso88592: {
        labelLong: 'Central European (ISO 8859-2)',
        labelShort: 'ISO 8859-2',
        order: 17
    },
    cp852: {
        labelLong: 'Central European (CP 852)',
        labelShort: 'CP 852',
        order: 18
    },
    windows1251: {
        labelLong: 'Cyrillic (Windows 1251)',
        labelShort: 'Windows 1251',
        order: 19
    },
    cp866: {
        labelLong: 'Cyrillic (CP 866)',
        labelShort: 'CP 866',
        order: 20
    },
    iso88595: {
        labelLong: 'Cyrillic (ISO 8859-5)',
        labelShort: 'ISO 8859-5',
        order: 21
    },
    koi8r: {
        labelLong: 'Cyrillic (KOI8-R)',
        labelShort: 'KOI8-R',
        order: 22
    },
    koi8u: {
        labelLong: 'Cyrillic (KOI8-U)',
        labelShort: 'KOI8-U',
        order: 23
    },
    iso885913: {
        labelLong: 'Estonian (ISO 8859-13)',
        labelShort: 'ISO 8859-13',
        order: 24
    },
    windows1253: {
        labelLong: 'Greek (Windows 1253)',
        labelShort: 'Windows 1253',
        order: 25
    },
    iso88597: {
        labelLong: 'Greek (ISO 8859-7)',
        labelShort: 'ISO 8859-7',
        order: 26
    },
    windows1255: {
        labelLong: 'Hebrew (Windows 1255)',
        labelShort: 'Windows 1255',
        order: 27
    },
    iso88598: {
        labelLong: 'Hebrew (ISO 8859-8)',
        labelShort: 'ISO 8859-8',
        order: 28
    },
    iso885910: {
        labelLong: 'Nordic (ISO 8859-10)',
        labelShort: 'ISO 8859-10',
        order: 29
    },
    iso885916: {
        labelLong: 'Romanian (ISO 8859-16)',
        labelShort: 'ISO 8859-16',
        order: 30
    },
    windows1254: {
        labelLong: 'Turkish (Windows 1254)',
        labelShort: 'Windows 1254',
        order: 31
    },
    iso88599: {
        labelLong: 'Turkish (ISO 8859-9)',
        labelShort: 'ISO 8859-9',
        order: 32
    },
    windows1258: {
        labelLong: 'Vietnamese (Windows 1258)',
        labelShort: 'Windows 1258',
        order: 33
    },
    gbk: {
        labelLong: 'Simplified Chinese (GBK)',
        labelShort: 'GBK',
        order: 34
    },
    gb18030: {
        labelLong: 'Simplified Chinese (GB18030)',
        labelShort: 'GB18030',
        order: 35
    },
    cp950: {
        labelLong: 'Traditional Chinese (Big5)',
        labelShort: 'Big5',
        order: 36
    },
    big5hkscs: {
        labelLong: 'Traditional Chinese (Big5-HKSCS)',
        labelShort: 'Big5-HKSCS',
        order: 37
    },
    shiftjis: {
        labelLong: 'Japanese (Shift JIS)',
        labelShort: 'Shift JIS',
        order: 38
    },
    eucjp: {
        labelLong: 'Japanese (EUC-JP)',
        labelShort: 'EUC-JP',
        order: 39
    },
    euckr: {
        labelLong: 'Korean (EUC-KR)',
        labelShort: 'EUC-KR',
        order: 40
    },
    windows874: {
        labelLong: 'Thai (Windows 874)',
        labelShort: 'Windows 874',
        order: 41
    },
    iso885911: {
        labelLong: 'Latin/Thai (ISO 8859-11)',
        labelShort: 'ISO 8859-11',
        order: 42
    },
    koi8ru: {
        labelLong: 'Cyrillic (KOI8-RU)',
        labelShort: 'KOI8-RU',
        order: 43
    },
    koi8t: {
        labelLong: 'Tajik (KOI8-T)',
        labelShort: 'KOI8-T',
        order: 44
    },
    gb2312: {
        labelLong: 'Simplified Chinese (GB 2312)',
        labelShort: 'GB 2312',
        order: 45
    },
    cp865: {
        labelLong: 'Nordic DOS (CP 865)',
        labelShort: 'CP 865',
        order: 46
    },
    cp850: {
        labelLong: 'Western European DOS (CP 850)',
        labelShort: 'CP 850',
        order: 47
    }
};


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/window/window-service.js":
/*!************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/window/window-service.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WindowService = void 0;
/**
 * Service for opening new browser windows.
 */
exports.WindowService = Symbol('WindowService');


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/buffer.js":
/*!********************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/buffer.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "../node_modules/buffer/index.js")["Buffer"];

/********************************************************************************
 * Copyright (C) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/buffer.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryBufferWriteableStream = exports.BinaryBufferReadableBufferedStream = exports.BinaryBufferReadableStream = exports.BinaryBufferReadable = exports.BinaryBuffer = void 0;
/* eslint-disable no-null/no-null */
var safer_buffer_1 = __webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js");
var iconv = __webpack_require__(/*! iconv-lite */ "../node_modules/iconv-lite/lib/index.js");
var streams = __webpack_require__(/*! ./stream */ "../node_modules/@theia/core/lib/common/stream.js");
var hasBuffer = (typeof Buffer !== 'undefined');
var hasTextEncoder = (typeof TextEncoder !== 'undefined');
var hasTextDecoder = (typeof TextDecoder !== 'undefined');
var textEncoder;
var textDecoder;
var BinaryBuffer = /** @class */ (function () {
    function BinaryBuffer(buffer) {
        this.buffer = buffer;
        this.byteLength = this.buffer.byteLength;
    }
    BinaryBuffer.alloc = function (byteLength) {
        if (hasBuffer) {
            return new BinaryBuffer(Buffer.allocUnsafe(byteLength));
        }
        else {
            return new BinaryBuffer(new Uint8Array(byteLength));
        }
    };
    BinaryBuffer.wrap = function (actual) {
        if (hasBuffer && !(Buffer.isBuffer(actual))) {
            // https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length
            // Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array
            actual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);
        }
        return new BinaryBuffer(actual);
    };
    BinaryBuffer.fromString = function (source) {
        if (hasBuffer) {
            return new BinaryBuffer(Buffer.from(source));
        }
        else if (hasTextEncoder) {
            if (!textEncoder) {
                textEncoder = new TextEncoder();
            }
            return new BinaryBuffer(textEncoder.encode(source));
        }
        else {
            return new BinaryBuffer(iconv.encode(source, 'utf8'));
        }
    };
    BinaryBuffer.concat = function (buffers, totalLength) {
        if (typeof totalLength === 'undefined') {
            totalLength = 0;
            for (var i = 0, len = buffers.length; i < len; i++) {
                totalLength += buffers[i].byteLength;
            }
        }
        var ret = BinaryBuffer.alloc(totalLength);
        var offset = 0;
        for (var i = 0, len = buffers.length; i < len; i++) {
            var element = buffers[i];
            ret.set(element, offset);
            offset += element.byteLength;
        }
        return ret;
    };
    BinaryBuffer.prototype.toString = function () {
        if (hasBuffer) {
            return this.buffer.toString();
        }
        else if (hasTextDecoder) {
            if (!textDecoder) {
                textDecoder = new TextDecoder();
            }
            return textDecoder.decode(this.buffer);
        }
        else {
            return iconv.decode(safer_buffer_1.Buffer.from(this.buffer), 'utf8');
        }
    };
    BinaryBuffer.prototype.slice = function (start, end) {
        // IMPORTANT: use subarray instead of slice because TypedArray#slice
        // creates shallow copy and NodeBuffer#slice doesn't. The use of subarray
        // ensures the same, performant, behaviour.
        return new BinaryBuffer(this.buffer.subarray(start, end));
    };
    BinaryBuffer.prototype.set = function (array, offset) {
        if (array instanceof BinaryBuffer) {
            this.buffer.set(array.buffer, offset);
        }
        else {
            this.buffer.set(array, offset);
        }
    };
    BinaryBuffer.prototype.readUInt32BE = function (offset) {
        return (this.buffer[offset] * Math.pow(2, 24)
            + this.buffer[offset + 1] * Math.pow(2, 16)
            + this.buffer[offset + 2] * Math.pow(2, 8)
            + this.buffer[offset + 3]);
    };
    BinaryBuffer.prototype.writeUInt32BE = function (value, offset) {
        this.buffer[offset + 3] = value;
        value = value >>> 8;
        this.buffer[offset + 2] = value;
        value = value >>> 8;
        this.buffer[offset + 1] = value;
        value = value >>> 8;
        this.buffer[offset] = value;
    };
    BinaryBuffer.prototype.readUInt32LE = function (offset) {
        return (((this.buffer[offset + 0] << 0) >>> 0) |
            ((this.buffer[offset + 1] << 8) >>> 0) |
            ((this.buffer[offset + 2] << 16) >>> 0) |
            ((this.buffer[offset + 3] << 24) >>> 0));
    };
    BinaryBuffer.prototype.writeUInt32LE = function (value, offset) {
        this.buffer[offset + 0] = (value & 255);
        value = value >>> 8;
        this.buffer[offset + 1] = (value & 255);
        value = value >>> 8;
        this.buffer[offset + 2] = (value & 255);
        value = value >>> 8;
        this.buffer[offset + 3] = (value & 255);
    };
    BinaryBuffer.prototype.readUInt8 = function (offset) {
        return this.buffer[offset];
    };
    BinaryBuffer.prototype.writeUInt8 = function (value, offset) {
        this.buffer[offset] = value;
    };
    return BinaryBuffer;
}());
exports.BinaryBuffer = BinaryBuffer;
var BinaryBufferReadable;
(function (BinaryBufferReadable) {
    function toBuffer(readable) {
        return streams.consumeReadable(readable, function (chunks) { return BinaryBuffer.concat(chunks); });
    }
    BinaryBufferReadable.toBuffer = toBuffer;
    function fromBuffer(buffer) {
        return streams.toReadable(buffer);
    }
    BinaryBufferReadable.fromBuffer = fromBuffer;
    function fromReadable(readable) {
        return {
            read: function () {
                var value = readable.read();
                if (typeof value === 'string') {
                    return BinaryBuffer.fromString(value);
                }
                return null;
            }
        };
    }
    BinaryBufferReadable.fromReadable = fromReadable;
})(BinaryBufferReadable = exports.BinaryBufferReadable || (exports.BinaryBufferReadable = {}));
var BinaryBufferReadableStream;
(function (BinaryBufferReadableStream) {
    function toBuffer(stream) {
        return streams.consumeStream(stream, function (chunks) { return BinaryBuffer.concat(chunks); });
    }
    BinaryBufferReadableStream.toBuffer = toBuffer;
    function fromBuffer(buffer) {
        return streams.toStream(buffer, function (chunks) { return BinaryBuffer.concat(chunks); });
    }
    BinaryBufferReadableStream.fromBuffer = fromBuffer;
})(BinaryBufferReadableStream = exports.BinaryBufferReadableStream || (exports.BinaryBufferReadableStream = {}));
var BinaryBufferReadableBufferedStream;
(function (BinaryBufferReadableBufferedStream) {
    function toBuffer(bufferedStream) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (bufferedStream.ended) {
                            return [2 /*return*/, BinaryBuffer.concat(bufferedStream.buffer)];
                        }
                        _b = (_a = BinaryBuffer).concat;
                        _c = [bufferedStream.buffer];
                        // ...and all additional chunks
                        return [4 /*yield*/, BinaryBufferReadableStream.toBuffer(bufferedStream.stream)];
                    case 1: return [2 /*return*/, _b.apply(_a, [__spread.apply(void 0, _c.concat([[
                                    // ...and all additional chunks
                                    _d.sent()
                                ]]))])];
                }
            });
        });
    }
    BinaryBufferReadableBufferedStream.toBuffer = toBuffer;
})(BinaryBufferReadableBufferedStream = exports.BinaryBufferReadableBufferedStream || (exports.BinaryBufferReadableBufferedStream = {}));
var BinaryBufferWriteableStream;
(function (BinaryBufferWriteableStream) {
    function create(options) {
        return streams.newWriteableStream(function (chunks) { return BinaryBuffer.concat(chunks); }, options);
    }
    BinaryBufferWriteableStream.create = create;
})(BinaryBufferWriteableStream = exports.BinaryBufferWriteableStream || (exports.BinaryBufferWriteableStream = {}));


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/encoding-service.js":
/*!******************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/encoding-service.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/common/encoding.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingService = void 0;
/* eslint-disable no-null/no-null */
var iconv = __webpack_require__(/*! iconv-lite */ "../node_modules/iconv-lite/lib/index.js");
var safer_buffer_1 = __webpack_require__(/*! safer-buffer */ "../node_modules/safer-buffer/safer.js");
var inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
var buffer_1 = __webpack_require__(/*! ./buffer */ "../node_modules/@theia/core/lib/common/buffer.js");
var encodings_1 = __webpack_require__(/*! ./encodings */ "../node_modules/@theia/core/lib/common/encodings.js");
var stream_1 = __webpack_require__(/*! ./stream */ "../node_modules/@theia/core/lib/common/stream.js");
var ZERO_BYTE_DETECTION_BUFFER_MAX_LEN = 512; // number of bytes to look at to decide about a file being binary or not
var NO_ENCODING_GUESS_MIN_BYTES = 512; // when not auto guessing the encoding, small number of bytes are enough
var AUTO_ENCODING_GUESS_MIN_BYTES = 512 * 8; // with auto guessing we want a lot more content to be read for guessing
var AUTO_ENCODING_GUESS_MAX_BYTES = 512 * 128; // set an upper limit for the number of bytes we pass on to jschardet
// we explicitly ignore a specific set of encodings from auto guessing
// - ASCII: we never want this encoding (most UTF-8 files would happily detect as
//          ASCII files and then you could not type non-ASCII characters anymore)
// - UTF-16: we have our own detection logic for UTF-16
// - UTF-32: we do not support this encoding in VSCode
var IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];
var EncodingService = /** @class */ (function () {
    function EncodingService() {
    }
    EncodingService.prototype.encode = function (value, options) {
        var encoding = options === null || options === void 0 ? void 0 : options.encoding;
        var addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
        encoding = this.toIconvEncoding(encoding);
        if (encoding === encodings_1.UTF8 && !addBOM) {
            return buffer_1.BinaryBuffer.fromString(value);
        }
        var buffer = iconv.encode(value, encoding, { addBOM: addBOM });
        return buffer_1.BinaryBuffer.wrap(buffer);
    };
    EncodingService.prototype.decode = function (value, encoding) {
        var buffer = safer_buffer_1.Buffer.from(value.buffer);
        encoding = this.toIconvEncoding(encoding);
        return iconv.decode(buffer, encoding);
    };
    EncodingService.prototype.exists = function (encoding) {
        encoding = this.toIconvEncoding(encoding);
        return iconv.encodingExists(encoding);
    };
    EncodingService.prototype.toIconvEncoding = function (encoding) {
        if (encoding === encodings_1.UTF8_with_bom || !encoding) {
            return encodings_1.UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it
        }
        return encoding;
    };
    EncodingService.prototype.toResourceEncoding = function (encoding, options) {
        return __awaiter(this, void 0, void 0, function () {
            var overwriteEncoding, buffer, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Some encodings come with a BOM automatically
                        if (encoding === encodings_1.UTF16be || encoding === encodings_1.UTF16le || encoding === encodings_1.UTF8_with_bom) {
                            return [2 /*return*/, { encoding: encoding, hasBOM: true }];
                        }
                        overwriteEncoding = options === null || options === void 0 ? void 0 : options.overwriteEncoding;
                        if (!(!overwriteEncoding && encoding === encodings_1.UTF8)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, options.read(encodings_1.UTF8_BOM.length)];
                    case 2:
                        buffer = _a.sent();
                        if (this.detectEncodingByBOMFromBuffer(safer_buffer_1.Buffer.from(buffer), buffer.byteLength) === encodings_1.UTF8_with_bom) {
                            return [2 /*return*/, { encoding: encoding, hasBOM: true }];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, { encoding: encoding, hasBOM: false }];
                }
            });
        });
    };
    EncodingService.prototype.detectEncoding = function (data, autoGuessEncoding) {
        return __awaiter(this, void 0, void 0, function () {
            var buffer, bytesRead, encoding, seemsBinary, couldBeUTF16LE, couldBeUTF16BE, containsZeroByte, i, isEndian, isZeroByte, guessedEncoding;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buffer = safer_buffer_1.Buffer.from(data.buffer);
                        bytesRead = data.byteLength;
                        encoding = this.detectEncodingByBOMFromBuffer(buffer, bytesRead);
                        seemsBinary = false;
                        if (encoding !== encodings_1.UTF16be && encoding !== encodings_1.UTF16le && buffer) {
                            couldBeUTF16LE = true;
                            couldBeUTF16BE = true;
                            containsZeroByte = false;
                            // This is a simplified guess to detect UTF-16 BE or LE by just checking if
                            // the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE
                            // this would be the odd byte index and for UTF-16 BE the even one.
                            // Note: this can produce false positives (a binary file that uses a 2-byte
                            // encoding of the same format as UTF-16) and false negatives (a UTF-16 file
                            // that is using 4 bytes to encode a character).
                            for (i = 0; i < bytesRead && i < ZERO_BYTE_DETECTION_BUFFER_MAX_LEN; i++) {
                                isEndian = (i % 2 === 1);
                                isZeroByte = (buffer.readUInt8(i) === 0);
                                if (isZeroByte) {
                                    containsZeroByte = true;
                                }
                                // UTF-16 LE: expect e.g. 0xAA 0x00
                                if (couldBeUTF16LE && (isEndian && !isZeroByte || !isEndian && isZeroByte)) {
                                    couldBeUTF16LE = false;
                                }
                                // UTF-16 BE: expect e.g. 0x00 0xAA
                                if (couldBeUTF16BE && (isEndian && isZeroByte || !isEndian && !isZeroByte)) {
                                    couldBeUTF16BE = false;
                                }
                                // Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary
                                if (isZeroByte && !couldBeUTF16LE && !couldBeUTF16BE) {
                                    break;
                                }
                            }
                            // Handle case of 0-byte included
                            if (containsZeroByte) {
                                if (couldBeUTF16LE) {
                                    encoding = encodings_1.UTF16le;
                                }
                                else if (couldBeUTF16BE) {
                                    encoding = encodings_1.UTF16be;
                                }
                                else {
                                    seemsBinary = true;
                                }
                            }
                        }
                        if (!(autoGuessEncoding && !seemsBinary && !encoding && buffer)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.guessEncodingByBuffer(buffer.slice(0, bytesRead))];
                    case 1:
                        guessedEncoding = _a.sent();
                        return [2 /*return*/, {
                                seemsBinary: false,
                                encoding: guessedEncoding
                            }];
                    case 2: return [2 /*return*/, { seemsBinary: seemsBinary, encoding: encoding }];
                }
            });
        });
    };
    EncodingService.prototype.detectEncodingByBOMFromBuffer = function (buffer, bytesRead) {
        if (!buffer || bytesRead < encodings_1.UTF16be_BOM.length) {
            return undefined;
        }
        var b0 = buffer.readUInt8(0);
        var b1 = buffer.readUInt8(1);
        // UTF-16 BE
        if (b0 === encodings_1.UTF16be_BOM[0] && b1 === encodings_1.UTF16be_BOM[1]) {
            return encodings_1.UTF16be;
        }
        // UTF-16 LE
        if (b0 === encodings_1.UTF16le_BOM[0] && b1 === encodings_1.UTF16le_BOM[1]) {
            return encodings_1.UTF16le;
        }
        if (bytesRead < encodings_1.UTF8_BOM.length) {
            return undefined;
        }
        var b2 = buffer.readUInt8(2);
        // UTF-8
        if (b0 === encodings_1.UTF8_BOM[0] && b1 === encodings_1.UTF8_BOM[1] && b2 === encodings_1.UTF8_BOM[2]) {
            return encodings_1.UTF8_with_bom;
        }
        return undefined;
    };
    EncodingService.prototype.guessEncodingByBuffer = function (buffer) {
        return __awaiter(this, void 0, void 0, function () {
            var jschardet, guessed, enc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __webpack_require__(/*! jschardet */ "../node_modules/jschardet/index.js"); })];
                    case 1:
                        jschardet = _a.sent();
                        guessed = jschardet.detect(buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES));
                        if (!guessed || !guessed.encoding) {
                            return [2 /*return*/, undefined];
                        }
                        enc = guessed.encoding.toLowerCase();
                        if (0 <= IGNORE_ENCODINGS.indexOf(enc)) {
                            return [2 /*return*/, undefined]; // see comment above why we ignore some encodings
                        }
                        return [2 /*return*/, this.toIconvEncoding(guessed.encoding)];
                }
            });
        });
    };
    EncodingService.prototype.decodeStream = function (source, options) {
        var _this = this;
        var _a;
        var minBytesRequiredForDetection = ((_a = options.minBytesRequiredForDetection) !== null && _a !== void 0 ? _a : options.guessEncoding) ? AUTO_ENCODING_GUESS_MIN_BYTES : NO_ENCODING_GUESS_MIN_BYTES;
        return new Promise(function (resolve, reject) {
            var target = stream_1.newWriteableStream(function (strings) { return strings.join(''); });
            var bufferedChunks = [];
            var bytesBuffered = 0;
            var decoder = undefined;
            var createDecoder = function () { return __awaiter(_this, void 0, void 0, function () {
                var detected, _a, decoded, error_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.detectEncoding(buffer_1.BinaryBuffer.concat(bufferedChunks), options.guessEncoding)];
                        case 1:
                            detected = _b.sent();
                            // ensure to respect overwrite of encoding
                            _a = detected;
                            return [4 /*yield*/, options.overwriteEncoding(detected.encoding)];
                        case 2:
                            // ensure to respect overwrite of encoding
                            _a.encoding = _b.sent();
                            // decode and write buffered content
                            decoder = iconv.getDecoder(this.toIconvEncoding(detected.encoding));
                            decoded = decoder.write(safer_buffer_1.Buffer.from(buffer_1.BinaryBuffer.concat(bufferedChunks).buffer));
                            target.write(decoded);
                            bufferedChunks.length = 0;
                            bytesBuffered = 0;
                            // signal to the outside our detected encoding and final decoder stream
                            resolve({
                                stream: target,
                                detected: detected
                            });
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _b.sent();
                            reject(error_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); };
            // Stream error: forward to target
            source.on('error', function (error) { return target.error(error); });
            // Stream data
            source.on('data', function (chunk) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!decoder) return [3 /*break*/, 1];
                            target.write(decoder.write(safer_buffer_1.Buffer.from(chunk.buffer)));
                            return [3 /*break*/, 3];
                        case 1:
                            bufferedChunks.push(chunk);
                            bytesBuffered += chunk.byteLength;
                            if (!(bytesBuffered >= minBytesRequiredForDetection)) return [3 /*break*/, 3];
                            // pause stream here until the decoder is ready
                            source.pause();
                            return [4 /*yield*/, createDecoder()];
                        case 2:
                            _a.sent();
                            // resume stream now that decoder is ready but
                            // outside of this stack to reduce recursion
                            setTimeout(function () { return source.resume(); });
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            // Stream end
            source.on('end', function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!decoder) return [3 /*break*/, 2];
                            return [4 /*yield*/, createDecoder()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            // end the target with the remainders of the decoder
                            target.end(decoder === null || decoder === void 0 ? void 0 : decoder.end());
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    EncodingService.prototype.encodeStream = function (value, options) {
        return __awaiter(this, void 0, void 0, function () {
            var encoding, addBOM, readable, encoder, bytesWritten, done;
            return __generator(this, function (_a) {
                encoding = options === null || options === void 0 ? void 0 : options.encoding;
                addBOM = options === null || options === void 0 ? void 0 : options.hasBOM;
                encoding = this.toIconvEncoding(encoding);
                if (encoding === encodings_1.UTF8 && !addBOM) {
                    return [2 /*return*/, value === undefined ? undefined : typeof value === 'string' ?
                            buffer_1.BinaryBuffer.fromString(value) : buffer_1.BinaryBufferReadable.fromReadable(value)];
                }
                value = value || '';
                readable = typeof value === 'string' ? stream_1.Readable.fromString(value) : value;
                encoder = iconv.getEncoder(encoding, { addBOM: addBOM });
                bytesWritten = false;
                done = false;
                return [2 /*return*/, {
                        read: function () {
                            if (done) {
                                return null;
                            }
                            var chunk = readable.read();
                            if (typeof chunk !== 'string') {
                                done = true;
                                // If we are instructed to add a BOM but we detect that no
                                // bytes have been written, we must ensure to return the BOM
                                // ourselves so that we comply with the contract.
                                if (!bytesWritten && addBOM) {
                                    switch (encoding) {
                                        case encodings_1.UTF8:
                                        case encodings_1.UTF8_with_bom:
                                            return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF8_BOM));
                                        case encodings_1.UTF16be:
                                            return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16be_BOM));
                                        case encodings_1.UTF16le:
                                            return buffer_1.BinaryBuffer.wrap(Uint8Array.from(encodings_1.UTF16le_BOM));
                                    }
                                }
                                var leftovers = encoder.end();
                                if (leftovers && leftovers.length > 0) {
                                    bytesWritten = true;
                                    return buffer_1.BinaryBuffer.wrap(leftovers);
                                }
                                return null;
                            }
                            bytesWritten = true;
                            return buffer_1.BinaryBuffer.wrap(encoder.write(chunk));
                        }
                    }];
            });
        });
    };
    EncodingService = __decorate([
        inversify_1.injectable()
    ], EncodingService);
    return EncodingService;
}());
exports.EncodingService = EncodingService;


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/encodings.js":
/*!***********************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/encodings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UTF8_BOM = exports.UTF16le_BOM = exports.UTF16be_BOM = exports.UTF16le = exports.UTF16be = exports.UTF8_with_bom = exports.UTF8 = void 0;
exports.UTF8 = 'utf8';
exports.UTF8_with_bom = 'utf8bom';
exports.UTF16be = 'utf16be';
exports.UTF16le = 'utf16le';
exports.UTF16be_BOM = [0xFE, 0xFF];
exports.UTF16le_BOM = [0xFF, 0xFE];
exports.UTF8_BOM = [0xEF, 0xBB, 0xBF];


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvVariablesServer = exports.envVariablesPath = void 0;
exports.envVariablesPath = '/services/envs';
exports.EnvVariablesServer = Symbol('EnvVariablesServer');


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/env-variables/index.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/env-variables/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./env-variables-protocol */ "../node_modules/@theia/core/lib/common/env-variables/env-variables-protocol.js"), exports);


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/preferences/preference-schema.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/preferences/preference-schema.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceDataProperty = exports.PreferenceSchemaProperties = exports.PreferenceSchema = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var preference_scope_1 = __webpack_require__(/*! ./preference-scope */ "../node_modules/@theia/core/lib/common/preferences/preference-scope.js");
var PreferenceSchema;
(function (PreferenceSchema) {
    function is(obj) {
        return !!obj && ('properties' in obj) && PreferenceSchemaProperties.is(obj['properties']);
    }
    PreferenceSchema.is = is;
    function getDefaultScope(schema) {
        var defaultScope = preference_scope_1.PreferenceScope.Workspace;
        if (!preference_scope_1.PreferenceScope.is(schema.scope)) {
            defaultScope = preference_scope_1.PreferenceScope.fromString(schema.scope) || preference_scope_1.PreferenceScope.Workspace;
        }
        else {
            defaultScope = schema.scope;
        }
        return defaultScope;
    }
    PreferenceSchema.getDefaultScope = getDefaultScope;
})(PreferenceSchema = exports.PreferenceSchema || (exports.PreferenceSchema = {}));
var PreferenceSchemaProperties;
(function (PreferenceSchemaProperties) {
    function is(obj) {
        return !!obj && typeof obj === 'object';
    }
    PreferenceSchemaProperties.is = is;
})(PreferenceSchemaProperties = exports.PreferenceSchemaProperties || (exports.PreferenceSchemaProperties = {}));
var PreferenceDataProperty;
(function (PreferenceDataProperty) {
    function fromPreferenceSchemaProperty(schemaProps, defaultScope) {
        if (defaultScope === void 0) { defaultScope = preference_scope_1.PreferenceScope.Workspace; }
        if (!schemaProps.scope) {
            schemaProps.scope = defaultScope;
        }
        else if (typeof schemaProps.scope === 'string') {
            return Object.assign(schemaProps, { scope: preference_scope_1.PreferenceScope.fromString(schemaProps.scope) || defaultScope });
        }
        return schemaProps;
    }
    PreferenceDataProperty.fromPreferenceSchemaProperty = fromPreferenceSchemaProperty;
})(PreferenceDataProperty = exports.PreferenceDataProperty || (exports.PreferenceDataProperty = {}));


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/preferences/preference-scope.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/preferences/preference-scope.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PreferenceScope = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 2] = "Workspace";
    PreferenceScope[PreferenceScope["Folder"] = 3] = "Folder";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
(function (PreferenceScope) {
    function is(scope) {
        return typeof scope === 'number' && getScopes().findIndex(function (s) { return s === scope; }) >= 0;
    }
    PreferenceScope.is = is;
    /**
     * @returns preference scopes from broadest to narrowest: Default -> Folder.
     */
    function getScopes() {
        return Object.keys(PreferenceScope)
            .filter(function (k) { return typeof PreferenceScope[k] === 'string'; })
            .map(function (v) { return Number(v); });
    }
    PreferenceScope.getScopes = getScopes;
    /**
     * @returns preference scopes from narrowest to broadest. Folder -> Default.
     */
    function getReversedScopes() {
        return getScopes().reverse();
    }
    PreferenceScope.getReversedScopes = getReversedScopes;
    function getScopeNames(scope) {
        var e_1, _a;
        var names = [];
        var allNames = Object.keys(PreferenceScope)
            .filter(function (k) { return typeof PreferenceScope[k] === 'number'; });
        if (scope) {
            try {
                for (var allNames_1 = __values(allNames), allNames_1_1 = allNames_1.next(); !allNames_1_1.done; allNames_1_1 = allNames_1.next()) {
                    var name_1 = allNames_1_1.value;
                    if (PreferenceScope[name_1] <= scope) {
                        names.push(name_1);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (allNames_1_1 && !allNames_1_1.done && (_a = allNames_1.return)) _a.call(allNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return names;
    }
    PreferenceScope.getScopeNames = getScopeNames;
    function fromString(strScope) {
        switch (strScope) {
            case 'application':
                return PreferenceScope.User;
            case 'window':
                return PreferenceScope.Folder;
            case 'resource':
                return PreferenceScope.Folder;
            case 'language-overridable':
                return PreferenceScope.Folder;
        }
    }
    PreferenceScope.fromString = fromString;
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));


/***/ }),

/***/ "../node_modules/@theia/core/lib/common/promise-util.js":
/*!**************************************************************!*\
  !*** ../node_modules/@theia/core/lib/common/promise-util.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.retry = exports.timeout = exports.Deferred = void 0;
var cancellation_1 = __webpack_require__(/*! ./cancellation */ "../node_modules/@theia/core/lib/common/cancellation.js");
/**
 * Simple implementation of the deferred pattern.
 * An object that exposes a promise and functions to resolve and reject it.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    return Deferred;
}());
exports.Deferred = Deferred;
/**
 * @returns resolves after a specified number of milliseconds
 * @throws cancelled if a given token is cancelled before a specified number of milliseconds
 */
function timeout(ms, token) {
    if (token === void 0) { token = cancellation_1.CancellationToken.None; }
    var deferred = new Deferred();
    var handle = setTimeout(function () { return deferred.resolve(); }, ms);
    token.onCancellationRequested(function () {
        clearTimeout(handle);
        deferred.reject(cancellation_1.cancelled());
    });
    return deferred.promise;
}
exports.timeout = timeout;
function retry(task, delay, retries) {
    return __awaiter(this, void 0, void 0, function () {
        var lastError, i, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < retries)) return [3 /*break*/, 7];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 6]);
                    return [4 /*yield*/, task()];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    error_1 = _a.sent();
                    lastError = error_1;
                    return [4 /*yield*/, timeout(delay)];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 6:
                    i++;
                    return [3 /*break*/, 1];
                case 7: throw lastError;
            }
        });
    });
}
exports.retry = retry;


/***/ }),

/***/ "../node_modules/deepmerge/dist/cjs.js":
/*!*********************************************!*\
  !*** ../node_modules/deepmerge/dist/cjs.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, optionsArgument) {
	var cloneOptionWasSpecified = optionsArgument && typeof optionsArgument.clone === 'boolean';
	var clone = !cloneOptionWasSpecified || optionsArgument.clone === true;

	return (clone && isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, optionsArgument)
		: value
}

function defaultArrayMerge(target, source, optionsArgument) {
	var destination = target.slice();
	source.forEach(function(e, i) {
		if (typeof destination[i] === 'undefined') {
			destination[i] = cloneUnlessOtherwiseSpecified(e, optionsArgument);
		} else if (isMergeableObject(e)) {
			destination[i] = deepmerge(target[i], e, optionsArgument);
		} else if (target.indexOf(e) === -1) {
			destination.push(cloneUnlessOtherwiseSpecified(e, optionsArgument));
		}
	});
	return destination
}

function mergeObject(target, source, optionsArgument) {
	var destination = {};
	if (isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);
		} else {
			destination[key] = deepmerge(target[key], source[key], optionsArgument);
		}
	});
	return destination
}

function deepmerge(target, source, optionsArgument) {
	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, optionsArgument)
	} else if (sourceIsArray) {
		var arrayMerge = options.arrayMerge || defaultArrayMerge;
		return arrayMerge(target, source, optionsArgument)
	} else {
		return mergeObject(target, source, optionsArgument)
	}
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
	if (!Array.isArray(array) || array.length < 2) {
		throw new Error('first argument should be an array with at least two elements')
	}

	// we are sure there are at least 2 values, so it is safe to have no initial value
	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, optionsArgument)
	})
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_core_lib_browser_encoding-registry_js-node_modules_theia_core_lib_-a1370c.bundle.js.map