(self["webpackChunkbrowser_app"] = self["webpackChunkbrowser_app"] || []).push([["vendors-node_modules_theia_core_lib_browser_window_browser-window-module_js"],{

/***/ "../node_modules/@theia/core/lib/browser/browser-clipboard-service.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/browser-clipboard-service.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2019 RedHat and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserClipboardService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
const browser_1 = __webpack_require__(/*! ./browser */ "../node_modules/@theia/core/lib/browser/browser.js");
const logger_1 = __webpack_require__(/*! ../common/logger */ "../node_modules/@theia/core/lib/common/logger.js");
const message_service_1 = __webpack_require__(/*! ../common/message-service */ "../node_modules/@theia/core/lib/common/message-service.js");
let BrowserClipboardService = class BrowserClipboardService {
    async readText() {
        let permission;
        try {
            permission = await this.queryPermission('clipboard-read');
        }
        catch (e1) {
            this.logger.error('Failed checking a clipboard-read permission.', e1);
            // in FireFox, Clipboard API isn't gated with the permissions
            try {
                return await this.getClipboardAPI().readText();
            }
            catch (e2) {
                this.logger.error('Failed reading clipboard content.', e2);
                if (browser_1.isFirefox) {
                    this.messageService.warn(`Clipboard API is not available.
                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.
                    Note, it will allow FireFox getting full access to the system clipboard.`);
                }
                return '';
            }
        }
        if (permission.state === 'denied') {
            // most likely, the user intentionally denied the access
            this.messageService.warn("Access to the clipboard is denied. Check your browser's permission.");
            return '';
        }
        return this.getClipboardAPI().readText();
    }
    async writeText(value) {
        let permission;
        try {
            permission = await this.queryPermission('clipboard-write');
        }
        catch (e1) {
            this.logger.error('Failed checking a clipboard-write permission.', e1);
            // in FireFox, Clipboard API isn't gated with the permissions
            try {
                await this.getClipboardAPI().writeText(value);
                return;
            }
            catch (e2) {
                this.logger.error('Failed writing to the clipboard.', e2);
                if (browser_1.isFirefox) {
                    this.messageService.warn(`Clipboard API is not available.
                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.
                    Note, it will allow FireFox getting full access to the system clipboard.`);
                }
                return;
            }
        }
        if (permission.state === 'denied') {
            // most likely, the user intentionally denied the access
            this.messageService.warn("Access to the clipboard is denied. Check your browser's permission.");
            return;
        }
        return this.getClipboardAPI().writeText(value);
    }
    async queryPermission(name) {
        if ('permissions' in navigator) {
            return navigator['permissions'].query({ name: name });
        }
        throw new Error('Permissions API unavailable');
    }
    getClipboardAPI() {
        if ('clipboard' in navigator) {
            return navigator['clipboard'];
        }
        throw new Error('Async Clipboard API unavailable');
    }
};
__decorate([
    inversify_1.inject(message_service_1.MessageService),
    __metadata("design:type", message_service_1.MessageService)
], BrowserClipboardService.prototype, "messageService", void 0);
__decorate([
    inversify_1.inject(logger_1.ILogger),
    __metadata("design:type", Object)
], BrowserClipboardService.prototype, "logger", void 0);
BrowserClipboardService = __decorate([
    inversify_1.injectable()
], BrowserClipboardService);
exports.BrowserClipboardService = BrowserClipboardService;


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/window/browser-window-module.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/window/browser-window-module.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
const window_service_1 = __webpack_require__(/*! ../../browser/window/window-service */ "../node_modules/@theia/core/lib/browser/window/window-service.js");
const default_window_service_1 = __webpack_require__(/*! ../../browser/window/default-window-service */ "../node_modules/@theia/core/lib/browser/window/default-window-service.js");
const frontend_application_1 = __webpack_require__(/*! ../frontend-application */ "../node_modules/@theia/core/lib/browser/frontend-application.js");
const clipboard_service_1 = __webpack_require__(/*! ../clipboard-service */ "../node_modules/@theia/core/lib/browser/clipboard-service.js");
const browser_clipboard_service_1 = __webpack_require__(/*! ../browser-clipboard-service */ "../node_modules/@theia/core/lib/browser/browser-clipboard-service.js");
exports.default = new inversify_1.ContainerModule(bind => {
    bind(default_window_service_1.DefaultWindowService).toSelf().inSingletonScope();
    bind(window_service_1.WindowService).toService(default_window_service_1.DefaultWindowService);
    bind(frontend_application_1.FrontendApplicationContribution).toService(default_window_service_1.DefaultWindowService);
    bind(clipboard_service_1.ClipboardService).to(browser_clipboard_service_1.BrowserClipboardService).inSingletonScope();
});


/***/ }),

/***/ "../node_modules/@theia/core/lib/browser/window/default-window-service.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser/window/default-window-service.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultWindowService = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/inversify.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@theia/core/lib/common/index.js");
const core_preferences_1 = __webpack_require__(/*! ../core-preferences */ "../node_modules/@theia/core/lib/browser/core-preferences.js");
const contribution_provider_1 = __webpack_require__(/*! ../../common/contribution-provider */ "../node_modules/@theia/core/lib/common/contribution-provider.js");
const frontend_application_1 = __webpack_require__(/*! ../frontend-application */ "../node_modules/@theia/core/lib/browser/frontend-application.js");
const window_service_1 = __webpack_require__(/*! ./window-service */ "../node_modules/@theia/core/lib/browser/window/window-service.js");
let DefaultWindowService = class DefaultWindowService {
    constructor() {
        this.onUnloadEmitter = new common_1.Emitter();
    }
    get onUnload() {
        return this.onUnloadEmitter.event;
    }
    onStart(app) {
        this.frontendApplication = app;
        this.registerUnloadListeners();
    }
    openNewWindow(url) {
        window.open(url, undefined, 'noopener');
        return undefined;
    }
    openNewDefaultWindow() {
        this.openNewWindow(window_service_1.DEFAULT_WINDOW_HASH);
    }
    canUnload() {
        var _a;
        const confirmExit = this.corePreferences['application.confirmExit'];
        let preventUnload = confirmExit === 'always';
        for (const contribution of this.contributions.getContributions()) {
            if ((_a = contribution.onWillStop) === null || _a === void 0 ? void 0 : _a.call(contribution, this.frontendApplication)) {
                preventUnload = true;
            }
        }
        return confirmExit === 'never' || !preventUnload;
    }
    /**
     * Implement the mechanism to detect unloading of the page.
     */
    registerUnloadListeners() {
        window.addEventListener('beforeunload', event => {
            if (!this.canUnload()) {
                return this.preventUnload(event);
            }
        });
        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.
        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.
        // If the user stays, the page won't be unloaded, so `unload` is not fired.
        // If the user leaves, the page will be unloaded, so `unload` is fired.
        window.addEventListener('unload', () => this.onUnloadEmitter.fire());
    }
    /**
     * Notify the browser that we do not want to unload.
     *
     * Notes:
     *  - Shows a confirmation popup in browsers.
     *  - Prevents the window from closing without confirmation in electron.
     *
     * @param event The beforeunload event
     */
    preventUnload(event) {
        event.returnValue = '';
        event.preventDefault();
        return '';
    }
};
__decorate([
    inversify_1.inject(core_preferences_1.CorePreferences),
    __metadata("design:type", Object)
], DefaultWindowService.prototype, "corePreferences", void 0);
__decorate([
    inversify_1.inject(contribution_provider_1.ContributionProvider),
    inversify_1.named(frontend_application_1.FrontendApplicationContribution),
    __metadata("design:type", Object)
], DefaultWindowService.prototype, "contributions", void 0);
DefaultWindowService = __decorate([
    inversify_1.injectable()
], DefaultWindowService);
exports.DefaultWindowService = DefaultWindowService;


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_core_lib_browser_window_browser-window-module_js.bundle.js.map