{"version":3,"sources":["webpack://browser-app/../node_modules/@theia/core/src/browser/browser-clipboard-service.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/window/browser-window-module.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/window/default-window-service.ts"],"names":[],"mappings":"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","file":"vendors-node_modules_theia_core_lib_browser_window_browser-window-module_js.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { isFirefox } from './browser';\nimport { ClipboardService } from './clipboard-service';\nimport { ILogger } from '../common/logger';\nimport { MessageService } from '../common/message-service';\n\nexport interface NavigatorClipboard {\n    readText(): Promise<string>;\n    writeText(value: string): Promise<void>;\n}\nexport interface PermissionStatus {\n    state: 'granted' | 'prompt' | 'denied'\n}\nexport interface NavigatorPermissions {\n    query(options: { name: string }): Promise<PermissionStatus>\n}\n\n@injectable()\nexport class BrowserClipboardService implements ClipboardService {\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    async readText(): Promise<string> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-read');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-read permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                return await this.getClipboardAPI().readText();\n            } catch (e2) {\n                this.logger.error('Failed reading clipboard content.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return '';\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return '';\n        }\n        return this.getClipboardAPI().readText();\n    }\n\n    async writeText(value: string): Promise<void> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-write');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-write permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                await this.getClipboardAPI().writeText(value);\n                return;\n            } catch (e2) {\n                this.logger.error('Failed writing to the clipboard.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return;\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return;\n        }\n        return this.getClipboardAPI().writeText(value);\n    }\n\n    protected async queryPermission(name: string): Promise<PermissionStatus> {\n        if ('permissions' in navigator) {\n            return (<NavigatorPermissions>navigator['permissions']).query({ name: name });\n        }\n        throw new Error('Permissions API unavailable');\n    }\n\n    protected getClipboardAPI(): NavigatorClipboard {\n        if ('clipboard' in navigator) {\n            return (<NavigatorClipboard>navigator['clipboard']);\n        }\n        throw new Error('Async Clipboard API unavailable');\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { WindowService } from '../../browser/window/window-service';\nimport { DefaultWindowService } from '../../browser/window/default-window-service';\nimport { FrontendApplicationContribution } from '../frontend-application';\nimport { ClipboardService } from '../clipboard-service';\nimport { BrowserClipboardService } from '../browser-clipboard-service';\n\nexport default new ContainerModule(bind => {\n    bind(DefaultWindowService).toSelf().inSingletonScope();\n    bind(WindowService).toService(DefaultWindowService);\n    bind(FrontendApplicationContribution).toService(DefaultWindowService);\n    bind(ClipboardService).to(BrowserClipboardService).inSingletonScope();\n});\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, named } from 'inversify';\nimport { Event, Emitter } from '../../common';\nimport { CorePreferences } from '../core-preferences';\nimport { ContributionProvider } from '../../common/contribution-provider';\nimport { FrontendApplicationContribution, FrontendApplication } from '../frontend-application';\nimport { WindowService } from './window-service';\nimport { DEFAULT_WINDOW_HASH } from './window-service';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n    protected frontendApplication: FrontendApplication;\n\n    protected onUnloadEmitter = new Emitter<void>();\n    get onUnload(): Event<void> {\n        return this.onUnloadEmitter.event;\n    }\n\n    @inject(CorePreferences)\n    protected readonly corePreferences: CorePreferences;\n\n    @inject(ContributionProvider)\n    @named(FrontendApplicationContribution)\n    protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n    onStart(app: FrontendApplication): void {\n        this.frontendApplication = app;\n        this.registerUnloadListeners();\n    }\n\n    openNewWindow(url: string): undefined {\n        window.open(url, undefined, 'noopener');\n        return undefined;\n    }\n\n    openNewDefaultWindow(): void {\n        this.openNewWindow(DEFAULT_WINDOW_HASH);\n    }\n\n    canUnload(): boolean {\n        const confirmExit = this.corePreferences['application.confirmExit'];\n        let preventUnload = confirmExit === 'always';\n        for (const contribution of this.contributions.getContributions()) {\n            if (contribution.onWillStop?.(this.frontendApplication)) {\n                preventUnload = true;\n            }\n        }\n        return confirmExit === 'never' || !preventUnload;\n    }\n\n    /**\n     * Implement the mechanism to detect unloading of the page.\n     */\n    protected registerUnloadListeners(): void {\n        window.addEventListener('beforeunload', event => {\n            if (!this.canUnload()) {\n                return this.preventUnload(event);\n            }\n        });\n        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n        // If the user stays, the page won't be unloaded, so `unload` is not fired.\n        // If the user leaves, the page will be unloaded, so `unload` is fired.\n        window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n    }\n\n    /**\n     * Notify the browser that we do not want to unload.\n     *\n     * Notes:\n     *  - Shows a confirmation popup in browsers.\n     *  - Prevents the window from closing without confirmation in electron.\n     *\n     * @param event The beforeunload event\n     */\n    protected preventUnload(event: BeforeUnloadEvent): string | void {\n        event.returnValue = '';\n        event.preventDefault();\n        return '';\n    }\n\n}\n"],"sourceRoot":""}