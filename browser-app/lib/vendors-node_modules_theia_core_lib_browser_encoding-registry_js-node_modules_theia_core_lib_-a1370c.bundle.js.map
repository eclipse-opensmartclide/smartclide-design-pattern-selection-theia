{"version":3,"sources":["webpack://browser-app/../node_modules/@theia/application-package/src/application-props.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/core-preferences.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/encoding-registry.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/frontend-application-config-provider.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/label-provider.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/index.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-configurations.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-contribution.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-language-override-service.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-provider.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-proxy.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-scope.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/preferences/preference-service.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/supported-encodings.ts","webpack://browser-app/../node_modules/@theia/core/src/browser/window/window-service.ts","webpack://browser-app/../node_modules/@theia/core/src/common/buffer.ts","webpack://browser-app/../node_modules/@theia/core/src/common/encoding-service.ts","webpack://browser-app/../node_modules/@theia/core/src/common/encodings.ts","webpack://browser-app/../node_modules/@theia/core/src/common/env-variables/env-variables-protocol.ts","webpack://browser-app/../node_modules/@theia/core/src/common/env-variables/index.ts","webpack://browser-app/../node_modules/@theia/core/src/common/preferences/preference-schema.ts","webpack://browser-app/../node_modules/@theia/core/src/common/preferences/preference-scope.ts","webpack://browser-app/../node_modules/@theia/core/src/common/promise-util.ts","webpack://browser-app/../node_modules/deepmerge/dist/cjs.js"],"names":[],"mappings":"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AAM,OAAO,CAAC,KAAK,CAAC;;oBAApB,SAAoB,CAAC;;;oBANA,CAAC,EAAE;;wBAUhC,MAAM,SAAS,CAAC;;;;CACnB;AAdD,sBAcC;;;;;;;;;;;;AC5DY;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA","file":"vendors-node_modules_theia_core_lib_browser_encoding-registry_js-node_modules_theia_core_lib_-a1370c.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport type { BrowserWindowConstructorOptions } from 'electron';\n\n/** `deepmerge/dist/cjs` */\nexport const merge = require('deepmerge/dist/cjs');\n\nexport type RequiredRecursive<T> = {\n    [K in keyof T]-?: T[K] extends object ? RequiredRecursive<T[K]> : T[K]\n};\n\n/**\n * Base configuration for the Theia application.\n */\nexport interface ApplicationConfig {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    readonly [key: string]: any;\n}\n\nexport type ElectronFrontendApplicationConfig = RequiredRecursive<ElectronFrontendApplicationConfig.Partial>;\nexport namespace ElectronFrontendApplicationConfig {\n    export const DEFAULT: ElectronFrontendApplicationConfig = {\n        disallowReloadKeybinding: false,\n        windowOptions: {}\n    };\n    export interface Partial {\n\n        /**\n         * If set to `true`, reloading the current browser window won't be possible with the `Ctrl/Cmd + R` keybinding.\n         *\n         * Has no effect if not in an electron environment.\n         *\n         * Defaults to `false`.\n         */\n        readonly disallowReloadKeybinding?: boolean;\n\n        /**\n         * Override or add properties to the electron `windowOptions`.\n         *\n         * Defaults to `{}`.\n         */\n        readonly windowOptions?: BrowserWindowConstructorOptions;\n    }\n}\n\n/**\n * Application configuration for the frontend. The following properties will be injected into the `index.html`.\n */\nexport type FrontendApplicationConfig = RequiredRecursive<FrontendApplicationConfig.Partial>;\nexport namespace FrontendApplicationConfig {\n    export const DEFAULT: FrontendApplicationConfig = {\n        applicationName: 'Eclipse Theia',\n        defaultTheme: 'dark',\n        defaultIconTheme: 'none',\n        electron: ElectronFrontendApplicationConfig.DEFAULT\n    };\n    export interface Partial extends ApplicationConfig {\n\n        /**\n         * The default theme for the application.\n         *\n         * Defaults to `dark`.\n         */\n        readonly defaultTheme?: string;\n\n        /**\n         * The default icon theme for the application.\n         *\n         * Defaults to `none`.\n         */\n        readonly defaultIconTheme?: string;\n\n        /**\n         * The name of the application.\n         *\n         * Defaults to `Eclipse Theia`.\n         */\n        readonly applicationName?: string;\n\n        /**\n         * Electron specific configuration.\n         *\n         * Defaults to `ElectronFrontendApplicationConfig.DEFAULT`.\n         */\n        readonly electron?: ElectronFrontendApplicationConfig.Partial;\n    }\n}\n\n/**\n * Application configuration for the backend.\n */\nexport type BackendApplicationConfig = RequiredRecursive<BackendApplicationConfig.Partial>;\nexport namespace BackendApplicationConfig {\n    export const DEFAULT: BackendApplicationConfig = {\n        singleInstance: false,\n    };\n    export interface Partial extends ApplicationConfig {\n\n        /**\n         * If true and in Electron mode, only one instance of the application is allowed to run at a time.\n         *\n         * Defaults to `false`.\n         */\n        readonly singleInstance?: boolean;\n    }\n}\n\n/**\n * Configuration for the generator.\n */\nexport type GeneratorConfig = RequiredRecursive<GeneratorConfig.Partial>;\nexport namespace GeneratorConfig {\n    export const DEFAULT: GeneratorConfig = {\n        preloadTemplate: ''\n    };\n    export interface Partial {\n\n        /**\n         * Template to use for extra preload content markup (file path or HTML).\n         *\n         * Defaults to `''`.\n         */\n        readonly preloadTemplate?: string;\n    }\n}\n\nexport interface NpmRegistryProps {\n\n    /**\n     * Defaults to `false`.\n     */\n    readonly next: boolean;\n\n    /**\n     * Defaults to `https://registry.npmjs.org/`.\n     */\n    readonly registry: string;\n\n}\nexport namespace NpmRegistryProps {\n    export const DEFAULT: NpmRegistryProps = {\n        next: false,\n        registry: 'https://registry.npmjs.org/'\n    };\n}\n\n/**\n * Representation of all backend and frontend related Theia extension and application properties.\n */\nexport interface ApplicationProps extends NpmRegistryProps {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    readonly [key: string]: any;\n\n    /**\n     * Whether the extension targets the browser or electron. Defaults to `browser`.\n     */\n    readonly target: ApplicationProps.Target;\n\n    /**\n     * Frontend related properties.\n     */\n    readonly frontend: {\n        readonly config: FrontendApplicationConfig\n    };\n\n    /**\n     * Backend specific properties.\n     */\n    readonly backend: {\n        readonly config: BackendApplicationConfig\n    };\n\n    /**\n     * Generator specific properties.\n     */\n    readonly generator: {\n        readonly config: GeneratorConfig\n    };\n}\nexport namespace ApplicationProps {\n    export type Target = keyof typeof ApplicationTarget;\n    export enum ApplicationTarget {\n        browser = 'browser',\n        electron = 'electron'\n    };\n    export const DEFAULT: ApplicationProps = {\n        ...NpmRegistryProps.DEFAULT,\n        target: 'browser',\n        backend: {\n            config: BackendApplicationConfig.DEFAULT\n        },\n        frontend: {\n            config: FrontendApplicationConfig.DEFAULT\n        },\n        generator: {\n            config: GeneratorConfig.DEFAULT\n        }\n    };\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Google and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { createPreferenceProxy, PreferenceProxy, PreferenceService, PreferenceContribution, PreferenceSchema } from './preferences';\nimport { SUPPORTED_ENCODINGS } from './supported-encodings';\nimport { FrontendApplicationConfigProvider } from './frontend-application-config-provider';\n\nexport const corePreferenceSchema: PreferenceSchema = {\n    'type': 'object',\n    properties: {\n        'workbench.list.openMode': {\n            type: 'string',\n            enum: [\n                'singleClick',\n                'doubleClick'\n            ],\n            default: 'singleClick',\n            description: 'Controls how to open items in trees using the mouse.'\n        },\n        'workbench.editor.highlightModifiedTabs': {\n            'type': 'boolean',\n            'description': 'Controls whether a top border is drawn on modified (dirty) editor tabs or not.',\n            'default': false\n        },\n        'workbench.editor.closeOnFileDelete': {\n            'type': 'boolean',\n            // eslint-disable-next-line max-len\n            'description': 'Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.',\n            'default': true\n        },\n        'application.confirmExit': {\n            type: 'string',\n            enum: [\n                'never',\n                'ifRequired',\n                'always',\n            ],\n            default: 'ifRequired',\n            description: 'When to confirm before closing the application window.',\n        },\n        'workbench.commandPalette.history': {\n            type: 'number',\n            default: 50,\n            minimum: 0,\n            description: 'Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.'\n        },\n        'workbench.colorTheme': {\n            type: 'string',\n            default: FrontendApplicationConfigProvider.get().defaultTheme,\n            description: 'Specifies the color theme used in the workbench.'\n        },\n        'workbench.iconTheme': {\n            type: ['string', 'null'],\n            default: FrontendApplicationConfigProvider.get().defaultIconTheme,\n            description: \"Specifies the icon theme used in the workbench or 'null' to not show any file icons.\"\n        },\n        'workbench.silentNotifications': {\n            type: 'boolean',\n            default: false,\n            description: 'Controls whether to suppress notification popups.'\n        },\n        'files.encoding': {\n            'type': 'string',\n            'enum': Object.keys(SUPPORTED_ENCODINGS),\n            'default': 'utf8',\n            'description': 'The default character set encoding to use when reading and writing files. This setting can also be configured per language.',\n            'scope': 'language-overridable',\n            'enumDescriptions': Object.keys(SUPPORTED_ENCODINGS).map(key => SUPPORTED_ENCODINGS[key].labelLong),\n            'included': Object.keys(SUPPORTED_ENCODINGS).length > 1\n        },\n        'workbench.tree.renderIndentGuides': {\n            type: 'string',\n            enum: ['onHover', 'none', 'always'],\n            default: 'onHover',\n            description: 'Controls whether the tree should render indent guides.'\n        },\n        'keyboard.dispatch': {\n            type: 'string',\n            enum: [\n                'code',\n                'keyCode',\n            ],\n            default: 'code',\n            description: 'Whether to interpret keypresses by the `code` of the physical key, or by the `keyCode` provided by the OS.'\n        },\n    }\n};\n\nexport interface CoreConfiguration {\n    'application.confirmExit': 'never' | 'ifRequired' | 'always';\n    'keyboard.dispatch': 'code' | 'keyCode';\n    'workbench.list.openMode': 'singleClick' | 'doubleClick';\n    'workbench.commandPalette.history': number;\n    'workbench.editor.highlightModifiedTabs': boolean;\n    'workbench.editor.closeOnFileDelete': boolean;\n    'workbench.colorTheme': string;\n    'workbench.iconTheme': string | null;\n    'workbench.silentNotifications': boolean;\n    'files.encoding': string\n    'workbench.tree.renderIndentGuides': 'onHover' | 'none' | 'always';\n}\n\nexport const CorePreferences = Symbol('CorePreferences');\nexport type CorePreferences = PreferenceProxy<CoreConfiguration>;\n\nexport function createCorePreferences(preferences: PreferenceService): CorePreferences {\n    return createPreferenceProxy(preferences, corePreferenceSchema);\n}\n\nexport function bindCorePreferences(bind: interfaces.Bind): void {\n    bind(CorePreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        return createCorePreferences(preferences);\n    }).inSingletonScope();\n    bind(PreferenceContribution).toConstantValue({ schema: corePreferenceSchema });\n}\n","/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/browser/textFileService.ts#L491\n\nimport { injectable, inject } from 'inversify';\nimport URI from '../common/uri';\nimport { Disposable } from '../common/disposable';\nimport { CorePreferences } from './core-preferences';\nimport { EncodingService as EncodingService } from '../common/encoding-service';\nimport { UTF8 } from '../common/encodings';\n\nexport interface EncodingOverride {\n    parent?: URI;\n    extension?: string;\n    scheme?: string;\n    encoding: string;\n}\n\n@injectable()\nexport class EncodingRegistry {\n\n    protected readonly encodingOverrides: EncodingOverride[] = [];\n\n    @inject(CorePreferences)\n    protected readonly preferences: CorePreferences;\n\n    @inject(EncodingService)\n    protected readonly encodingService: EncodingService;\n\n    registerOverride(override: EncodingOverride): Disposable {\n        this.encodingOverrides.push(override);\n        return Disposable.create(() => {\n            const index = this.encodingOverrides.indexOf(override);\n            if (index !== -1) {\n                this.encodingOverrides.splice(index, 1);\n            }\n        });\n    }\n\n    getEncodingForResource(resource: URI, preferredEncoding?: string): string {\n        let fileEncoding: string;\n\n        const override = this.getEncodingOverride(resource);\n        if (override) {\n            fileEncoding = override; // encoding override always wins\n        } else if (preferredEncoding) {\n            fileEncoding = preferredEncoding; // preferred encoding comes second\n        } else {\n            fileEncoding = this.preferences.get('files.encoding', undefined, resource.toString());\n        }\n\n        if (!fileEncoding || !this.encodingService.exists(fileEncoding)) {\n            return UTF8; // the default is UTF 8\n        }\n\n        return this.encodingService.toIconvEncoding(fileEncoding);\n    }\n\n    protected getEncodingOverride(resource: URI): string | undefined {\n        if (this.encodingOverrides && this.encodingOverrides.length) {\n            for (const override of this.encodingOverrides) {\n                if (override.parent && resource.isEqualOrParent(override.parent)) {\n                    return override.encoding;\n                }\n\n                if (override.extension && resource.path.ext === `.${override.extension}`) {\n                    return override.encoding;\n                }\n\n                if (override.scheme && override.scheme === resource.scheme) {\n                    return override.encoding;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { FrontendApplicationConfig, merge } from '@theia/application-package/lib/application-props';\n\nexport class FrontendApplicationConfigProvider {\n\n    private static KEY = Symbol('FrontendApplicationConfigProvider');\n\n    static get(): FrontendApplicationConfig {\n        const config = FrontendApplicationConfigProvider.doGet();\n        if (config === undefined) {\n            throw new Error('The configuration is not set. Did you call FrontendApplicationConfigProvider#set?');\n        }\n        return config;\n    }\n\n    static set(config: FrontendApplicationConfig.Partial): void {\n        if (FrontendApplicationConfigProvider.doGet() !== undefined) {\n            throw new Error('The configuration is already set.');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const globalObject = window as any;\n        const key = FrontendApplicationConfigProvider.KEY;\n        globalObject[key] = merge(FrontendApplicationConfig.DEFAULT, config);\n    }\n\n    private static doGet(): FrontendApplicationConfig | undefined {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const globalObject = window as any;\n        const key = FrontendApplicationConfigProvider.KEY;\n        return globalObject[key];\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, named, postConstruct } from 'inversify';\nimport * as fileIcons from 'file-icons-js';\nimport URI from '../common/uri';\nimport { ContributionProvider } from '../common/contribution-provider';\nimport { Prioritizeable } from '../common/types';\nimport { Event, Emitter, Disposable, Path } from '../common';\nimport { FrontendApplicationContribution } from './frontend-application';\nimport { EnvVariablesServer } from '../common/env-variables/env-variables-protocol';\nimport { ResourceLabelFormatter, ResourceLabelFormatting } from '../common/label-protocol';\n\n/**\n * @internal don't export it, use `LabelProvider.folderIcon` instead.\n */\nconst DEFAULT_FOLDER_ICON = 'fa fa-folder';\n/**\n * @internal don't export it, use `LabelProvider.fileIcon` instead.\n */\nconst DEFAULT_FILE_ICON = 'fa fa-file';\n\n/**\n * Internal folder icon class for the default (File Icons) theme.\n *\n * @deprecated Use `LabelProvider.folderIcon` to get a folder icon class for the current icon theme.\n */\nexport const FOLDER_ICON = DEFAULT_FOLDER_ICON;\n/**\n * Internal file icon class for the default (File Icons) theme.\n *\n * @deprecated Use `LabelProvider.fileIcon` to get a file icon class for the current icon theme.\n */\nexport const FILE_ICON = DEFAULT_FILE_ICON;\n\nexport const LabelProviderContribution = Symbol('LabelProviderContribution');\n/**\n * A {@link LabelProviderContribution} determines how specific elements/nodes are displayed in the workbench.\n * Theia views use a common {@link LabelProvider} to determine the label and/or an icon for elements shown in the UI. This includes elements in lists\n * and trees, but also view specific locations like headers. The common {@link LabelProvider} collects all {@links LabelProviderContribution} and delegates\n * to the contribution with the highest priority. This is determined via calling the {@link LabelProviderContribution.canHandle} function, so contributions\n * define which elements they are responsible for.\n * As arbitrary views can consume LabelProviderContributions, they must be generic for the covered element type, not view specific. Label providers and\n * contributions can be used for arbitrary element and node types, e.g. for markers or domain-specific elements.\n */\nexport interface LabelProviderContribution {\n\n    /**\n     * Determines whether this contribution can handle the given element and with what priority.\n     * All contributions are ordered by the returned number if greater than zero. The highest number wins.\n     * If two or more contributions return the same positive number one of those will be used. It is undefined which one.\n     */\n    canHandle(element: object): number;\n\n    /**\n     * returns an icon class for the given element.\n     */\n    getIcon?(element: object): string | undefined;\n\n    /**\n     * returns a short name for the given element.\n     */\n    getName?(element: object): string | undefined;\n\n    /**\n     * returns a long name for the given element.\n     */\n    getLongName?(element: object): string | undefined;\n\n    /**\n     * Emit when something has changed that may result in this label provider returning a different\n     * value for one or more properties (name, icon etc).\n     */\n    readonly onDidChange?: Event<DidChangeLabelEvent>;\n\n    /**\n     * Checks whether the given element is affected by the given change event.\n     * Contributions delegating to the label provider can use this hook\n     * to perform a recursive check.\n     */\n    affects?(element: object, event: DidChangeLabelEvent): boolean;\n\n}\n\nexport interface DidChangeLabelEvent {\n    affects(element: object): boolean;\n}\n\nexport interface URIIconReference {\n    kind: 'uriIconReference';\n    id: 'file' | 'folder';\n    uri?: URI\n}\nexport namespace URIIconReference {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    export function is(element: any | undefined): element is URIIconReference {\n        return !!element && typeof element === 'object' && 'kind' in element && element['kind'] === 'uriIconReference';\n    }\n    export function create(id: URIIconReference['id'], uri?: URI): URIIconReference {\n        return { kind: 'uriIconReference', id, uri };\n    }\n}\n\n@injectable()\nexport class DefaultUriLabelProviderContribution implements LabelProviderContribution {\n\n    protected formatters: ResourceLabelFormatter[] = [];\n    protected readonly onDidChangeEmitter = new Emitter<DidChangeLabelEvent>();\n    protected homePath: string | undefined;\n    @inject(EnvVariablesServer) protected readonly envVariablesServer: EnvVariablesServer;\n\n    @postConstruct()\n    init(): void {\n        this.envVariablesServer.getHomeDirUri().then(result => {\n            this.homePath = result;\n            this.fireOnDidChange();\n        });\n    }\n\n    canHandle(element: object): number {\n        if (element instanceof URI || URIIconReference.is(element)) {\n            return 1;\n        }\n        return 0;\n    }\n\n    getIcon(element: URI | URIIconReference): string {\n        if (URIIconReference.is(element) && element.id === 'folder') {\n            return this.defaultFolderIcon;\n        }\n        const uri = URIIconReference.is(element) ? element.uri : element;\n        if (uri) {\n            const iconClass = uri && this.getFileIcon(uri);\n            return iconClass || this.defaultFileIcon;\n        }\n        return '';\n    }\n\n    get defaultFolderIcon(): string {\n        return DEFAULT_FOLDER_ICON;\n    }\n\n    get defaultFileIcon(): string {\n        return DEFAULT_FILE_ICON;\n    }\n\n    protected getFileIcon(uri: URI): string | undefined {\n        const fileIcon = fileIcons.getClassWithColor(uri.displayName);\n        if (!fileIcon) {\n            return undefined;\n        }\n        return fileIcon + ' theia-file-icons-js';\n    }\n\n    getName(element: URI | URIIconReference): string | undefined {\n        const uri = this.getUri(element);\n        return uri && uri.displayName;\n    }\n\n    getLongName(element: URI | URIIconReference): string | undefined {\n        const uri = this.getUri(element);\n        if (uri) {\n            const formatting = this.findFormatting(uri);\n            if (formatting) {\n                return this.formatUri(uri, formatting);\n            }\n        }\n        return uri && uri.path.toString();\n    }\n\n    protected getUri(element: URI | URIIconReference): URI | undefined {\n        return URIIconReference.is(element) ? element.uri : element;\n    }\n\n    registerFormatter(formatter: ResourceLabelFormatter): Disposable {\n        this.formatters.push(formatter);\n        this.fireOnDidChange();\n        return Disposable.create(() => {\n            this.formatters = this.formatters.filter(f => f !== formatter);\n            this.fireOnDidChange();\n        });\n    }\n\n    get onDidChange(): Event<DidChangeLabelEvent> {\n        return this.onDidChangeEmitter.event;\n    }\n\n    private fireOnDidChange(): void {\n        this.onDidChangeEmitter.fire({\n            affects: (element: URI) => this.canHandle(element) > 0\n        });\n    }\n\n    // copied and modified from https://github.com/microsoft/vscode/blob/1.44.2/src/vs/workbench/services/label/common/labelService.ts\n    /*---------------------------------------------------------------------------------------------\n    *  Copyright (c) Microsoft Corporation. All rights reserved.\n    *  Licensed under the MIT License. See License.txt in the project root for license information.\n    *--------------------------------------------------------------------------------------------*/\n    private readonly labelMatchingRegexp = /\\${(scheme|authority|path|query)}/g;\n    protected formatUri(resource: URI, formatting: ResourceLabelFormatting): string {\n        let label = formatting.label.replace(this.labelMatchingRegexp, (match, token) => {\n            switch (token) {\n                case 'scheme': return resource.scheme;\n                case 'authority': return resource.authority;\n                case 'path': return resource.path.toString();\n                case 'query': return resource.query;\n                default: return '';\n            }\n        });\n\n        // convert \\c:\\something => C:\\something\n        if (formatting.normalizeDriveLetter && this.hasDriveLetter(label)) {\n            label = label.charAt(1).toUpperCase() + label.substr(2);\n        }\n\n        if (formatting.tildify) {\n            label = Path.tildify(label, this.homePath ? this.homePath : '');\n        }\n        if (formatting.authorityPrefix && resource.authority) {\n            label = formatting.authorityPrefix + label;\n        }\n\n        return label.replace(/\\//g, formatting.separator);\n    }\n\n    private hasDriveLetter(path: string): boolean {\n        return !!(path && path[2] === ':');\n    }\n\n    protected findFormatting(resource: URI): ResourceLabelFormatting | undefined {\n        let bestResult: ResourceLabelFormatter | undefined;\n\n        this.formatters.forEach(formatter => {\n            if (formatter.scheme === resource.scheme) {\n                if (!bestResult && !formatter.authority) {\n                    bestResult = formatter;\n                    return;\n                }\n                if (!formatter.authority) {\n                    return;\n                }\n\n                if ((formatter.authority.toLowerCase() === resource.authority.toLowerCase()) &&\n                    (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length ||\n                        ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n                    bestResult = formatter;\n                }\n            }\n        });\n\n        return bestResult ? bestResult.formatting : undefined;\n    }\n}\n\n/**\n * The {@link LabelProvider} determines how elements/nodes are displayed in the workbench. For any element, it can determine a short label, a long label\n * and an icon. The {@link LabelProvider} is to be used in lists, trees and tables, but also view specific locations like headers.\n * The common {@link LabelProvider} can be extended/adapted via {@link LabelProviderContribution}s. For every element, the {@links LabelProvider} will determine the\n * {@link LabelProviderContribution} with the hightest priority and delegate to it. Theia registers default {@link LabelProviderContribution} for common types, e.g.\n * the {@link DefaultUriLabelProviderContribution} for elements that have a URI.\n * Using the {@link LabelProvider} across the workbench ensures a common look and feel for elements across multiple views. To adapt the way how specific\n * elements/nodes are rendered, use a {@link LabelProviderContribution} rather than adapting or sub classing the {@link LabelProvider}. This way, your adaptation\n * is applied to all views in Theia that use the {@link LabelProvider}\n */\n@injectable()\nexport class LabelProvider implements FrontendApplicationContribution {\n\n    protected readonly onDidChangeEmitter = new Emitter<DidChangeLabelEvent>();\n\n    @inject(ContributionProvider) @named(LabelProviderContribution)\n    protected readonly contributionProvider: ContributionProvider<LabelProviderContribution>;\n\n    /**\n     * Start listening to contributions.\n     *\n     * Don't call this method directly!\n     * It's called by the frontend application during initialization.\n     */\n    initialize(): void {\n        const contributions = this.contributionProvider.getContributions();\n        for (const eventContribution of contributions) {\n            if (eventContribution.onDidChange) {\n                eventContribution.onDidChange(event => {\n                    this.onDidChangeEmitter.fire({\n                        // TODO check eventContribution.canHandle as well\n                        affects: element => this.affects(element, event)\n                    });\n                });\n            }\n        }\n    }\n\n    protected affects(element: object, event: DidChangeLabelEvent): boolean {\n        if (event.affects(element)) {\n            return true;\n        }\n        for (const contribution of this.findContribution(element)) {\n            if (contribution.affects && contribution.affects(element, event)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get onDidChange(): Event<DidChangeLabelEvent> {\n        return this.onDidChangeEmitter.event;\n    }\n\n    /**\n     * Return a default file icon for the current icon theme.\n     */\n    get fileIcon(): string {\n        return this.getIcon(URIIconReference.create('file'));\n    }\n\n    /**\n     * Return a default folder icon for the current icon theme.\n     */\n    get folderIcon(): string {\n        return this.getIcon(URIIconReference.create('folder'));\n    }\n\n    /**\n     * Get the icon class from the list of available {@link LabelProviderContribution} for the given element.\n     * @return the icon class\n     */\n    getIcon(element: object): string {\n        const contributions = this.findContribution(element);\n        for (const contribution of contributions) {\n            const value = contribution.getIcon && contribution.getIcon(element);\n            if (value === undefined) {\n                continue;\n            }\n            return value;\n        }\n        return '';\n    }\n\n    /**\n     * Get a short name from the list of available {@link LabelProviderContribution} for the given element.\n     * @return the short name\n     */\n    getName(element: object): string {\n        const contributions = this.findContribution(element);\n        for (const contribution of contributions) {\n            const value = contribution.getName && contribution.getName(element);\n            if (value === undefined) {\n                continue;\n            }\n            return value;\n        }\n        return '<unknown>';\n    }\n\n    /**\n     * Get a long name from the list of available {@link LabelProviderContribution} for the given element.\n     * @return the long name\n     */\n    getLongName(element: object): string {\n        const contributions = this.findContribution(element);\n        for (const contribution of contributions) {\n            const value = contribution.getLongName && contribution.getLongName(element);\n            if (value === undefined) {\n                continue;\n            }\n            return value;\n        }\n        return '';\n    }\n\n    protected findContribution(element: object): LabelProviderContribution[] {\n        const prioritized = Prioritizeable.prioritizeAllSync(this.contributionProvider.getContributions(), contrib =>\n            contrib.canHandle(element)\n        );\n        return prioritized.map(c => c.value);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './preference-service';\nexport * from './preference-proxy';\nexport * from './preference-contribution';\nexport * from './preference-provider';\nexport * from './preference-scope';\nexport * from './preference-language-override-service';\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named, interfaces } from 'inversify';\nimport URI from '../../common/uri';\nimport { ContributionProvider, bindContributionProvider } from '../../common/contribution-provider';\n\nexport const PreferenceConfiguration = Symbol('PreferenceConfiguration');\nexport interface PreferenceConfiguration {\n    name: string;\n}\n\nexport function bindPreferenceConfigurations(bind: interfaces.Bind): void {\n    bindContributionProvider(bind, PreferenceConfiguration);\n    bind(PreferenceConfigurations).toSelf().inSingletonScope();\n}\n\n@injectable()\nexport class PreferenceConfigurations {\n\n    @inject(ContributionProvider) @named(PreferenceConfiguration)\n    protected readonly provider: ContributionProvider<PreferenceConfiguration>;\n\n    /* prefer Theia over VS Code by default */\n    getPaths(): string[] {\n        return ['.theia', '.vscode'];\n    }\n\n    getConfigName(): string {\n        return 'settings';\n    }\n\n    protected sectionNames: string[] | undefined;\n    getSectionNames(): string[] {\n        if (!this.sectionNames) {\n            this.sectionNames = this.provider.getContributions().map(p => p.name);\n        }\n        return this.sectionNames;\n    }\n\n    isSectionName(name: string): boolean {\n        return this.getSectionNames().indexOf(name) !== -1;\n    }\n\n    isAnyConfig(name: string): boolean {\n        return [...this.getSectionNames(), this.getConfigName()].includes(name);\n    }\n\n    isSectionUri(configUri: URI | undefined): boolean {\n        return !!configUri && this.isSectionName(this.getName(configUri));\n    }\n\n    isConfigUri(configUri: URI | undefined): boolean {\n        return !!configUri && this.getName(configUri) === this.getConfigName();\n    }\n\n    getName(configUri: URI): string {\n        return configUri.path.name;\n    }\n\n    getPath(configUri: URI): string {\n        return configUri.parent.path.base;\n    }\n\n    createUri(folder: URI, configPath: string = this.getPaths()[0], configName: string = this.getConfigName()): URI {\n        return folder.resolve(configPath).resolve(configName + '.json');\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as Ajv from 'ajv';\nimport { inject, injectable, interfaces, named, postConstruct } from 'inversify';\nimport { ContributionProvider, bindContributionProvider, Emitter, Event, Disposable } from '../../common';\nimport { PreferenceScope } from './preference-scope';\nimport { PreferenceProvider, PreferenceProviderDataChange } from './preference-provider';\nimport {\n    PreferenceSchema, PreferenceSchemaProperties, PreferenceDataSchema, PreferenceItem, PreferenceSchemaProperty, PreferenceDataProperty, JsonType\n} from '../../common/preferences/preference-schema';\nimport { FrontendApplicationConfigProvider } from '../frontend-application-config-provider';\nimport { FrontendApplicationConfig } from '@theia/application-package/lib/application-props';\nimport { bindPreferenceConfigurations, PreferenceConfigurations } from './preference-configurations';\nexport { PreferenceSchema, PreferenceSchemaProperties, PreferenceDataSchema, PreferenceItem, PreferenceSchemaProperty, PreferenceDataProperty, JsonType };\nimport { Mutable } from '../../common/types';\nimport { OverridePreferenceName, PreferenceLanguageOverrideService } from './preference-language-override-service';\n\n/**\n * @deprecated since 1.13.0 import from @theia/core/lib/browser/preferences/preference-language-override-service.\n */\nexport { OVERRIDE_PROPERTY_PATTERN } from './preference-language-override-service';\n\n/* eslint-disable guard-for-in, @typescript-eslint/no-explicit-any */\n\nexport const PreferenceContribution = Symbol('PreferenceContribution');\n\n/**\n * A {@link PreferenceContribution} allows adding additional custom preferences.\n * For this, the {@link PreferenceContribution} has to provide a valid JSON Schema specifying which preferences\n * are available including their types and description.\n *\n * ### Example usage\n * ```typescript\n * const MyPreferencesSchema: PreferenceSchema = {\n *     'type': 'object',\n *     'properties': {\n *         'myext.decorations.enabled': {\n *             'type': 'boolean',\n *             'description': 'Show file status',\n *             'default': true\n *         },\n *         // [...]\n *     }\n * }\n * @injectable()\n * export class MyPreferenceContribution implements PreferenceContribution{\n *     schema= MyPreferencesSchema;\n * }\n * ```\n */\nexport interface PreferenceContribution {\n    readonly schema: PreferenceSchema;\n}\n\nexport function bindPreferenceSchemaProvider(bind: interfaces.Bind): void {\n    bindPreferenceConfigurations(bind);\n    bind(PreferenceSchemaProvider).toSelf().inSingletonScope();\n    bind(PreferenceLanguageOverrideService).toSelf().inSingletonScope();\n    bindContributionProvider(bind, PreferenceContribution);\n}\n\n/**\n * Specialized {@link FrontendApplicationConfig} to configure default\n * preference values for the {@link PreferenceSchemaProvider}.\n */\nexport interface FrontendApplicationPreferenceConfig extends FrontendApplicationConfig {\n    preferences: {\n        [preferenceName: string]: any\n    }\n}\nexport namespace FrontendApplicationPreferenceConfig {\n    export function is(config: FrontendApplicationConfig): config is FrontendApplicationPreferenceConfig {\n        return 'preferences' in config && typeof config['preferences'] === 'object';\n    }\n}\n\n/**\n * The {@link PreferenceSchemaProvider} collects all {@link PreferenceContribution}s and combines\n * the preference schema provided by these contributions into one collective schema. The preferences which\n * are provided by this {@link PreferenceProvider} are derived from this combined schema.\n */\n@injectable()\nexport class PreferenceSchemaProvider extends PreferenceProvider {\n\n    protected readonly preferences: { [name: string]: any } = {};\n    protected readonly combinedSchema: PreferenceDataSchema = { properties: {}, patternProperties: {} };\n    protected readonly workspaceSchema: PreferenceDataSchema = { properties: {}, patternProperties: {} };\n    protected readonly folderSchema: PreferenceDataSchema = { properties: {}, patternProperties: {} };\n\n    @inject(ContributionProvider) @named(PreferenceContribution)\n    protected readonly preferenceContributions: ContributionProvider<PreferenceContribution>;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly onDidPreferenceSchemaChangedEmitter = new Emitter<void>();\n    readonly onDidPreferenceSchemaChanged: Event<void> = this.onDidPreferenceSchemaChangedEmitter.event;\n    protected fireDidPreferenceSchemaChanged(): void {\n        this.onDidPreferenceSchemaChangedEmitter.fire(undefined);\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.readConfiguredPreferences();\n        this.preferenceContributions.getContributions().forEach(contrib => {\n            this.doSetSchema(contrib.schema);\n        });\n        this.combinedSchema.additionalProperties = false;\n        this._ready.resolve();\n    }\n\n    /**\n     * Register a new overrideIdentifier. Existing identifiers are not replaced.\n     *\n     * Allows overriding existing values while keeping both values in store.\n     * For example to store different editor settings, e.g. \"[markdown].editor.autoIndent\",\n     * \"[json].editor.autoIndent\" and \"editor.autoIndent\"\n     * @param overrideIdentifier the new overrideIdentifier\n     */\n    registerOverrideIdentifier(overrideIdentifier: string): void {\n        if (this.preferenceOverrideService.addOverrideIdentifier(overrideIdentifier)) {\n            this.updateOverridePatternPropertiesKey();\n        }\n    }\n\n    protected readonly overridePatternProperties: Required<Pick<PreferenceDataProperty, 'properties' | 'additionalProperties'>> & PreferenceDataProperty = {\n        type: 'object',\n        description: 'Configure editor settings to be overridden for a language.',\n        errorMessage: 'Unknown Identifier. Use language identifiers',\n        properties: {},\n        additionalProperties: false\n    };\n    protected overridePatternPropertiesKey: string | undefined;\n    protected updateOverridePatternPropertiesKey(): void {\n        const oldKey = this.overridePatternPropertiesKey;\n        const newKey = this.preferenceOverrideService.computeOverridePatternPropertiesKey();\n        if (oldKey === newKey) {\n            return;\n        }\n        if (oldKey) {\n            delete this.combinedSchema.patternProperties[oldKey];\n        }\n        this.overridePatternPropertiesKey = newKey;\n        if (newKey) {\n            this.combinedSchema.patternProperties[newKey] = this.overridePatternProperties;\n        }\n        this.fireDidPreferenceSchemaChanged();\n    }\n\n    protected doUnsetSchema(changes: PreferenceProviderDataChange[]): PreferenceProviderDataChange[] {\n        const inverseChanges: PreferenceProviderDataChange[] = [];\n        for (const change of changes) {\n            const preferenceName = change.preferenceName;\n            const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n            if (overridden) {\n                delete this.overridePatternProperties.properties[`[${overridden.overrideIdentifier}]`];\n                this.removePropFromSchemas(`[${overridden.overrideIdentifier}]`);\n            } else {\n                this.removePropFromSchemas(preferenceName);\n            }\n            const newValue = change.oldValue;\n            const oldValue = change.newValue;\n            const { scope, domain } = change;\n            const inverseChange: Mutable<PreferenceProviderDataChange> = { preferenceName, oldValue, scope, domain };\n            if (typeof newValue === undefined) {\n                delete this.preferences[preferenceName];\n            } else {\n                inverseChange.newValue = newValue;\n                this.preferences[preferenceName] = newValue;\n            }\n            inverseChanges.push(inverseChange);\n        }\n        return inverseChanges;\n    }\n\n    protected doSetSchema(schema: PreferenceSchema): PreferenceProviderDataChange[] {\n        const ajv = new Ajv();\n        const valid = ajv.validateSchema(schema);\n        if (!valid) {\n            const errors = !!ajv.errors ? ajv.errorsText(ajv.errors) : 'unknown validation error';\n            console.warn('A contributed preference schema has validation issues : ' + errors);\n        }\n        const scope = PreferenceScope.Default;\n        const domain = this.getDomain();\n        const changes: PreferenceProviderDataChange[] = [];\n        const defaultScope = PreferenceSchema.getDefaultScope(schema);\n        const overridable = schema.overridable || false;\n        for (const preferenceName of Object.keys(schema.properties)) {\n            if (this.combinedSchema.properties[preferenceName]) {\n                console.error('Preference name collision detected in the schema for property: ' + preferenceName);\n            } else {\n                const schemaProps = PreferenceDataProperty.fromPreferenceSchemaProperty(schema.properties[preferenceName], defaultScope);\n                if (typeof schemaProps.overridable !== 'boolean' && overridable) {\n                    schemaProps.overridable = true;\n                }\n                if (schemaProps.overridable) {\n                    this.overridePatternProperties.properties[preferenceName] = schemaProps;\n                }\n                this.updateSchemaProps(preferenceName, schemaProps);\n\n                const schemaDefault = this.getDefaultValue(schemaProps);\n                const configuredDefault = this.getConfiguredDefault(preferenceName);\n                if (this.preferenceOverrideService.testOverrideValue(preferenceName, schemaDefault)) {\n                    schemaProps.defaultValue = PreferenceSchemaProperties.is(configuredDefault)\n                        ? PreferenceProvider.merge(schemaDefault, configuredDefault)\n                        : schemaDefault;\n                    for (const overriddenPreferenceName in schemaProps.defaultValue) {\n                        const overrideValue = schemaDefault[overriddenPreferenceName];\n                        const overridePreferenceName = `${preferenceName}.${overriddenPreferenceName}`;\n                        changes.push(this.doSetPreferenceValue(overridePreferenceName, overrideValue, { scope, domain }));\n                    }\n                } else {\n                    schemaProps.defaultValue = configuredDefault === undefined ? schemaDefault : configuredDefault;\n                    changes.push(this.doSetPreferenceValue(preferenceName, schemaProps.defaultValue, { scope, domain }));\n                }\n            }\n        }\n        return changes;\n    }\n\n    protected doSetPreferenceValue(preferenceName: string, newValue: any, { scope, domain }: {\n        scope: PreferenceScope,\n        domain?: string[]\n    }): PreferenceProviderDataChange {\n        const oldValue = this.preferences[preferenceName];\n        this.preferences[preferenceName] = newValue;\n        return { preferenceName, oldValue, newValue, scope, domain };\n    }\n\n    protected getDefaultValue(property: PreferenceItem): any {\n        if (property.defaultValue !== undefined) {\n            return property.defaultValue;\n        }\n        if (property.default !== undefined) {\n            return property.default;\n        }\n        const type = Array.isArray(property.type) ? property.type[0] : property.type;\n        switch (type) {\n            case 'boolean':\n                return false;\n            case 'integer':\n            case 'number':\n                return 0;\n            case 'string':\n                return '';\n            case 'array':\n                return [];\n            case 'object':\n                return {};\n        }\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n\n    protected getConfiguredDefault(preferenceName: string): any {\n        const config = FrontendApplicationConfigProvider.get();\n        if (preferenceName && FrontendApplicationPreferenceConfig.is(config) && preferenceName in config.preferences) {\n            return config.preferences[preferenceName];\n        }\n    }\n\n    getCombinedSchema(): PreferenceDataSchema {\n        return this.combinedSchema;\n    }\n\n    getSchema(scope: PreferenceScope): PreferenceDataSchema {\n        switch (scope) {\n            case PreferenceScope.Default:\n            case PreferenceScope.User:\n                return this.combinedSchema;\n            case PreferenceScope.Workspace:\n                return this.workspaceSchema;\n            case PreferenceScope.Folder:\n                return this.folderSchema;\n        }\n    }\n\n    setSchema(schema: PreferenceSchema): Disposable {\n        const changes = this.doSetSchema(schema);\n        if (!changes.length) {\n            return Disposable.NULL;\n        }\n        this.fireDidPreferenceSchemaChanged();\n        this.emitPreferencesChangedEvent(changes);\n        return Disposable.create(() => {\n            const inverseChanges = this.doUnsetSchema(changes);\n            if (!inverseChanges.length) {\n                return;\n            }\n            this.fireDidPreferenceSchemaChanged();\n            this.emitPreferencesChangedEvent(inverseChanges);\n        });\n    }\n\n    getPreferences(): { [name: string]: any } {\n        return this.preferences;\n    }\n\n    async setPreference(): Promise<boolean> {\n        return false;\n    }\n\n    isValidInScope(preferenceName: string, scope: PreferenceScope): boolean {\n        let property;\n        const overridden = this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n        if (overridden) {\n            // try from overridden schema\n            property = this.overridePatternProperties[`[${overridden.overrideIdentifier}]`];\n            property = property && property[overridden.preferenceName];\n            if (!property) {\n                // try from overridden identifier\n                property = this.overridePatternProperties[overridden.preferenceName];\n            }\n            if (!property) {\n                // try from overridden value\n                property = this.combinedSchema.properties[overridden.preferenceName];\n            }\n        } else {\n            property = this.combinedSchema.properties[preferenceName];\n        }\n        return property && property.scope! >= scope;\n    }\n\n    *getPreferenceNames(): IterableIterator<string> {\n        for (const preferenceName in this.combinedSchema.properties) {\n            yield preferenceName;\n            for (const overridePreferenceName of this.getOverridePreferenceNames(preferenceName)) {\n                yield overridePreferenceName;\n            }\n        }\n    }\n\n    getOverridePreferenceNames(preferenceName: string): IterableIterator<string> {\n        const preference = this.combinedSchema.properties[preferenceName];\n        if (preference && preference.overridable) {\n            return this.preferenceOverrideService.getOverridePreferenceNames(preferenceName);\n        }\n        return [][Symbol.iterator]();\n    }\n\n    protected updateSchemaProps(key: string, property: PreferenceDataProperty): void {\n        this.combinedSchema.properties[key] = property;\n\n        switch (property.scope) {\n            case PreferenceScope.Folder:\n                this.folderSchema.properties[key] = property;\n            // Fall through. isValidInScope implies that User ⊃ Workspace ⊃ Folder,\n            // so anything we add to folder should be added to workspace, but not vice versa.\n            case PreferenceScope.Workspace:\n                this.workspaceSchema.properties[key] = property;\n                break;\n        }\n    }\n\n    protected removePropFromSchemas(key: string): void {\n        // If we remove a key from combined, it should also be removed from all narrower scopes.\n        delete this.combinedSchema.properties[key];\n        delete this.workspaceSchema.properties[key];\n        delete this.folderSchema.properties[key];\n    }\n\n    protected readConfiguredPreferences(): void {\n        const config = FrontendApplicationConfigProvider.get();\n        if (FrontendApplicationPreferenceConfig.is(config)) {\n            try {\n                const configuredDefaults = config.preferences;\n                const parsedDefaults = this.getParsedContent(configuredDefaults);\n                Object.assign(this.preferences, parsedDefaults);\n                const scope = PreferenceScope.Default;\n                const domain = this.getDomain();\n                const changes: PreferenceProviderDataChange[] = Object.keys(this.preferences)\n                    .map((key): PreferenceProviderDataChange => ({ preferenceName: key, oldValue: undefined, newValue: this.preferences[key], scope, domain }));\n                this.emitPreferencesChangedEvent(changes);\n            } catch (e) {\n                console.error('Failed to load preferences from frontend configuration.', e);\n            }\n        }\n    }\n\n    /**\n     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.overridePreferenceName`\n     */\n    overridePreferenceName(override: OverridePreferenceName): string {\n        return this.preferenceOverrideService.overridePreferenceName(override);\n    }\n\n    /**\n     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.testOverrideValue`\n     */\n    testOverrideValue(name: string, value: any): value is PreferenceSchemaProperties {\n        return this.preferenceOverrideService.testOverrideValue(name, value);\n    }\n\n    /**\n     * @deprecated since 1.13.0 use `PreferenceLanguageOverrideService.overridenPreferenceName`\n     */\n    overriddenPreferenceName(name: string): OverridePreferenceName | undefined {\n        return this.preferenceOverrideService.overriddenPreferenceName(name);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2021 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { escapeRegExpCharacters } from '../../common';\nimport { PreferenceSchemaProperties } from '../../common/preferences/preference-schema';\n\nexport interface OverridePreferenceName {\n    preferenceName: string\n    overrideIdentifier: string\n}\nexport namespace OverridePreferenceName {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    export function is(arg: any): arg is OverridePreferenceName {\n        return !!arg && typeof arg === 'object' && 'preferenceName' in arg && 'overrideIdentifier' in arg;\n    }\n}\n\nconst OVERRIDE_PROPERTY = '\\\\[(.*)\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport const getOverridePattern = (identifier: string) => `\\\\[(${identifier})\\\\]$`;\n\n@injectable()\nexport class PreferenceLanguageOverrideService {\n    protected readonly overrideIdentifiers = new Set<string>();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    testOverrideValue(name: string, value: any): value is PreferenceSchemaProperties {\n        return PreferenceSchemaProperties.is(value) && OVERRIDE_PROPERTY_PATTERN.test(name);\n    }\n\n    overridePreferenceName({ preferenceName, overrideIdentifier }: OverridePreferenceName): string {\n        return `[${overrideIdentifier}].${preferenceName}`;\n    }\n\n    overriddenPreferenceName(name: string): OverridePreferenceName | undefined {\n        const index = name.indexOf('.');\n        if (index === -1) {\n            return undefined;\n        }\n        const matches = name.substr(0, index).match(OVERRIDE_PROPERTY_PATTERN);\n        const overrideIdentifier = matches && matches[1];\n        if (!overrideIdentifier || !this.overrideIdentifiers.has(overrideIdentifier)) {\n            return undefined;\n        }\n        const preferenceName = name.substr(index + 1);\n        return { preferenceName, overrideIdentifier };\n    }\n\n    computeOverridePatternPropertiesKey(): string | undefined {\n        let param: string = '';\n        for (const overrideIdentifier of this.overrideIdentifiers) {\n            if (param.length) {\n                param += '|';\n            }\n            param += new RegExp(escapeRegExpCharacters(overrideIdentifier)).source;\n        }\n        return param.length ? getOverridePattern(param) : undefined;\n    }\n\n    *getOverridePreferenceNames(preferenceName: string): IterableIterator<string> {\n        for (const overrideIdentifier of this.overrideIdentifiers) {\n            yield this.overridePreferenceName({ preferenceName, overrideIdentifier });\n        }\n    }\n\n    /**\n     * @param overrideIdentifier\n     * @returns true if the addition caused a change, i.e. if the identifier was not already present in the set of identifiers, false otherwise.\n     */\n    addOverrideIdentifier(overrideIdentifier: string): boolean {\n        const alreadyPresent = this.overrideIdentifiers.has(overrideIdentifier);\n        if (!alreadyPresent) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        return !alreadyPresent;\n    }\n\n    /**\n     * @param overrideIdentifier\n     * @returns true if the deletion caused a change, i.e. if the identifier was present in the set, false otherwise.\n     */\n    removeOverrideIdentifier(overrideIdentifier: string): boolean {\n        return this.overrideIdentifiers.delete(overrideIdentifier);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport debounce = require('p-debounce');\nimport { injectable, inject } from 'inversify';\nimport { JSONExt, JSONValue } from '@phosphor/coreutils';\nimport URI from '../../common/uri';\nimport { Disposable, DisposableCollection, Emitter, Event } from '../../common';\nimport { Deferred } from '../../common/promise-util';\nimport { PreferenceScope } from './preference-scope';\nimport { PreferenceLanguageOverrideService } from './preference-language-override-service';\n\nexport interface PreferenceProviderDataChange {\n    readonly preferenceName: string;\n    readonly newValue?: any;\n    readonly oldValue?: any;\n    readonly scope: PreferenceScope;\n    readonly domain?: string[];\n}\n\nexport namespace PreferenceProviderDataChange {\n    export function affects(change: PreferenceProviderDataChange, resourceUri?: string): boolean {\n        const resourcePath = resourceUri && new URI(resourceUri).path;\n        const domain = change.domain;\n        return !resourcePath || !domain || domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n}\n\nexport interface PreferenceProviderDataChanges {\n    [preferenceName: string]: PreferenceProviderDataChange;\n}\n\nexport interface PreferenceResolveResult<T> {\n    configUri?: URI\n    value?: T\n}\n/**\n * The {@link PreferenceProvider} is used to store and retrieve preference values. A {@link PreferenceProvider} does not operate in a global scope but is\n * configured for one or more {@link PreferenceScope}s. The (default implementation for the) {@link PreferenceService} aggregates all {@link PreferenceProvider}s and\n * serves as a common facade for manipulating preference values.\n */\n@injectable()\nexport abstract class PreferenceProvider implements Disposable {\n\n    @inject(PreferenceLanguageOverrideService) protected readonly preferenceOverrideService: PreferenceLanguageOverrideService;\n\n    protected readonly onDidPreferencesChangedEmitter = new Emitter<PreferenceProviderDataChanges>();\n    readonly onDidPreferencesChanged: Event<PreferenceProviderDataChanges> = this.onDidPreferencesChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    protected readonly _ready = new Deferred<void>();\n\n    constructor() {\n        this.toDispose.push(this.onDidPreferencesChangedEmitter);\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    protected deferredChanges: PreferenceProviderDataChanges | undefined;\n    protected _pendingChanges: Promise<boolean> = Promise.resolve(false);\n    get pendingChanges(): Promise<boolean> {\n        return this._pendingChanges;\n    }\n\n    /**\n     * Informs the listeners that one or more preferences of this provider are changed.\n     * The listeners are able to find what was changed from the emitted event.\n     */\n    protected emitPreferencesChangedEvent(changes: PreferenceProviderDataChanges | PreferenceProviderDataChange[]): Promise<boolean> {\n        if (Array.isArray(changes)) {\n            for (const change of changes) {\n                this.mergePreferenceProviderDataChange(change);\n            }\n        } else {\n            for (const preferenceName of Object.keys(changes)) {\n                this.mergePreferenceProviderDataChange(changes[preferenceName]);\n            }\n        }\n        return this._pendingChanges = this.fireDidPreferencesChanged();\n    }\n\n    protected mergePreferenceProviderDataChange(change: PreferenceProviderDataChange): void {\n        if (!this.deferredChanges) {\n            this.deferredChanges = {};\n        }\n        const current = this.deferredChanges[change.preferenceName];\n        const { newValue, scope, domain } = change;\n        if (!current) {\n            // new\n            this.deferredChanges[change.preferenceName] = change;\n        } else if (current.oldValue === newValue) {\n            // delete\n            delete this.deferredChanges[change.preferenceName];\n        } else {\n            // update\n            Object.assign(current, { newValue, scope, domain });\n        }\n    }\n\n    protected fireDidPreferencesChanged = debounce(() => {\n        const changes = this.deferredChanges;\n        this.deferredChanges = undefined;\n        if (changes && Object.keys(changes).length) {\n            this.onDidPreferencesChangedEmitter.fire(changes);\n            return true;\n        }\n        return false;\n    }, 0);\n\n    /**\n     * Retrieve the stored value for the given preference and resource URI.\n     *\n     * @param preferenceName the preference identifier.\n     * @param resourceUri the uri of the resource for which the preference is stored. This is used to retrieve\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns the value stored for the given preference and resourceUri if it exists, otherwise `undefined`.\n     */\n    get<T>(preferenceName: string, resourceUri?: string): T | undefined {\n        return this.resolve<T>(preferenceName, resourceUri).value;\n    }\n\n    /**\n     * Resolve the value for the given preference and resource URI.\n     *\n     * @param preferenceName the preference identifier.\n     * @param resourceUri the URI of the resource for which this provider should resolve the preference. This is used to retrieve\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns an object containing the value stored for the given preference and resourceUri if it exists,\n     * otherwise `undefined`.\n     */\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const value = this.getPreferences(resourceUri)[preferenceName];\n        if (value !== undefined) {\n            return {\n                value,\n                configUri: this.getConfigUri(resourceUri)\n            };\n        }\n        return {};\n    }\n\n    abstract getPreferences(resourceUri?: string): { [p: string]: any };\n\n    /**\n     * Stores a new value for the given preference key in the provider.\n     * @param key the preference key (typically the name).\n     * @param value the new preference value.\n     * @param resourceUri the URI of the resource for which the preference is stored.\n     *\n     * @returns a promise that only resolves if all changes were delivered.\n     * If changes were made then implementation must either\n     * await on `this.emitPreferencesChangedEvent(...)` or\n     * `this.pendingChanges` if changes are fired indirectly.\n     */\n    abstract setPreference(key: string, value: any, resourceUri?: string): Promise<boolean>;\n\n    /**\n     * Resolved when the preference provider is ready to provide preferences\n     * It should be resolved by subclasses.\n     */\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    /**\n     * Retrieve the domain for this provider.\n     *\n     * @returns the domain or `undefined` if this provider is suitable for all domains.\n     */\n    getDomain(): string[] | undefined {\n        return undefined;\n    }\n\n    /**\n     * Retrieve the configuration URI for the given resource URI.\n     * @param resourceUri the uri of the resource or `undefined`.\n     * @param sectionName the section to return the URI for, e.g. `tasks` or `launch`. Defaults to settings.\n     *\n     * @returns the corresponding resource URI or `undefined` if there is no valid URI.\n     */\n    getConfigUri(resourceUri?: string, sectionName?: string): URI | undefined {\n        return undefined;\n    }\n\n    /**\n     * Retrieves the first valid configuration URI contained by the given resource.\n     * @param resourceUri the uri of the container resource or `undefined`.\n     *\n     * @returns the first valid configuration URI contained by the given resource `undefined`\n     * if there is no valid configuration URI at all.\n     */\n    getContainingConfigUri?(resourceUri?: string, sectionName?: string): URI | undefined;\n\n    static merge(source: JSONValue | undefined, target: JSONValue): JSONValue {\n        if (source === undefined || !JSONExt.isObject(source)) {\n            return JSONExt.deepCopy(target);\n        }\n        if (JSONExt.isPrimitive(target)) {\n            return {};\n        }\n        for (const key of Object.keys(target)) {\n            const value = (target as any)[key];\n            if (key in source) {\n                if (JSONExt.isObject(source[key]) && JSONExt.isObject(value)) {\n                    this.merge(source[key], value);\n                    continue;\n                }\n            }\n            source[key] = JSONExt.deepCopy(value);\n        }\n        return source;\n    }\n\n    /**\n     * Handles deep equality with the possibility of `undefined`\n     */\n    static deepEqual(a: JSONValue | undefined, b: JSONValue | undefined): boolean {\n        if (a === b) { return true; }\n        if (a === undefined || b === undefined) { return false; }\n        return JSONExt.deepEqual(a, b);\n    }\n\n    protected getParsedContent(jsonData: any): { [key: string]: any } {\n        const preferences: { [key: string]: any } = {};\n        if (typeof jsonData !== 'object') {\n            return preferences;\n        }\n        // eslint-disable-next-line guard-for-in\n        for (const preferenceName in jsonData) {\n            const preferenceValue = jsonData[preferenceName];\n            if (this.preferenceOverrideService.testOverrideValue(preferenceName, preferenceValue)) {\n                // eslint-disable-next-line guard-for-in\n                for (const overriddenPreferenceName in preferenceValue) {\n                    const overriddenValue = preferenceValue[overriddenPreferenceName];\n                    preferences[`${preferenceName}.${overriddenPreferenceName}`] = overriddenValue;\n                }\n            } else {\n                preferences[preferenceName] = preferenceValue;\n            }\n        }\n        return preferences;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Disposable, Event, MaybePromise } from '../../common';\nimport { PreferenceService } from './preference-service';\nimport { PreferenceSchema } from './preference-contribution';\nimport { PreferenceScope } from './preference-scope';\nimport { OverridePreferenceName } from './preference-language-override-service';\n\n/**\n * It is worth explaining the type for `PreferenceChangeEvent`:\n *\n * // Given T:\n * type T = { a: string, b: number }\n *\n * // We construct a new type such as:\n * type U = {\n *     a: {\n *         preferenceName: 'a'\n *         newValue: string\n *         oldValue?: string\n *     }\n *     b: {\n *        preferenceName: 'b'\n *        newValue: number\n *        oldValue?: number\n *     }\n * }\n *\n * // Then we get the union of all values of U by selecting by `keyof T`:\n * type V = U[keyof T]\n *\n * // Implementation:\n * type PreferenceChangeEvent<T> = {\n *     // Create a mapping where each key is a key from T,\n *     // -? normalizes optional typings to avoid getting\n *     // `undefined` as part of the final union:\n *     [K in keyof T]-?: {\n *         // In this object, K will take the value of each\n *         // independent key from T:\n *         preferenceName: K\n *         newValue: T[K]\n *         oldValue?: T[K]\n *     // Finally we create the union by doing so:\n *     }[keyof T]\n * }\n */\n\n/**\n * Union of all possible key/value pairs for a type `T`\n */\nexport type PreferenceChangeEvent<T> = {\n    affects(resourceUri?: string, overrideIdentifier?: string): boolean;\n} & {\n    [K in keyof T]-?: {\n        readonly preferenceName: K;\n        readonly newValue: T[K];\n        /**\n         * Undefined if the preference is set for the first time.\n         */\n        // TODO: Use the default value instead of undefined?\n        readonly oldValue?: T[K];\n    }\n}[keyof T];\n\nexport interface PreferenceEventEmitter<T> {\n    readonly onPreferenceChanged: Event<PreferenceChangeEvent<T>>;\n    readonly ready: Promise<void>;\n}\n\n/**\n * Generic interface to declare a typesafe get function based on the given\n * configuration type.\n *\n * ### Illustration\n *\n * ```ts\n * interface PreferenceConfiguration {\n *  'myext.enabled': boolean,\n * }\n * const enabled : boolean = prefs.get('myext.enabled'); // valid\n * const debug : string = prefs.get('myext.enabled'); // invalid\n * prefs.get('foobar'); // invalid\n * ```\n */\nexport interface PreferenceRetrieval<T> {\n    get<K extends keyof T>(preferenceName: K | {\n        preferenceName: K,\n        overrideIdentifier?: string\n    }, defaultValue?: T[K], resourceUri?: string): T[K];\n}\n\n/**\n * Typesafe schema-based preferences utility based on the {@link PreferenceService}.\n * Can be used to get preferences as well as listen to preference changes.\n *\n * See {@link createPreferenceProxy} on how to instantiate preference proxies.\n *\n * ### Example usage\n *\n * ```ts\n * preferences.onPreferenceChanged(({ preferenceName, newValue }) => { ... });\n * const enabled = preferences['myext.enabled'];\n * ```\n */\nexport type PreferenceProxy<T> = Readonly<T> & Disposable & PreferenceEventEmitter<T> & PreferenceRetrieval<T>;\n/**\n * Proxy configuration parameters.\n */\nexport interface PreferenceProxyOptions {\n    /**\n     * Prefix which is transparently added to all preference identifiers.\n     */\n    prefix?: string;\n    /**\n     * The default resourceUri to use if none was specified when calling \"set\" or \"get\".\n     */\n    resourceUri?: string;\n    /**\n     * The overrideIdentifier to use with the underlying preferenceService.\n     * Useful to potentially override existing values while keeping both values in store.\n     *\n     * For example to store different editor settings, e.g. \"[markdown].editor.autoIndent\",\n     * \"[json].editor.autoIndent\" and \"editor.autoIndent\"\n     */\n    overrideIdentifier?: string;\n    /**\n     * Indicates whether '.' in schema properties shall be interpreted as regular names (flat),\n     * as declaring nested objects (deep) or both. Default is flat.\n     *\n     * When 'deep' or 'both' is given, nested preference proxies can be retrieved.\n     */\n    style?: 'flat' | 'deep' | 'both';\n}\n\n/**\n * Creates a preference proxy for typesafe preference handling.\n *\n * @param preferences the underlying preference service to use for preference handling.\n * @param promisedSchema the JSON Schema which describes which preferences are available including types and descriptions. Can be a promise.\n * @param options configuration options.\n *\n * @returns the created preference proxy.\n *\n * ### Usage\n *\n *  1. Create JSON Schema specifying your preferences\n *  2. Create Configuration type based on the JSON Schema\n *  3. Bind the return value of `createPreferenceProxy` to make your preferences available wherever needed.\n *\n * See {@link CorePreferences} for an example.\n *\n * Note that if `schema` is a Promise, most actions will be no-ops until the promise is resolved.\n */\nexport function createPreferenceProxy<T>(preferences: PreferenceService, promisedSchema: MaybePromise<PreferenceSchema>, options?: PreferenceProxyOptions): PreferenceProxy<T> {\n    const opts = options || {};\n    const prefix = opts.prefix || '';\n    const style = opts.style || 'flat';\n    const isDeep = style === 'deep' || style === 'both';\n    const isFlat = style === 'both' || style === 'flat';\n    let schema: PreferenceSchema | undefined;\n    if (PreferenceSchema.is(promisedSchema)) {\n        schema = promisedSchema;\n    } else {\n        promisedSchema.then(s => schema = s);\n    }\n    const onPreferenceChanged = (listener: (e: PreferenceChangeEvent<T>) => any, thisArgs?: any, disposables?: Disposable[]) => preferences.onPreferencesChanged(changes => {\n        if (schema) {\n            for (const key of Object.keys(changes)) {\n                const e = changes[key];\n                const overridden = preferences.overriddenPreferenceName(e.preferenceName);\n                const preferenceName: any = overridden ? overridden.preferenceName : e.preferenceName;\n                if (preferenceName.startsWith(prefix) && (!overridden || !opts.overrideIdentifier || overridden.overrideIdentifier === opts.overrideIdentifier)) {\n                    if (schema.properties[preferenceName]) {\n                        const { newValue, oldValue } = e;\n                        listener({\n                            newValue, oldValue, preferenceName,\n                            affects: (resourceUri, overrideIdentifier) => {\n                                if (overrideIdentifier !== undefined) {\n                                    if (overridden && overridden.overrideIdentifier !== overrideIdentifier) {\n                                        return false;\n                                    }\n                                }\n                                return e.affects(resourceUri);\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    }, thisArgs, disposables);\n\n    const unsupportedOperation = (_: any, __: string) => {\n        throw new Error('Unsupported operation');\n    };\n\n    const getValue: PreferenceRetrieval<any>['get'] = (arg, defaultValue, resourceUri) => {\n        const preferenceName = OverridePreferenceName.is(arg) ?\n            preferences.overridePreferenceName(arg) :\n            <string>arg;\n        return preferences.get(preferenceName, defaultValue, resourceUri || opts.resourceUri);\n    };\n\n    const ownKeys: () => string[] = () => {\n        const properties = [];\n        if (schema) {\n            for (const p of Object.keys(schema.properties)) {\n                if (p.startsWith(prefix)) {\n                    const idx = p.indexOf('.', prefix.length);\n                    if (idx !== -1 && isDeep) {\n                        const pre = p.substr(prefix.length, idx - prefix.length);\n                        if (properties.indexOf(pre) === -1) {\n                            properties.push(pre);\n                        }\n                    }\n                    const prop = p.substr(prefix.length);\n                    if (isFlat || prop.indexOf('.') === -1) {\n                        properties.push(prop);\n                    }\n                }\n            }\n        }\n        return properties;\n    };\n\n    const set: (target: any, prop: string, value: any, receiver: any) => boolean = (_, property: string | symbol | number, value: any) => {\n        if (typeof property !== 'string') {\n            throw new Error(`unexpected property: ${String(property)}`);\n        }\n        if (style === 'deep' && property.indexOf('.') !== -1) {\n            return false;\n        }\n        if (schema) {\n            const fullProperty = prefix ? prefix + property : property;\n            if (schema.properties[fullProperty]) {\n                preferences.set(fullProperty, value, PreferenceScope.Default);\n                return true;\n            }\n            const newPrefix = fullProperty + '.';\n            for (const p of Object.keys(schema.properties)) {\n                if (p.startsWith(newPrefix)) {\n                    const subProxy: { [k: string]: any } = createPreferenceProxy(preferences, schema, {\n                        prefix: newPrefix,\n                        resourceUri: opts.resourceUri,\n                        overrideIdentifier: opts.overrideIdentifier,\n                        style\n                    });\n                    for (const k of Object.keys(value)) {\n                        subProxy[k] = value[k];\n                    }\n                }\n            }\n        }\n        return false;\n    };\n\n    const get: (target: any, prop: string) => any = (_, property: string | symbol | number) => {\n        if (typeof property !== 'string') {\n            throw new Error(`unexpected property: ${String(property)}`);\n        }\n        const fullProperty = prefix ? prefix + property : property;\n        if (schema) {\n            if (isFlat || property.indexOf('.') === -1) {\n                if (schema.properties[fullProperty]) {\n                    let value;\n                    if (opts.overrideIdentifier) {\n                        value = preferences.get(preferences.overridePreferenceName({\n                            overrideIdentifier: opts.overrideIdentifier,\n                            preferenceName: fullProperty\n                        }), undefined, opts.resourceUri);\n                    }\n                    if (value === undefined) {\n                        value = preferences.get(fullProperty, undefined, opts.resourceUri);\n                    }\n                    return value;\n                }\n            }\n        }\n        if (property === 'onPreferenceChanged') {\n            return onPreferenceChanged;\n        }\n        if (property === 'dispose') {\n            return () => { /* do nothing */ };\n        }\n        if (property === 'ready') {\n            return preferences.ready;\n        }\n        if (property === 'get') {\n            return getValue;\n        }\n        if (property === 'toJSON') {\n            return toJSON();\n        }\n        if (schema && isDeep) {\n            const newPrefix = fullProperty + '.';\n            for (const p of Object.keys(schema.properties)) {\n                if (p.startsWith(newPrefix)) {\n                    return createPreferenceProxy(preferences, schema, { prefix: newPrefix, resourceUri: opts.resourceUri, overrideIdentifier: opts.overrideIdentifier, style });\n                }\n            }\n\n            let value;\n            let parentSegment = fullProperty;\n            const segments = [];\n            do {\n                const index = parentSegment.lastIndexOf('.');\n                segments.push(parentSegment.substring(index + 1));\n                parentSegment = parentSegment.substring(0, index);\n                if (parentSegment in schema.properties) {\n                    value = get(_, parentSegment);\n                }\n            } while (parentSegment && value === undefined);\n\n            let segment;\n            while (typeof value === 'object' && (segment = segments.pop())) {\n                value = value[segment];\n            }\n            return segments.length ? undefined : value;\n        }\n        return undefined;\n    };\n\n    const toJSON = () => {\n        const result: any = {};\n        for (const k of ownKeys()) {\n            result[k] = get(undefined, k);\n        }\n        return result;\n    };\n\n    return new Proxy({}, {\n        get,\n        ownKeys,\n        getOwnPropertyDescriptor: (_, property: string) => {\n            if (ownKeys().indexOf(property) !== -1) {\n                return {\n                    enumerable: true,\n                    configurable: true\n                };\n            }\n            return {};\n        },\n        set,\n        deleteProperty: unsupportedOperation,\n        defineProperty: unsupportedOperation\n    });\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { PreferenceScope } from '../../common/preferences/preference-scope';\nexport { PreferenceScope };\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport { Event, Emitter, DisposableCollection, Disposable, deepFreeze, unreachable } from '../../common';\nimport { Deferred } from '../../common/promise-util';\nimport { PreferenceProvider, PreferenceProviderDataChange, PreferenceProviderDataChanges, PreferenceResolveResult } from './preference-provider';\nimport { PreferenceSchemaProvider } from './preference-contribution';\nimport URI from '../../common/uri';\nimport { PreferenceScope } from './preference-scope';\nimport { PreferenceConfigurations } from './preference-configurations';\nimport { JSONExt, JSONValue } from '@phosphor/coreutils/lib/json';\nimport { OverridePreferenceName, PreferenceLanguageOverrideService } from './preference-language-override-service';\n\nexport { PreferenceScope };\n\n/**\n * Representation of a preference change. A preference value can be set to `undefined` for a specific scope.\n * This means that the value from a more general scope will be used.\n */\nexport interface PreferenceChange {\n    /**\n     * The name of the changed preference.\n     */\n    readonly preferenceName: string;\n    /**\n     * The new value of the changed preference.\n     */\n    readonly newValue?: any;\n    /**\n     * The old value of the changed preference.\n     */\n    readonly oldValue?: any;\n    /**\n     * The {@link PreferenceScope} of the changed preference.\n     */\n    readonly scope: PreferenceScope;\n    /**\n     * Tests wether the given resource is affected by the preference change.\n     * @param resourceUri the uri of the resource to test.\n     */\n    affects(resourceUri?: string): boolean;\n}\n\nexport class PreferenceChangeImpl implements PreferenceChange {\n    constructor(\n        private change: PreferenceProviderDataChange\n    ) { }\n\n    get preferenceName(): string {\n        return this.change.preferenceName;\n    }\n    get newValue(): string {\n        return this.change.newValue;\n    }\n    get oldValue(): string {\n        return this.change.oldValue;\n    }\n    get scope(): PreferenceScope {\n        return this.change.scope;\n    }\n\n    // TODO add tests\n    affects(resourceUri?: string): boolean {\n        const resourcePath = resourceUri && new URI(resourceUri).path;\n        const domain = this.change.domain;\n        return !resourcePath || !domain || domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n}\n/**\n * A key-value storage for {@link PreferenceChange}s. Used to aggregate multiple simultaneous preference changes.\n */\nexport interface PreferenceChanges {\n    [preferenceName: string]: PreferenceChange\n}\n\nexport const PreferenceService = Symbol('PreferenceService');\n/**\n * Service to manage preferences including, among others, getting and setting preference values as well\n * as listening to preference changes.\n *\n * Depending on your use case you might also want to look at {@link createPreferenceProxy} with which\n * you can easily create a typesafe schema-based interface for your preferences. Internally the proxy\n * uses the PreferenceService so both approaches are compatible.\n */\nexport interface PreferenceService extends Disposable {\n    /**\n     * Promise indicating whether the service successfully initialized.\n     */\n    readonly ready: Promise<void>;\n    /**\n     * Retrieve the stored value for the given preference.\n     *\n     * @param preferenceName the preference identifier.\n     *\n     * @returns the value stored for the given preference when it exists, `undefined` otherwise.\n     */\n    get<T>(preferenceName: string): T | undefined;\n    /**\n     * Retrieve the stored value for the given preference.\n     *\n     * @param preferenceName the preference identifier.\n     * @param defaultValue the value to return when no value for the given preference is stored.\n     *\n     * @returns the value stored for the given preference when it exists, otherwise the given default value.\n     */\n    get<T>(preferenceName: string, defaultValue: T): T;\n    /**\n     * Retrieve the stored value for the given preference and resourceUri.\n     *\n     * @param preferenceName the preference identifier.\n     * @param defaultValue the value to return when no value for the given preference is stored.\n     * @param resourceUri the uri of the resource for which the preference is stored. This used to retrieve\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns the value stored for the given preference and resourceUri when it exists, otherwise the given\n     * default value.\n     */\n    get<T>(preferenceName: string, defaultValue: T, resourceUri?: string): T;\n    /**\n     * Retrieve the stored value for the given preference and resourceUri.\n     *\n     * @param preferenceName the preference identifier.\n     * @param defaultValue the value to return when no value for the given preference is stored.\n     * @param resourceUri the uri of the resource for which the preference is stored. This used to retrieve\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns the value stored for the given preference and resourceUri when it exists, otherwise the given\n     * default value.\n     */\n    get<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): T | undefined;\n    /**\n     * Sets the given preference to the given value.\n     *\n     * @param preferenceName the preference identifier.\n     * @param value the new value of the preference.\n     * @param scope the scope for which the value shall be set, i.e. user, workspace etc.\n     * When the folder scope is specified a resourceUri must be provided.\n     * @param resourceUri the uri of the resource for which the preference is stored. This used to store\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns a promise which resolves to `undefined` when setting the preference was successful. Otherwise it rejects\n     * with an error.\n     */\n    set(preferenceName: string, value: any, scope?: PreferenceScope, resourceUri?: string): Promise<void>;\n\n    /**\n     * Determines and applies the changes necessary to apply `value` to either the `resourceUri` supplied or the active session.\n     * If there is no setting for the `preferenceName`, the change will be applied in user scope.\n     * If there is a setting conflicting with the specified `value`, the change will be applied in the most specific scope with a conflicting value.\n     *\n     * @param preferenceName the identifier of the preference to modify.\n     * @param value the value to which to set the preference. `undefined` will reset the preference to its default value.\n     * @param resourceUri the uri of the resource to which the change is to apply. If none is provided, folder scope will be ignored.\n     */\n    updateValue(preferenceName: string, value: any, resourceUri?: string): Promise<void>\n\n    /**\n     * Registers a callback which will be called whenever a preference is changed.\n     */\n    onPreferenceChanged: Event<PreferenceChange>;\n    /**\n     * Registers a callback which will be called whenever one or more preferences are changed.\n     */\n    onPreferencesChanged: Event<PreferenceChanges>;\n    /**\n     * Retrieve the stored value for the given preference and resourceUri in all available scopes.\n     *\n     * @param preferenceName the preference identifier.\n     * @param resourceUri the uri of the resource for which the preference is stored.\n     *\n     * @return an object containing the value of the given preference for all scopes.\n     */\n    inspect<T extends JSONValue>(preferenceName: string, resourceUri?: string): PreferenceInspection<T> | undefined;\n    /**\n     * Returns a new preference identifier based on the given OverridePreferenceName.\n     *\n     * @param options the override specification.\n     *\n     * @returns the calculated string based on the given OverridePreferenceName.\n     */\n    overridePreferenceName(options: OverridePreferenceName): string;\n    /**\n     * Tries to split the given preference identifier into the original OverridePreferenceName attributes\n     * with which this identifier was created. Returns `undefined` if this is not possible, for example\n     * when the given preference identifier was not generated by `overridePreferenceName`.\n     *\n     * This method is checked when resolving preferences. Therefore together with \"overridePreferenceName\"\n     * this can be used to handle specialized preferences, e.g. \"[markdown].editor.autoIndent\" and \"editor.autoIndent\".\n     *\n     * @param preferenceName the preferenceName which might have been created via {@link PreferenceService.overridePreferenceName}.\n     *\n     * @returns the OverridePreferenceName which was used to create the given `preferenceName` if this was the case,\n     * `undefined` otherwise.\n     */\n    overriddenPreferenceName(preferenceName: string): OverridePreferenceName | undefined;\n    /**\n     * Retrieve the stored value for the given preference and resourceUri.\n     *\n     * @param preferenceName the preference identifier.\n     * @param defaultValue the value to return when no value for the given preference is stored.\n     * @param resourceUri the uri of the resource for which the preference is stored. This used to retrieve\n     * a potentially different value for the same preference for different resources, for example `files.encoding`.\n     *\n     * @returns an object containing the value stored for the given preference and resourceUri when it exists,\n     * otherwise the given default value. If determinable the object will also contain the uri of the configuration\n     * resource in which the preference was stored.\n     */\n    resolve<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): PreferenceResolveResult<T>;\n    /**\n     * Returns the uri of the configuration resource for the given scope and optional resource uri.\n     *\n     * @param scope the PreferenceScope to query for.\n     * @param resourceUri the optional uri of the resource-specific preference handling\n     * @param sectionName the optional preference section to query for.\n     *\n     * @returns the uri of the configuration resource for the given scope and optional resource uri it it exists,\n     * `undefined` otherwise.\n     */\n    getConfigUri(scope: PreferenceScope, resourceUri?: string, sectionName?: string): URI | undefined;\n}\n\n/**\n * Return type of the {@link PreferenceService.inspect} call.\n */\nexport interface PreferenceInspection<T = JSONValue> {\n    /**\n     * The preference identifier.\n     */\n    preferenceName: string,\n    /**\n     * Value in default scope.\n     */\n    defaultValue: T | undefined,\n    /**\n     * Value in user scope.\n     */\n    globalValue: T | undefined,\n    /**\n     * Value in workspace scope.\n     */\n    workspaceValue: T | undefined,\n    /**\n     * Value in folder scope.\n     */\n    workspaceFolderValue: T | undefined,\n    /**\n     * The value that is active, i.e. the value set in the lowest scope available.\n     */\n    value: T | undefined;\n}\n\nexport type PreferenceInspectionScope = keyof Omit<PreferenceInspection<unknown>, 'preferenceName'>;\n\n/**\n * We cannot load providers directly in the case if they depend on `PreferenceService` somehow.\n * It allows to load them lazily after DI is configured.\n */\nexport const PreferenceProviderProvider = Symbol('PreferenceProviderProvider');\nexport type PreferenceProviderProvider = (scope: PreferenceScope, uri?: URI) => PreferenceProvider;\n\n@injectable()\nexport class PreferenceServiceImpl implements PreferenceService {\n\n    protected readonly onPreferenceChangedEmitter = new Emitter<PreferenceChange>();\n    readonly onPreferenceChanged = this.onPreferenceChangedEmitter.event;\n\n    protected readonly onPreferencesChangedEmitter = new Emitter<PreferenceChanges>();\n    readonly onPreferencesChanged = this.onPreferencesChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection(this.onPreferenceChangedEmitter, this.onPreferencesChangedEmitter);\n\n    @inject(PreferenceSchemaProvider)\n    protected readonly schema: PreferenceSchemaProvider;\n\n    @inject(PreferenceProviderProvider)\n    protected readonly providerProvider: PreferenceProviderProvider;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    @inject(PreferenceLanguageOverrideService)\n    protected readonly preferenceOverrideService: PreferenceLanguageOverrideService;\n\n    protected readonly preferenceProviders = new Map<PreferenceScope, PreferenceProvider>();\n\n    protected async initializeProviders(): Promise<void> {\n        try {\n            for (const scope of PreferenceScope.getScopes()) {\n                const provider = this.providerProvider(scope);\n                this.preferenceProviders.set(scope, provider);\n                this.toDispose.push(provider.onDidPreferencesChanged(changes =>\n                    this.reconcilePreferences(changes)\n                ));\n                await provider.ready;\n            }\n            this._ready.resolve();\n        } catch (e) {\n            this._ready.reject(e);\n        }\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.toDispose.push(Disposable.create(() => this._ready.reject(new Error('preference service is disposed'))));\n        this.initializeProviders();\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    protected readonly _ready = new Deferred<void>();\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    protected reconcilePreferences(changes: PreferenceProviderDataChanges): void {\n        const changesToEmit: PreferenceChanges = {};\n        const acceptChange = (change: PreferenceProviderDataChange) =>\n            this.getAffectedPreferenceNames(change, preferenceName =>\n                changesToEmit[preferenceName] = new PreferenceChangeImpl({ ...change, preferenceName })\n            );\n\n        for (const preferenceName of Object.keys(changes)) {\n            let change = changes[preferenceName];\n            if (change.newValue === undefined) {\n                const overridden = this.overriddenPreferenceName(change.preferenceName);\n                if (overridden) {\n                    change = {\n                        ...change, newValue: this.doGet(overridden.preferenceName)\n                    };\n                }\n            }\n            if (this.schema.isValidInScope(preferenceName, PreferenceScope.Folder)) {\n                acceptChange(change);\n                continue;\n            }\n            for (const scope of PreferenceScope.getReversedScopes()) {\n                if (this.schema.isValidInScope(preferenceName, scope)) {\n                    const provider = this.getProvider(scope);\n                    if (provider) {\n                        const value = provider.get(preferenceName);\n                        if (scope > change.scope && value !== undefined) {\n                            // preference defined in a more specific scope\n                            break;\n                        } else if (scope === change.scope && change.newValue !== undefined) {\n                            // preference is changed into something other than `undefined`\n                            acceptChange(change);\n                        } else if (scope < change.scope && change.newValue === undefined && value !== undefined) {\n                            // preference is changed to `undefined`, use the value from a more general scope\n                            change = {\n                                ...change,\n                                newValue: value,\n                                scope\n                            };\n                            acceptChange(change);\n                        }\n                    }\n                } else if (change.newValue === undefined && change.scope === PreferenceScope.Default) {\n                    // preference is removed\n                    acceptChange(change);\n                    break;\n                }\n            }\n        }\n\n        // emit the changes\n        const changedPreferenceNames = Object.keys(changesToEmit);\n        if (changedPreferenceNames.length > 0) {\n            this.onPreferencesChangedEmitter.fire(changesToEmit);\n        }\n        changedPreferenceNames.forEach(preferenceName => this.onPreferenceChangedEmitter.fire(changesToEmit[preferenceName]));\n    }\n    protected getAffectedPreferenceNames(change: PreferenceProviderDataChange, accept: (affectedPreferenceName: string) => void): void {\n        accept(change.preferenceName);\n        for (const overridePreferenceName of this.schema.getOverridePreferenceNames(change.preferenceName)) {\n            if (!this.doHas(overridePreferenceName)) {\n                accept(overridePreferenceName);\n            }\n        }\n    }\n\n    protected getProvider(scope: PreferenceScope): PreferenceProvider | undefined {\n        return this.preferenceProviders.get(scope);\n    }\n\n    has(preferenceName: string, resourceUri?: string): boolean {\n        return this.get(preferenceName, undefined, resourceUri) !== undefined;\n    }\n\n    get<T>(preferenceName: string): T | undefined;\n    get<T>(preferenceName: string, defaultValue: T): T;\n    get<T>(preferenceName: string, defaultValue: T, resourceUri: string): T;\n    get<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): T | undefined;\n    get<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): T | undefined {\n        return this.resolve<T>(preferenceName, defaultValue, resourceUri).value;\n    }\n\n    resolve<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): PreferenceResolveResult<T> {\n        const { value, configUri } = this.doResolve(preferenceName, defaultValue, resourceUri);\n        if (value === undefined) {\n            const overridden = this.overriddenPreferenceName(preferenceName);\n            if (overridden) {\n                return this.doResolve(overridden.preferenceName, defaultValue, resourceUri);\n            }\n        }\n        return { value, configUri };\n    }\n\n    async set(preferenceName: string, value: any, scope: PreferenceScope | undefined, resourceUri?: string): Promise<void> {\n        const resolvedScope = scope ?? (!resourceUri ? PreferenceScope.Workspace : PreferenceScope.Folder);\n        if (resolvedScope === PreferenceScope.Folder && !resourceUri) {\n            throw new Error('Unable to write to Folder Settings because no resource is provided.');\n        }\n        const provider = this.getProvider(resolvedScope);\n        if (provider && await provider.setPreference(preferenceName, value, resourceUri)) {\n            return;\n        }\n        throw new Error(`Unable to write to ${PreferenceScope[resolvedScope]} Settings.`);\n    }\n\n    getBoolean(preferenceName: string): boolean | undefined;\n    getBoolean(preferenceName: string, defaultValue: boolean): boolean;\n    getBoolean(preferenceName: string, defaultValue: boolean, resourceUri: string): boolean;\n    getBoolean(preferenceName: string, defaultValue?: boolean, resourceUri?: string): boolean | undefined {\n        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);\n        // eslint-disable-next-line no-null/no-null\n        return value !== null && value !== undefined ? !!value : defaultValue;\n    }\n\n    getString(preferenceName: string): string | undefined;\n    getString(preferenceName: string, defaultValue: string): string;\n    getString(preferenceName: string, defaultValue: string, resourceUri: string): string;\n    getString(preferenceName: string, defaultValue?: string, resourceUri?: string): string | undefined {\n        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);\n        // eslint-disable-next-line no-null/no-null\n        if (value === null || value === undefined) {\n            return defaultValue;\n        }\n        return value.toString();\n    }\n\n    getNumber(preferenceName: string): number | undefined;\n    getNumber(preferenceName: string, defaultValue: number): number;\n    getNumber(preferenceName: string, defaultValue: number, resourceUri: string): number;\n    getNumber(preferenceName: string, defaultValue?: number, resourceUri?: string): number | undefined {\n        const value = resourceUri ? this.get(preferenceName, defaultValue, resourceUri) : this.get(preferenceName, defaultValue);\n        // eslint-disable-next-line no-null/no-null\n        if (value === null || value === undefined) {\n            return defaultValue;\n        }\n        if (typeof value === 'number') {\n            return value;\n        }\n        return Number(value);\n    }\n\n    inspect<T>(preferenceName: string, resourceUri?: string): PreferenceInspection<T> | undefined {\n        const defaultValue = this.inspectInScope<T>(preferenceName, PreferenceScope.Default, resourceUri);\n        const globalValue = this.inspectInScope<T>(preferenceName, PreferenceScope.User, resourceUri);\n        const workspaceValue = this.inspectInScope<T>(preferenceName, PreferenceScope.Workspace, resourceUri);\n        const workspaceFolderValue = this.inspectInScope<T>(preferenceName, PreferenceScope.Folder, resourceUri);\n\n        const valueApplied = workspaceFolderValue ?? workspaceValue ?? globalValue ?? defaultValue;\n\n        return { preferenceName, defaultValue, globalValue, workspaceValue, workspaceFolderValue, value: valueApplied };\n    }\n\n    protected inspectInScope<T>(preferenceName: string, scope: PreferenceScope, resourceUri?: string): T | undefined {\n        const value = this.doInspectInScope<T>(preferenceName, scope, resourceUri);\n        if (value === undefined) {\n            const overridden = this.overriddenPreferenceName(preferenceName);\n            if (overridden) {\n                return this.doInspectInScope(overridden.preferenceName, scope, resourceUri);\n            }\n        }\n        return value;\n    }\n\n    protected getScopedValueFromInspection<T>(inspection: PreferenceInspection<T>, scope: PreferenceScope): T | undefined {\n        switch (scope) {\n            case PreferenceScope.Default:\n                return inspection.defaultValue;\n            case PreferenceScope.User:\n                return inspection.globalValue;\n            case PreferenceScope.Workspace:\n                return inspection.workspaceValue;\n            case PreferenceScope.Folder:\n                return inspection.workspaceFolderValue;\n        }\n        unreachable(scope, 'Not all PreferenceScope enum variants handled.');\n    }\n\n    async updateValue(preferenceName: string, value: any, resourceUri?: string): Promise<void> {\n        const inspection = this.inspect<any>(preferenceName, resourceUri);\n        if (inspection) {\n            const scopesToChange = this.getScopesToChange(inspection, value);\n            const isDeletion = value === undefined\n                || (scopesToChange.length === 1 && scopesToChange[0] === PreferenceScope.User && JSONExt.deepEqual(value, inspection.defaultValue));\n            const effectiveValue = isDeletion ? undefined : value;\n            await Promise.all(scopesToChange.map(scope => this.set(preferenceName, effectiveValue, scope, resourceUri)));\n        }\n    }\n\n    protected getScopesToChange(inspection: PreferenceInspection<any>, intendedValue: any): PreferenceScope[] {\n        if (JSONExt.deepEqual(inspection.value, intendedValue)) {\n            return [];\n        }\n\n        // Scopes in ascending order of scope breadth.\n        const allScopes = PreferenceScope.getReversedScopes();\n        // Get rid of Default scope. We can't set anything there.\n        allScopes.pop();\n\n        const isScopeDefined = (scope: PreferenceScope) => this.getScopedValueFromInspection(inspection, scope) !== undefined;\n\n        if (intendedValue === undefined) {\n            return allScopes.filter(isScopeDefined);\n        }\n\n        return [allScopes.find(isScopeDefined) ?? PreferenceScope.User];\n    }\n\n    overridePreferenceName(options: OverridePreferenceName): string {\n        return this.preferenceOverrideService.overridePreferenceName(options);\n    }\n    overriddenPreferenceName(preferenceName: string): OverridePreferenceName | undefined {\n        return this.preferenceOverrideService.overriddenPreferenceName(preferenceName);\n    }\n\n    protected doHas(preferenceName: string, resourceUri?: string): boolean {\n        return this.doGet(preferenceName, undefined, resourceUri) !== undefined;\n    }\n    protected doInspectInScope<T>(preferenceName: string, scope: PreferenceScope, resourceUri?: string): T | undefined {\n        const provider = this.getProvider(scope);\n        return provider && provider.get<T>(preferenceName, resourceUri);\n    }\n    protected doGet<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): T | undefined {\n        return this.doResolve(preferenceName, defaultValue, resourceUri).value;\n    }\n    protected doResolve<T>(preferenceName: string, defaultValue?: T, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        for (const scope of PreferenceScope.getScopes()) {\n            if (this.schema.isValidInScope(preferenceName, scope)) {\n                const provider = this.getProvider(scope);\n                if (provider) {\n                    const { configUri, value } = provider.resolve<T>(preferenceName, resourceUri);\n                    if (value !== undefined) {\n                        result.configUri = configUri;\n                        result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n                    }\n                }\n            }\n        }\n        return {\n            configUri: result.configUri,\n            value: result.value !== undefined ? deepFreeze(result.value) : defaultValue\n        };\n    }\n\n    getConfigUri(scope: PreferenceScope, resourceUri?: string, sectionName: string = this.configurations.getConfigName()): URI | undefined {\n        const provider = this.getProvider(scope);\n        if (!provider || !this.configurations.isAnyConfig(sectionName)) {\n            return undefined;\n        }\n        const configUri = provider.getConfigUri(resourceUri, sectionName);\n        if (configUri) {\n            return configUri;\n        }\n        return provider.getContainingConfigUri && provider.getContainingConfigUri(resourceUri, sectionName);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Xuye Cai and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n// copied from vscode: https://github.com/microsoft/vscode/blob/master/src/vs/workbench/services/textfile/common/textfiles.ts\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport const SUPPORTED_ENCODINGS: { [encoding: string]: { labelLong: string; labelShort: string; order: number; encodeOnly?: boolean; alias?: string } } = {\n    utf8: {\n        labelLong: 'UTF-8',\n        labelShort: 'UTF-8',\n        order: 1,\n        alias: 'utf8bom'\n    },\n    utf8bom: {\n        labelLong: 'UTF-8 with BOM',\n        labelShort: 'UTF-8 with BOM',\n        encodeOnly: true,\n        order: 2,\n        alias: 'utf8'\n    },\n    utf16le: {\n        labelLong: 'UTF-16 LE',\n        labelShort: 'UTF-16 LE',\n        order: 3\n    },\n    utf16be: {\n        labelLong: 'UTF-16 BE',\n        labelShort: 'UTF-16 BE',\n        order: 4\n    },\n    windows1252: {\n        labelLong: 'Western (Windows 1252)',\n        labelShort: 'Windows 1252',\n        order: 5\n    },\n    iso88591: {\n        labelLong: 'Western (ISO 8859-1)',\n        labelShort: 'ISO 8859-1',\n        order: 6\n    },\n    iso88593: {\n        labelLong: 'Western (ISO 8859-3)',\n        labelShort: 'ISO 8859-3',\n        order: 7\n    },\n    iso885915: {\n        labelLong: 'Western (ISO 8859-15)',\n        labelShort: 'ISO 8859-15',\n        order: 8\n    },\n    macroman: {\n        labelLong: 'Western (Mac Roman)',\n        labelShort: 'Mac Roman',\n        order: 9\n    },\n    cp437: {\n        labelLong: 'DOS (CP 437)',\n        labelShort: 'CP437',\n        order: 10\n    },\n    windows1256: {\n        labelLong: 'Arabic (Windows 1256)',\n        labelShort: 'Windows 1256',\n        order: 11\n    },\n    iso88596: {\n        labelLong: 'Arabic (ISO 8859-6)',\n        labelShort: 'ISO 8859-6',\n        order: 12\n    },\n    windows1257: {\n        labelLong: 'Baltic (Windows 1257)',\n        labelShort: 'Windows 1257',\n        order: 13\n    },\n    iso88594: {\n        labelLong: 'Baltic (ISO 8859-4)',\n        labelShort: 'ISO 8859-4',\n        order: 14\n    },\n    iso885914: {\n        labelLong: 'Celtic (ISO 8859-14)',\n        labelShort: 'ISO 8859-14',\n        order: 15\n    },\n    windows1250: {\n        labelLong: 'Central European (Windows 1250)',\n        labelShort: 'Windows 1250',\n        order: 16\n    },\n    iso88592: {\n        labelLong: 'Central European (ISO 8859-2)',\n        labelShort: 'ISO 8859-2',\n        order: 17\n    },\n    cp852: {\n        labelLong: 'Central European (CP 852)',\n        labelShort: 'CP 852',\n        order: 18\n    },\n    windows1251: {\n        labelLong: 'Cyrillic (Windows 1251)',\n        labelShort: 'Windows 1251',\n        order: 19\n    },\n    cp866: {\n        labelLong: 'Cyrillic (CP 866)',\n        labelShort: 'CP 866',\n        order: 20\n    },\n    iso88595: {\n        labelLong: 'Cyrillic (ISO 8859-5)',\n        labelShort: 'ISO 8859-5',\n        order: 21\n    },\n    koi8r: {\n        labelLong: 'Cyrillic (KOI8-R)',\n        labelShort: 'KOI8-R',\n        order: 22\n    },\n    koi8u: {\n        labelLong: 'Cyrillic (KOI8-U)',\n        labelShort: 'KOI8-U',\n        order: 23\n    },\n    iso885913: {\n        labelLong: 'Estonian (ISO 8859-13)',\n        labelShort: 'ISO 8859-13',\n        order: 24\n    },\n    windows1253: {\n        labelLong: 'Greek (Windows 1253)',\n        labelShort: 'Windows 1253',\n        order: 25\n    },\n    iso88597: {\n        labelLong: 'Greek (ISO 8859-7)',\n        labelShort: 'ISO 8859-7',\n        order: 26\n    },\n    windows1255: {\n        labelLong: 'Hebrew (Windows 1255)',\n        labelShort: 'Windows 1255',\n        order: 27\n    },\n    iso88598: {\n        labelLong: 'Hebrew (ISO 8859-8)',\n        labelShort: 'ISO 8859-8',\n        order: 28\n    },\n    iso885910: {\n        labelLong: 'Nordic (ISO 8859-10)',\n        labelShort: 'ISO 8859-10',\n        order: 29\n    },\n    iso885916: {\n        labelLong: 'Romanian (ISO 8859-16)',\n        labelShort: 'ISO 8859-16',\n        order: 30\n    },\n    windows1254: {\n        labelLong: 'Turkish (Windows 1254)',\n        labelShort: 'Windows 1254',\n        order: 31\n    },\n    iso88599: {\n        labelLong: 'Turkish (ISO 8859-9)',\n        labelShort: 'ISO 8859-9',\n        order: 32\n    },\n    windows1258: {\n        labelLong: 'Vietnamese (Windows 1258)',\n        labelShort: 'Windows 1258',\n        order: 33\n    },\n    gbk: {\n        labelLong: 'Simplified Chinese (GBK)',\n        labelShort: 'GBK',\n        order: 34\n    },\n    gb18030: {\n        labelLong: 'Simplified Chinese (GB18030)',\n        labelShort: 'GB18030',\n        order: 35\n    },\n    cp950: {\n        labelLong: 'Traditional Chinese (Big5)',\n        labelShort: 'Big5',\n        order: 36\n    },\n    big5hkscs: {\n        labelLong: 'Traditional Chinese (Big5-HKSCS)',\n        labelShort: 'Big5-HKSCS',\n        order: 37\n    },\n    shiftjis: {\n        labelLong: 'Japanese (Shift JIS)',\n        labelShort: 'Shift JIS',\n        order: 38\n    },\n    eucjp: {\n        labelLong: 'Japanese (EUC-JP)',\n        labelShort: 'EUC-JP',\n        order: 39\n    },\n    euckr: {\n        labelLong: 'Korean (EUC-KR)',\n        labelShort: 'EUC-KR',\n        order: 40\n    },\n    windows874: {\n        labelLong: 'Thai (Windows 874)',\n        labelShort: 'Windows 874',\n        order: 41\n    },\n    iso885911: {\n        labelLong: 'Latin/Thai (ISO 8859-11)',\n        labelShort: 'ISO 8859-11',\n        order: 42\n    },\n    koi8ru: {\n        labelLong: 'Cyrillic (KOI8-RU)',\n        labelShort: 'KOI8-RU',\n        order: 43\n    },\n    koi8t: {\n        labelLong: 'Tajik (KOI8-T)',\n        labelShort: 'KOI8-T',\n        order: 44\n    },\n    gb2312: {\n        labelLong: 'Simplified Chinese (GB 2312)',\n        labelShort: 'GB 2312',\n        order: 45\n    },\n    cp865: {\n        labelLong: 'Nordic DOS (CP 865)',\n        labelShort: 'CP 865',\n        order: 46\n    },\n    cp850: {\n        labelLong: 'Western European DOS (CP 850)',\n        labelShort: 'CP 850',\n        order: 47\n    }\n};\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Event } from '../../common/event';\n\nexport interface NewWindowOptions {\n    readonly external?: boolean;\n}\n\n/**\n * Service for opening new browser windows.\n */\nexport const WindowService = Symbol('WindowService');\nexport interface WindowService {\n\n    /**\n     * Opens a new window and loads the content from the given URL.\n     * In a browser, opening a new Theia tab or open a link is the same thing.\n     * But in Electron, we want to open links in a browser, not in Electron.\n     */\n    openNewWindow(url: string, options?: NewWindowOptions): undefined;\n\n    /**\n     * Called when the `window` is about to `unload` its resources.\n     * At this point, the `document` is still visible and the [`BeforeUnloadEvent`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)\n     * event will be canceled if the return value of this method is `false`.\n     */\n    canUnload(): boolean;\n\n    /**\n     * Fires when the `window` unloads. The unload event is inevitable. On this event, the frontend application can save its state and release resource.\n     * Saving the state and releasing any resources must be a synchronous call. Any asynchronous calls invoked after emitting this event might be ignored.\n     */\n    readonly onUnload: Event<void>;\n\n}\n","/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/base/common/buffer.ts\n\n/* eslint-disable no-null/no-null */\n\nimport { Buffer as SaferBuffer } from 'safer-buffer';\nimport * as iconv from 'iconv-lite';\nimport * as streams from './stream';\n\nconst hasBuffer = (typeof Buffer !== 'undefined');\nconst hasTextEncoder = (typeof TextEncoder !== 'undefined');\nconst hasTextDecoder = (typeof TextDecoder !== 'undefined');\n\nlet textEncoder: TextEncoder | null;\nlet textDecoder: TextDecoder | null;\n\nexport class BinaryBuffer {\n\n    static alloc(byteLength: number): BinaryBuffer {\n        if (hasBuffer) {\n            return new BinaryBuffer(Buffer.allocUnsafe(byteLength));\n        } else {\n            return new BinaryBuffer(new Uint8Array(byteLength));\n        }\n    }\n\n    static wrap(actual: Uint8Array): BinaryBuffer {\n        if (hasBuffer && !(Buffer.isBuffer(actual))) {\n            // https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n            // Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array\n            actual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);\n        }\n        return new BinaryBuffer(actual);\n    }\n\n    static fromString(source: string): BinaryBuffer {\n        if (hasBuffer) {\n            return new BinaryBuffer(Buffer.from(source));\n        } else if (hasTextEncoder) {\n            if (!textEncoder) {\n                textEncoder = new TextEncoder();\n            }\n            return new BinaryBuffer(textEncoder.encode(source));\n        } else {\n            return new BinaryBuffer(iconv.encode(source, 'utf8'));\n        }\n    }\n\n    static concat(buffers: BinaryBuffer[], totalLength?: number): BinaryBuffer {\n        if (typeof totalLength === 'undefined') {\n            totalLength = 0;\n            for (let i = 0, len = buffers.length; i < len; i++) {\n                totalLength += buffers[i].byteLength;\n            }\n        }\n\n        const ret = BinaryBuffer.alloc(totalLength);\n        let offset = 0;\n        for (let i = 0, len = buffers.length; i < len; i++) {\n            const element = buffers[i];\n            ret.set(element, offset);\n            offset += element.byteLength;\n        }\n\n        return ret;\n    }\n\n    readonly buffer: Uint8Array;\n    readonly byteLength: number;\n\n    private constructor(buffer: Uint8Array) {\n        this.buffer = buffer;\n        this.byteLength = this.buffer.byteLength;\n    }\n\n    toString(): string {\n        if (hasBuffer) {\n            return this.buffer.toString();\n        } else if (hasTextDecoder) {\n            if (!textDecoder) {\n                textDecoder = new TextDecoder();\n            }\n            return textDecoder.decode(this.buffer);\n        } else {\n            return iconv.decode(SaferBuffer.from(this.buffer), 'utf8');\n        }\n    }\n\n    slice(start?: number, end?: number): BinaryBuffer {\n        // IMPORTANT: use subarray instead of slice because TypedArray#slice\n        // creates shallow copy and NodeBuffer#slice doesn't. The use of subarray\n        // ensures the same, performant, behaviour.\n        return new BinaryBuffer(this.buffer.subarray(start, end));\n    }\n\n    set(array: BinaryBuffer, offset?: number): void;\n    set(array: Uint8Array, offset?: number): void;\n    set(array: BinaryBuffer | Uint8Array, offset?: number): void {\n        if (array instanceof BinaryBuffer) {\n            this.buffer.set(array.buffer, offset);\n        } else {\n            this.buffer.set(array, offset);\n        }\n    }\n\n    readUInt32BE(offset: number): number {\n        return (\n            this.buffer[offset] * 2 ** 24\n            + this.buffer[offset + 1] * 2 ** 16\n            + this.buffer[offset + 2] * 2 ** 8\n            + this.buffer[offset + 3]\n        );\n    }\n\n    writeUInt32BE(value: number, offset: number): void {\n        this.buffer[offset + 3] = value;\n        value = value >>> 8;\n        this.buffer[offset + 2] = value;\n        value = value >>> 8;\n        this.buffer[offset + 1] = value;\n        value = value >>> 8;\n        this.buffer[offset] = value;\n    }\n\n    readUInt32LE(offset: number): number {\n        return (\n            ((this.buffer[offset + 0] << 0) >>> 0) |\n            ((this.buffer[offset + 1] << 8) >>> 0) |\n            ((this.buffer[offset + 2] << 16) >>> 0) |\n            ((this.buffer[offset + 3] << 24) >>> 0)\n        );\n    }\n\n    writeUInt32LE(value: number, offset: number): void {\n        this.buffer[offset + 0] = (value & 0b11111111);\n        value = value >>> 8;\n        this.buffer[offset + 1] = (value & 0b11111111);\n        value = value >>> 8;\n        this.buffer[offset + 2] = (value & 0b11111111);\n        value = value >>> 8;\n        this.buffer[offset + 3] = (value & 0b11111111);\n    }\n\n    readUInt8(offset: number): number {\n        return this.buffer[offset];\n    }\n\n    writeUInt8(value: number, offset: number): void {\n        this.buffer[offset] = value;\n    }\n\n}\n\nexport interface BinaryBufferReadable extends streams.Readable<BinaryBuffer> { }\nexport namespace BinaryBufferReadable {\n    export function toBuffer(readable: BinaryBufferReadable): BinaryBuffer {\n        return streams.consumeReadable<BinaryBuffer>(readable, chunks => BinaryBuffer.concat(chunks));\n    }\n    export function fromBuffer(buffer: BinaryBuffer): BinaryBufferReadable {\n        return streams.toReadable<BinaryBuffer>(buffer);\n    }\n    export function fromReadable(readable: streams.Readable<string>): BinaryBufferReadable {\n        return {\n            read(): BinaryBuffer | null {\n                const value = readable.read();\n\n                if (typeof value === 'string') {\n                    return BinaryBuffer.fromString(value);\n                }\n\n                return null;\n            }\n        };\n    }\n}\n\nexport interface BinaryBufferReadableStream extends streams.ReadableStream<BinaryBuffer> { }\nexport namespace BinaryBufferReadableStream {\n    export function toBuffer(stream: BinaryBufferReadableStream): Promise<BinaryBuffer> {\n        return streams.consumeStream<BinaryBuffer>(stream, chunks => BinaryBuffer.concat(chunks));\n    }\n    export function fromBuffer(buffer: BinaryBuffer): BinaryBufferReadableStream {\n        return streams.toStream<BinaryBuffer>(buffer, chunks => BinaryBuffer.concat(chunks));\n    }\n}\n\nexport interface BinaryBufferReadableBufferedStream extends streams.ReadableBufferedStream<BinaryBuffer> { }\nexport namespace BinaryBufferReadableBufferedStream {\n    export async function toBuffer(bufferedStream: streams.ReadableBufferedStream<BinaryBuffer>): Promise<BinaryBuffer> {\n        if (bufferedStream.ended) {\n            return BinaryBuffer.concat(bufferedStream.buffer);\n        }\n\n        return BinaryBuffer.concat([\n\n            // Include already read chunks...\n            ...bufferedStream.buffer,\n\n            // ...and all additional chunks\n            await BinaryBufferReadableStream.toBuffer(bufferedStream.stream)\n        ]);\n    }\n}\n\nexport interface BinaryBufferWriteableStream extends streams.WriteableStream<BinaryBuffer> { }\nexport namespace BinaryBufferWriteableStream {\n    export function create(options?: streams.WriteableStreamOptions): BinaryBufferWriteableStream {\n        return streams.newWriteableStream<BinaryBuffer>(chunks => BinaryBuffer.concat(chunks), options);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// based on https://github.com/microsoft/vscode/blob/04c36be045a94fee58e5f8992d3e3fd980294a84/src/vs/workbench/services/textfile/common/encoding.ts\n\n/* eslint-disable no-null/no-null */\n\nimport * as iconv from 'iconv-lite';\nimport { Buffer } from 'safer-buffer';\nimport { injectable } from 'inversify';\nimport { BinaryBuffer, BinaryBufferReadableStream, BinaryBufferReadable } from './buffer';\nimport { UTF8, UTF8_with_bom, UTF16be, UTF16le, UTF16be_BOM, UTF16le_BOM, UTF8_BOM } from './encodings';\nimport { newWriteableStream, ReadableStream, Readable } from './stream';\n\nconst ZERO_BYTE_DETECTION_BUFFER_MAX_LEN = 512;   // number of bytes to look at to decide about a file being binary or not\nconst NO_ENCODING_GUESS_MIN_BYTES = 512;          // when not auto guessing the encoding, small number of bytes are enough\nconst AUTO_ENCODING_GUESS_MIN_BYTES = 512 * 8;    // with auto guessing we want a lot more content to be read for guessing\nconst AUTO_ENCODING_GUESS_MAX_BYTES = 512 * 128;  // set an upper limit for the number of bytes we pass on to jschardet\n\n// we explicitly ignore a specific set of encodings from auto guessing\n// - ASCII: we never want this encoding (most UTF-8 files would happily detect as\n//          ASCII files and then you could not type non-ASCII characters anymore)\n// - UTF-16: we have our own detection logic for UTF-16\n// - UTF-32: we do not support this encoding in VSCode\nconst IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];\n\nexport interface ResourceEncoding {\n    encoding: string\n    hasBOM: boolean\n}\n\nexport interface DetectedEncoding {\n    encoding?: string\n    seemsBinary?: boolean\n}\n\nexport interface DecodeStreamOptions {\n    guessEncoding?: boolean;\n    minBytesRequiredForDetection?: number;\n\n    overwriteEncoding(detectedEncoding: string | undefined): Promise<string>;\n}\nexport interface DecodeStreamResult {\n    stream: ReadableStream<string>;\n    detected: DetectedEncoding;\n}\n\n@injectable()\nexport class EncodingService {\n\n    encode(value: string, options?: ResourceEncoding): BinaryBuffer {\n        let encoding = options?.encoding;\n        const addBOM = options?.hasBOM;\n        encoding = this.toIconvEncoding(encoding);\n        if (encoding === UTF8 && !addBOM) {\n            return BinaryBuffer.fromString(value);\n        }\n        const buffer = iconv.encode(value, encoding, { addBOM });\n        return BinaryBuffer.wrap(buffer);\n    }\n\n    decode(value: BinaryBuffer, encoding?: string): string {\n        const buffer = Buffer.from(value.buffer);\n        encoding = this.toIconvEncoding(encoding);\n        return iconv.decode(buffer, encoding);\n    }\n\n    exists(encoding: string): boolean {\n        encoding = this.toIconvEncoding(encoding);\n        return iconv.encodingExists(encoding);\n    }\n\n    toIconvEncoding(encoding?: string): string {\n        if (encoding === UTF8_with_bom || !encoding) {\n            return UTF8; // iconv does not distinguish UTF 8 with or without BOM, so we need to help it\n        }\n        return encoding;\n    }\n\n    async toResourceEncoding(encoding: string, options: {\n        overwriteEncoding?: boolean,\n        read: (length: number) => Promise<Uint8Array>\n    }): Promise<ResourceEncoding> {\n        // Some encodings come with a BOM automatically\n        if (encoding === UTF16be || encoding === UTF16le || encoding === UTF8_with_bom) {\n            return { encoding, hasBOM: true };\n        }\n\n        // Ensure that we preserve an existing BOM if found for UTF8\n        // unless we are instructed to overwrite the encoding\n        const overwriteEncoding = options?.overwriteEncoding;\n        if (!overwriteEncoding && encoding === UTF8) {\n            try {\n                // stream here to avoid fetching the whole content on write\n                const buffer = await options.read(UTF8_BOM.length);\n                if (this.detectEncodingByBOMFromBuffer(Buffer.from(buffer), buffer.byteLength) === UTF8_with_bom) {\n                    return { encoding, hasBOM: true };\n                }\n            } catch (error) {\n                // ignore - file might not exist\n            }\n        }\n\n        return { encoding, hasBOM: false };\n    }\n\n    async detectEncoding(data: BinaryBuffer, autoGuessEncoding?: boolean): Promise<DetectedEncoding> {\n        const buffer = Buffer.from(data.buffer);\n        const bytesRead = data.byteLength;\n        // Always first check for BOM to find out about encoding\n        let encoding = this.detectEncodingByBOMFromBuffer(buffer, bytesRead);\n\n        // Detect 0 bytes to see if file is binary or UTF-16 LE/BEÏ\n        // unless we already know that this file has a UTF-16 encoding\n        let seemsBinary = false;\n        if (encoding !== UTF16be && encoding !== UTF16le && buffer) {\n            let couldBeUTF16LE = true; // e.g. 0xAA 0x00\n            let couldBeUTF16BE = true; // e.g. 0x00 0xAA\n            let containsZeroByte = false;\n\n            // This is a simplified guess to detect UTF-16 BE or LE by just checking if\n            // the first 512 bytes have the 0-byte at a specific location. For UTF-16 LE\n            // this would be the odd byte index and for UTF-16 BE the even one.\n            // Note: this can produce false positives (a binary file that uses a 2-byte\n            // encoding of the same format as UTF-16) and false negatives (a UTF-16 file\n            // that is using 4 bytes to encode a character).\n            for (let i = 0; i < bytesRead && i < ZERO_BYTE_DETECTION_BUFFER_MAX_LEN; i++) {\n                const isEndian = (i % 2 === 1); // assume 2-byte sequences typical for UTF-16\n                const isZeroByte = (buffer.readUInt8(i) === 0);\n\n                if (isZeroByte) {\n                    containsZeroByte = true;\n                }\n\n                // UTF-16 LE: expect e.g. 0xAA 0x00\n                if (couldBeUTF16LE && (isEndian && !isZeroByte || !isEndian && isZeroByte)) {\n                    couldBeUTF16LE = false;\n                }\n\n                // UTF-16 BE: expect e.g. 0x00 0xAA\n                if (couldBeUTF16BE && (isEndian && isZeroByte || !isEndian && !isZeroByte)) {\n                    couldBeUTF16BE = false;\n                }\n\n                // Return if this is neither UTF16-LE nor UTF16-BE and thus treat as binary\n                if (isZeroByte && !couldBeUTF16LE && !couldBeUTF16BE) {\n                    break;\n                }\n            }\n\n            // Handle case of 0-byte included\n            if (containsZeroByte) {\n                if (couldBeUTF16LE) {\n                    encoding = UTF16le;\n                } else if (couldBeUTF16BE) {\n                    encoding = UTF16be;\n                } else {\n                    seemsBinary = true;\n                }\n            }\n        }\n\n        // Auto guess encoding if configured\n        if (autoGuessEncoding && !seemsBinary && !encoding && buffer) {\n            const guessedEncoding = await this.guessEncodingByBuffer(buffer.slice(0, bytesRead));\n            return {\n                seemsBinary: false,\n                encoding: guessedEncoding\n            };\n        }\n\n        return { seemsBinary, encoding };\n    }\n\n    protected detectEncodingByBOMFromBuffer(buffer: Buffer, bytesRead: number): typeof UTF8_with_bom | typeof UTF16le | typeof UTF16be | undefined {\n        if (!buffer || bytesRead < UTF16be_BOM.length) {\n            return undefined;\n        }\n\n        const b0 = buffer.readUInt8(0);\n        const b1 = buffer.readUInt8(1);\n\n        // UTF-16 BE\n        if (b0 === UTF16be_BOM[0] && b1 === UTF16be_BOM[1]) {\n            return UTF16be;\n        }\n\n        // UTF-16 LE\n        if (b0 === UTF16le_BOM[0] && b1 === UTF16le_BOM[1]) {\n            return UTF16le;\n        }\n\n        if (bytesRead < UTF8_BOM.length) {\n            return undefined;\n        }\n\n        const b2 = buffer.readUInt8(2);\n\n        // UTF-8\n        if (b0 === UTF8_BOM[0] && b1 === UTF8_BOM[1] && b2 === UTF8_BOM[2]) {\n            return UTF8_with_bom;\n        }\n\n        return undefined;\n    }\n\n    protected async guessEncodingByBuffer(buffer: Buffer): Promise<string | undefined> {\n        const jschardet = await import('jschardet');\n\n        const guessed = jschardet.detect(buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES)); // ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53\n        if (!guessed || !guessed.encoding) {\n            return undefined;\n        }\n\n        const enc = guessed.encoding.toLowerCase();\n        if (0 <= IGNORE_ENCODINGS.indexOf(enc)) {\n            return undefined; // see comment above why we ignore some encodings\n        }\n\n        return this.toIconvEncoding(guessed.encoding);\n    }\n\n    decodeStream(source: BinaryBufferReadableStream, options: DecodeStreamOptions): Promise<DecodeStreamResult> {\n        const minBytesRequiredForDetection = options.minBytesRequiredForDetection ?? options.guessEncoding ? AUTO_ENCODING_GUESS_MIN_BYTES : NO_ENCODING_GUESS_MIN_BYTES;\n\n        return new Promise<DecodeStreamResult>((resolve, reject) => {\n            const target = newWriteableStream<string>(strings => strings.join(''));\n\n            const bufferedChunks: BinaryBuffer[] = [];\n            let bytesBuffered = 0;\n\n            let decoder: iconv.DecoderStream | undefined = undefined;\n\n            const createDecoder = async () => {\n                try {\n\n                    // detect encoding from buffer\n                    const detected = await this.detectEncoding(BinaryBuffer.concat(bufferedChunks), options.guessEncoding);\n\n                    // ensure to respect overwrite of encoding\n                    detected.encoding = await options.overwriteEncoding(detected.encoding);\n\n                    // decode and write buffered content\n                    decoder = iconv.getDecoder(this.toIconvEncoding(detected.encoding));\n                    const decoded = decoder.write(Buffer.from(BinaryBuffer.concat(bufferedChunks).buffer));\n                    target.write(decoded);\n\n                    bufferedChunks.length = 0;\n                    bytesBuffered = 0;\n\n                    // signal to the outside our detected encoding and final decoder stream\n                    resolve({\n                        stream: target,\n                        detected\n                    });\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            // Stream error: forward to target\n            source.on('error', error => target.error(error));\n\n            // Stream data\n            source.on('data', async chunk => {\n\n                // if the decoder is ready, we just write directly\n                if (decoder) {\n                    target.write(decoder.write(Buffer.from(chunk.buffer)));\n                } else {\n                    bufferedChunks.push(chunk);\n                    bytesBuffered += chunk.byteLength;\n\n                    // buffered enough data for encoding detection, create stream\n                    if (bytesBuffered >= minBytesRequiredForDetection) {\n\n                        // pause stream here until the decoder is ready\n                        source.pause();\n\n                        await createDecoder();\n\n                        // resume stream now that decoder is ready but\n                        // outside of this stack to reduce recursion\n                        setTimeout(() => source.resume());\n                    }\n                }\n            });\n\n            // Stream end\n            source.on('end', async () => {\n\n                // we were still waiting for data to do the encoding\n                // detection. thus, wrap up starting the stream even\n                // without all the data to get things going\n                if (!decoder) {\n                    await createDecoder();\n                }\n\n                // end the target with the remainders of the decoder\n                target.end(decoder?.end());\n            });\n        });\n    }\n\n    encodeStream(value: string | Readable<string>, options?: ResourceEncoding): Promise<BinaryBuffer | BinaryBufferReadable>\n    encodeStream(value?: string | Readable<string>, options?: ResourceEncoding): Promise<BinaryBuffer | BinaryBufferReadable | undefined>;\n    async encodeStream(value: string | Readable<string> | undefined, options?: ResourceEncoding): Promise<BinaryBuffer | BinaryBufferReadable | undefined> {\n        let encoding = options?.encoding;\n        const addBOM = options?.hasBOM;\n        encoding = this.toIconvEncoding(encoding);\n        if (encoding === UTF8 && !addBOM) {\n            return value === undefined ? undefined : typeof value === 'string' ?\n                BinaryBuffer.fromString(value) : BinaryBufferReadable.fromReadable(value);\n        }\n\n        value = value || '';\n        const readable = typeof value === 'string' ? Readable.fromString(value) : value;\n        const encoder = iconv.getEncoder(encoding, { addBOM });\n\n        let bytesWritten = false;\n        let done = false;\n\n        return {\n            read(): BinaryBuffer | null {\n                if (done) {\n                    return null;\n                }\n\n                const chunk = readable.read();\n                if (typeof chunk !== 'string') {\n                    done = true;\n\n                    // If we are instructed to add a BOM but we detect that no\n                    // bytes have been written, we must ensure to return the BOM\n                    // ourselves so that we comply with the contract.\n                    if (!bytesWritten && addBOM) {\n                        switch (encoding) {\n                            case UTF8:\n                            case UTF8_with_bom:\n                                return BinaryBuffer.wrap(Uint8Array.from(UTF8_BOM));\n                            case UTF16be:\n                                return BinaryBuffer.wrap(Uint8Array.from(UTF16be_BOM));\n                            case UTF16le:\n                                return BinaryBuffer.wrap(Uint8Array.from(UTF16le_BOM));\n                        }\n                    }\n\n                    const leftovers = encoder.end();\n                    if (leftovers && leftovers.length > 0) {\n                        bytesWritten = true;\n                        return BinaryBuffer.wrap(leftovers);\n                    }\n\n                    return null;\n                }\n\n                bytesWritten = true;\n\n                return BinaryBuffer.wrap(encoder.write(chunk));\n            }\n        };\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2020 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport const UTF8 = 'utf8';\nexport const UTF8_with_bom = 'utf8bom';\nexport const UTF16be = 'utf16be';\nexport const UTF16le = 'utf16le';\n\nexport const UTF16be_BOM = [0xFE, 0xFF];\nexport const UTF16le_BOM = [0xFF, 0xFE];\nexport const UTF8_BOM = [0xEF, 0xBB, 0xBF];\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport const envVariablesPath = '/services/envs';\n\nexport const EnvVariablesServer = Symbol('EnvVariablesServer');\nexport interface EnvVariablesServer {\n    getExecPath(): Promise<string>\n    getVariables(): Promise<EnvVariable[]>\n    getValue(key: string): Promise<EnvVariable | undefined>\n    getConfigDirUri(): Promise<string>;\n    /**\n     * Resolves to a URI representing the current user's home directory.\n     */\n    getHomeDirUri(): Promise<string>;\n    /**\n     * Resolves to an array of URIs pointing to the available drives on the filesystem.\n     */\n    getDrives(): Promise<string[]>;\n}\n\nexport interface EnvVariable {\n    readonly name: string\n    readonly value: string | undefined\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './env-variables-protocol';\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { PreferenceScope } from './preference-scope';\n\nexport interface PreferenceSchema {\n    [name: string]: any,\n    scope?: 'application' | 'window' | 'resource' | PreferenceScope,\n    overridable?: boolean;\n    properties: PreferenceSchemaProperties\n}\nexport namespace PreferenceSchema {\n    export function is(obj: Object | undefined): obj is PreferenceSchema {\n        return !!obj && ('properties' in obj) && PreferenceSchemaProperties.is((<any>obj)['properties']);\n    }\n    export function getDefaultScope(schema: PreferenceSchema): PreferenceScope {\n        let defaultScope: PreferenceScope = PreferenceScope.Workspace;\n        if (!PreferenceScope.is(schema.scope)) {\n            defaultScope = PreferenceScope.fromString(<string>schema.scope) || PreferenceScope.Workspace;\n        } else {\n            defaultScope = schema.scope;\n        }\n        return defaultScope;\n    }\n}\n\nexport interface PreferenceSchemaProperties {\n    [name: string]: PreferenceSchemaProperty\n}\nexport namespace PreferenceSchemaProperties {\n    export function is(obj: Object | undefined): obj is PreferenceSchemaProperties {\n        return !!obj && typeof obj === 'object';\n    }\n}\n\nexport interface PreferenceDataSchema {\n    [name: string]: any,\n    scope?: PreferenceScope,\n    properties: {\n        [name: string]: PreferenceDataProperty\n    }\n    patternProperties: {\n        [name: string]: PreferenceDataProperty\n    };\n}\n\nexport interface PreferenceItem {\n    type?: JsonType | JsonType[];\n    minimum?: number;\n    /**\n     * content assist (UI) default value\n     */\n    default?: any;\n    /**\n     * preference default value, if `undefined` then `default`\n     */\n    defaultValue?: any;\n    enum?: string[];\n    items?: PreferenceItem;\n    properties?: { [name: string]: PreferenceItem };\n    additionalProperties?: object | boolean;\n    [name: string]: any;\n    overridable?: boolean;\n}\n\nexport interface PreferenceSchemaProperty extends PreferenceItem {\n    description?: string;\n    markdownDescription?: string;\n    scope?: 'application' | 'machine' | 'window' | 'resource' | 'language-overridable' | 'machine-overridable' | PreferenceScope;\n}\n\nexport interface PreferenceDataProperty extends PreferenceItem {\n    description?: string;\n    markdownDescription?: string;\n    scope?: PreferenceScope;\n}\nexport namespace PreferenceDataProperty {\n    export function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope: PreferenceScope = PreferenceScope.Workspace): PreferenceDataProperty {\n        if (!schemaProps.scope) {\n            schemaProps.scope = defaultScope;\n        } else if (typeof schemaProps.scope === 'string') {\n            return Object.assign(schemaProps, { scope: PreferenceScope.fromString(schemaProps.scope) || defaultScope });\n        }\n        return <PreferenceDataProperty>schemaProps;\n    }\n}\n\nexport type JsonType = 'string' | 'array' | 'number' | 'integer' | 'object' | 'boolean' | 'null';\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport enum PreferenceScope {\n    Default,\n    User,\n    Workspace,\n    Folder\n}\n\nexport namespace PreferenceScope {\n    export function is(scope: any): scope is PreferenceScope {\n        return typeof scope === 'number' && getScopes().findIndex(s => s === scope) >= 0;\n    }\n\n    /**\n     * @returns preference scopes from broadest to narrowest: Default -> Folder.\n     */\n    export function getScopes(): PreferenceScope[] {\n        return Object.keys(PreferenceScope)\n            .filter(k => typeof PreferenceScope[k as any] === 'string')\n            .map(v => <PreferenceScope>Number(v));\n    }\n\n    /**\n     * @returns preference scopes from narrowest to broadest. Folder -> Default.\n     */\n    export function getReversedScopes(): PreferenceScope[] {\n        return getScopes().reverse();\n    }\n\n    export function getScopeNames(scope?: PreferenceScope): string[] {\n        const names: string[] = [];\n        const allNames = Object.keys(PreferenceScope)\n            .filter(k => typeof PreferenceScope[k as any] === 'number');\n        if (scope) {\n            for (const name of allNames) {\n                if ((<any>PreferenceScope)[name] <= scope) {\n                    names.push(name);\n                }\n            }\n        }\n        return names;\n    }\n\n    export function fromString(strScope: string): PreferenceScope | undefined {\n        switch (strScope) {\n            case 'application':\n                return PreferenceScope.User;\n            case 'window':\n                return PreferenceScope.Folder;\n            case 'resource':\n                return PreferenceScope.Folder;\n            case 'language-overridable':\n                return PreferenceScope.Folder;\n        }\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { CancellationToken, cancelled } from './cancellation';\n\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred<T> {\n    resolve: (value?: T) => void;\n    reject: (err?: any) => void; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n    promise = new Promise<T>((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n    });\n}\n\n/**\n * @returns resolves after a specified number of milliseconds\n * @throws cancelled if a given token is cancelled before a specified number of milliseconds\n */\nexport function timeout(ms: number, token = CancellationToken.None): Promise<void> {\n    const deferred = new Deferred<void>();\n    const handle = setTimeout(() => deferred.resolve(), ms);\n    token.onCancellationRequested(() => {\n        clearTimeout(handle);\n        deferred.reject(cancelled());\n    });\n    return deferred.promise;\n}\n\nexport async function retry<T>(task: () => Promise<T>, delay: number, retries: number): Promise<T> {\n    let lastError: Error | undefined;\n\n    for (let i = 0; i < retries; i++) {\n        try {\n            return await task();\n        } catch (error) {\n            lastError = error;\n\n            await timeout(delay);\n        }\n    }\n\n    throw lastError;\n}\n","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, optionsArgument) {\n\tvar cloneOptionWasSpecified = optionsArgument && typeof optionsArgument.clone === 'boolean';\n\tvar clone = !cloneOptionWasSpecified || optionsArgument.clone === true;\n\n\treturn (clone && isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, optionsArgument)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n\tvar destination = target.slice();\n\tsource.forEach(function(e, i) {\n\t\tif (typeof destination[i] === 'undefined') {\n\t\t\tdestination[i] = cloneUnlessOtherwiseSpecified(e, optionsArgument);\n\t\t} else if (isMergeableObject(e)) {\n\t\t\tdestination[i] = deepmerge(target[i], e, optionsArgument);\n\t\t} else if (target.indexOf(e) === -1) {\n\t\t\tdestination.push(cloneUnlessOtherwiseSpecified(e, optionsArgument));\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n\tvar destination = {};\n\tif (isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], optionsArgument);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar options = optionsArgument || { arrayMerge: defaultArrayMerge };\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, optionsArgument)\n\t} else if (sourceIsArray) {\n\t\tvar arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\treturn arrayMerge(target, source, optionsArgument)\n\t} else {\n\t\treturn mergeObject(target, source, optionsArgument)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n\tif (!Array.isArray(array) || array.length < 2) {\n\t\tthrow new Error('first argument should be an array with at least two elements')\n\t}\n\n\t// we are sure there are at least 2 values, so it is safe to have no initial value\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, optionsArgument)\n\t})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n"],"sourceRoot":""}