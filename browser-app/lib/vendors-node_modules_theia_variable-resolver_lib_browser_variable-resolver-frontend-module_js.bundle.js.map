{"version":3,"sources":["webpack://browser-app/../node_modules/@theia/variable-resolver/src/browser/common-variable-contribution.ts","webpack://browser-app/../node_modules/@theia/variable-resolver/src/browser/variable-resolver-frontend-contribution.ts","webpack://browser-app/../node_modules/@theia/variable-resolver/src/browser/variable-resolver-frontend-module.ts"],"names":[],"mappings":"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","file":"vendors-node_modules_theia_variable-resolver_lib_browser_variable-resolver-frontend-module_js.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, optional } from '@theia/core/shared/inversify';\nimport { VariableContribution, VariableRegistry } from './variable';\nimport { ApplicationServer } from '@theia/core/lib/common/application-protocol';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { CommandService } from '@theia/core/lib/common/command';\nimport { OS } from '@theia/core/lib/common/os';\nimport { PreferenceService } from '@theia/core/lib/browser/preferences/preference-service';\nimport { ResourceContextKey } from '@theia/core/lib/browser/resource-context-key';\nimport { VariableInput } from './variable-input';\nimport { QuickInputService, QuickPickValue } from '@theia/core/lib/browser';\nimport { MaybeArray, RecursivePartial } from '@theia/core/lib/common/types';\n\n@injectable()\nexport class CommonVariableContribution implements VariableContribution {\n\n    @inject(EnvVariablesServer)\n    protected readonly env: EnvVariablesServer;\n\n    @inject(CommandService)\n    protected readonly commands: CommandService;\n\n    @inject(PreferenceService)\n    protected readonly preferences: PreferenceService;\n\n    @inject(ResourceContextKey)\n    protected readonly resourceContextKey: ResourceContextKey;\n\n    @inject(QuickInputService) @optional()\n    protected readonly quickInputService: QuickInputService;\n\n    @inject(ApplicationServer)\n    protected readonly appServer: ApplicationServer;\n\n    async registerVariables(variables: VariableRegistry): Promise<void> {\n        const [execPath, backendOS] = await Promise.all([\n            this.env.getExecPath(),\n            this.appServer.getBackendOS()\n        ]);\n        variables.registerVariable({\n            name: 'execPath',\n            resolve: () => execPath\n        });\n        variables.registerVariable({\n            name: 'pathSeparator',\n            resolve: () => backendOS === OS.Type.Windows ? '\\\\' : '/'\n        });\n        variables.registerVariable({\n            name: 'env',\n            resolve: async (_, envVariableName) => {\n                const envVariable = envVariableName && await this.env.getValue(envVariableName);\n                const envValue = envVariable && envVariable.value;\n                return envValue || '';\n            }\n        });\n        variables.registerVariable({\n            name: 'config',\n            resolve: (resourceUri = this.resourceContextKey.get(), preferenceName) => {\n                if (!preferenceName) {\n                    return undefined;\n                }\n                return this.preferences.get(preferenceName, undefined, resourceUri && resourceUri.toString());\n            }\n        });\n        variables.registerVariable({\n            name: 'command',\n            resolve: async (_, command) =>\n                // eslint-disable-next-line no-return-await\n                command && await this.commands.executeCommand(command)\n        });\n        variables.registerVariable({\n            name: 'input',\n            resolve: async (resourceUri = this.resourceContextKey.get(), variable, section) => {\n                if (!variable || !section) {\n                    return undefined;\n                }\n                const configuration = this.preferences.get<RecursivePartial<{ inputs: MaybeArray<VariableInput> }>>(section, undefined, resourceUri && resourceUri.toString());\n                const inputs = !!configuration && 'inputs' in configuration ? configuration.inputs : undefined;\n                const input = Array.isArray(inputs) && inputs.find(item => !!item && item.id === variable);\n                if (!input) {\n                    return undefined;\n                }\n                if (input.type === 'promptString') {\n                    if (typeof input.description !== 'string') {\n                        return undefined;\n                    }\n                    return this.quickInputService?.input({\n                        prompt: input.description,\n                        value: input.default\n                    });\n                }\n                if (input.type === 'pickString') {\n                    if (typeof input.description !== 'string' || !Array.isArray(input.options)) {\n                        return undefined;\n                    }\n                    const elements: Array<QuickPickValue<string>> = [];\n                    for (const option of input.options) {\n                        if (typeof option !== 'string') {\n                            return undefined;\n                        }\n                        if (option === input.default) {\n                            elements.unshift({\n                                description: 'Default',\n                                label: option,\n                                value: option\n                            });\n                        } else {\n                            elements.push({\n                                label: option,\n                                value: option\n                            });\n                        }\n                    }\n                    return this.quickInputService?.showQuickPick(elements, { placeholder: input.description });\n                }\n                if (input.type === 'command') {\n                    if (typeof input.command !== 'string') {\n                        return undefined;\n                    }\n                    return this.commands.executeCommand(input.command, input.args);\n                }\n                return undefined;\n            }\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named } from '@theia/core/shared/inversify';\nimport { FrontendApplicationContribution } from '@theia/core/lib/browser';\nimport { Command, CommandContribution, CommandRegistry, ContributionProvider } from '@theia/core/lib/common';\nimport { VariableContribution, VariableRegistry } from './variable';\nimport { VariableQuickOpenService } from './variable-quick-open-service';\n\nexport const LIST_VARIABLES: Command = {\n    id: 'variable.list',\n    label: 'Variable: List All'\n};\n\n@injectable()\nexport class VariableResolverFrontendContribution implements FrontendApplicationContribution, CommandContribution {\n\n    constructor(\n        @inject(ContributionProvider) @named(VariableContribution)\n        protected readonly contributionProvider: ContributionProvider<VariableContribution>,\n        @inject(VariableRegistry) protected readonly variableRegistry: VariableRegistry,\n        @inject(VariableQuickOpenService) protected readonly variableQuickOpenService: VariableQuickOpenService\n    ) { }\n\n    onStart(): void {\n        this.contributionProvider.getContributions().forEach(contrib =>\n            contrib.registerVariables(this.variableRegistry)\n        );\n    }\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(LIST_VARIABLES, {\n            isEnabled: () => true,\n            execute: () => this.variableQuickOpenService.open()\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { bindContributionProvider, CommandContribution } from '@theia/core';\nimport { FrontendApplicationContribution } from '@theia/core/lib/browser';\nimport { VariableRegistry, VariableContribution } from './variable';\nimport { VariableQuickOpenService } from './variable-quick-open-service';\nimport { VariableResolverFrontendContribution } from './variable-resolver-frontend-contribution';\nimport { VariableResolverService } from './variable-resolver-service';\nimport { CommonVariableContribution } from './common-variable-contribution';\n\nexport default new ContainerModule(bind => {\n    bind(VariableRegistry).toSelf().inSingletonScope();\n    bind(VariableResolverService).toSelf().inSingletonScope();\n    bindContributionProvider(bind, VariableContribution);\n\n    bind(VariableResolverFrontendContribution).toSelf().inSingletonScope();\n    for (const identifier of [FrontendApplicationContribution, CommandContribution]) {\n        bind(identifier).toService(VariableResolverFrontendContribution);\n    }\n\n    bind(VariableQuickOpenService).toSelf().inSingletonScope();\n\n    bind(CommonVariableContribution).toSelf().inSingletonScope();\n    bind(VariableContribution).toService(CommonVariableContribution);\n});\n"],"sourceRoot":""}